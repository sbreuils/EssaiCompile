DefVarsN3();

DissectFirst = {
	PP = _P(1);
	PPip = PP.PP;
	PPsqrt = sqrt(PPip);
    -( -PPsqrt+PP)/(einf.PP)
}

DissectSecond = {
	PP = _P(1);
	PPip = PP.PP;
	PPsqrt = sqrt(PPip);
    -(PPsqrt+PP)/(einf.PP)
}

GetAngle = {
	mv1 = _P(1);
	mv2 = _P(2);
	inner_prod = mv1.mv2;
	abs_prod = abs(mv1) * abs(mv2);
	inner_prod / abs_prod
}


// Step 1: Compute the swivel plane
p_z = VecN3(0,0,1);
p_w = VecN3(pwx,pwy,pwz);

l_sw = *(e0^p_w^einf);

SwivelPlaneDual = *(e0^p_z^p_w^einf);

norm_l_sw =  abs(l_sw);
l_sw = l_sw / norm_l_sw; // normalize rotation axis

q_swivel = cos(phi/2) + l_sw*sin(phi/2);
?SwivelPlane = q_swivel * SwivelPlaneDual * ~q_swivel;


// Step 2: Compute elbow point
S1 = p_w - 0.5*d2*d2*einf;
S2 = e0 - 0.5*d1*d1*einf;

C_e = S1^S2;

PP = *(C_e ^ SwivelPlane);

?p_e = DissectFirst(PP);


// Step 3: Compute elbow quaternion
l_se_dual = e0 ^ p_e ^ einf;
l_ew_dual = p_e ^ p_w ^ einf;

c4 = GetAngle(l_se_dual, l_ew_dual);

c4p = (1 + c4)/2;
c4m = (1 - c4)/2;

quat_i = e3 ^ e2;
?q_e = sqrt(c4p) - sqrt(c4m)  * quat_i;


// Step 4: Compute rotation to elbow position
p_ze = VecN3(0,0,d1);

pi_e = *(e0^p_ze^p_e^einf);
pi_m = p_ze - p_e;
l_m = pi_e ^ pi_m;
?q12 =  l_m / abs(l_m);


// Step 5: Compute rotation to wrist location
p_yz = e1;
p_yz2 = q12 * p_yz * ~q12;

p_yz2_dual = *p_yz2;
SwivelPlane_dual = *SwivelPlane;

c3 = GetAngle(p_yz2_dual, SwivelPlane_dual);

c3p = (1+c3)/2;
c3m = (1-c3)/2;
quat_k = e2 ^ e1;

q3 = sqrt(c3m) * quat_k;
if ( (p_yz2.p_w) > 0) {
	q3 = q3 + sqrt(c3p);
} else {
	q3 = q3 - sqrt(c3p);
}

?q3;
?q_s = q12 * q3;

