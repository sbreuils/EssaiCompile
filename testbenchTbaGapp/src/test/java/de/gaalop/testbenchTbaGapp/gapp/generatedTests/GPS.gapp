//sat1[1] = inputsVector[3]
assignInputsVector inputsVector = [d1,d2,d3,sat1x,sat1y,sat1z,sat2x,sat2y,sat2z,sat3x,sat3y,sat3z];
resetMv sat1[32];
setMv sat1[1,2,3] = inputsVector[3,4,5];

//sat1[2] = inputsVector[4]

//sat1[3] = inputsVector[5]

//sat1[4] = 0.5 * (((inputsVector[3] * inputsVector[3]) + (inputsVector[4] * inputsVector[4])) + (inputsVector[5] * inputsVector[5]))
resetMv tempmv0[1];
setVector ve1 = {inputsVector[3,4,5]};
setVector ve2 = {inputsVector[3,4,5]};
dotVectors tempmv0[0] = <ve1,ve2>;
setVector ve3 = {0.5};
setVector ve4 = {tempmv0[0]};
dotVectors sat1[4] = <ve3,ve4>;

//sat1[5] = 1.0
assignMv sat1[5] = [1.0];

//sat2[1] = inputsVector[6]
resetMv sat2[32];
setMv sat2[1,2,3] = inputsVector[6,7,8];

//sat2[2] = inputsVector[7]

//sat2[3] = inputsVector[8]

//sat2[4] = 0.5 * (((inputsVector[6] * inputsVector[6]) + (inputsVector[7] * inputsVector[7])) + (inputsVector[8] * inputsVector[8]))
resetMv tempmv5[1];
setVector ve6 = {inputsVector[6,7,8]};
setVector ve7 = {inputsVector[6,7,8]};
dotVectors tempmv5[0] = <ve6,ve7>;
setVector ve8 = {0.5};
setVector ve9 = {tempmv5[0]};
dotVectors sat2[4] = <ve8,ve9>;

//sat2[5] = 1.0
assignMv sat2[5] = [1.0];

//sat3[1] = inputsVector[9]
resetMv sat3[32];
setMv sat3[1,2,3] = inputsVector[9,10,11];

//sat3[2] = inputsVector[10]

//sat3[3] = inputsVector[11]

//sat3[4] = 0.5 * (((inputsVector[9] * inputsVector[9]) + (inputsVector[10] * inputsVector[10])) + (inputsVector[11] * inputsVector[11]))
resetMv tempmv10[1];
setVector ve11 = {inputsVector[9,10,11]};
setVector ve12 = {inputsVector[9,10,11]};
dotVectors tempmv10[0] = <ve11,ve12>;
setVector ve13 = {0.5};
setVector ve14 = {tempmv10[0]};
dotVectors sat3[4] = <ve13,ve14>;

//sat3[5] = 1.0
assignMv sat3[5] = [1.0];

//sph1[1] = sat1[1]
resetMv sph1[32];
setMv sph1[1,2,3] = sat1[1,2,3];

//sph1[2] = sat1[2]

//sph1[3] = sat1[3]

//sph1[4] = sat1[4] - ((0.5 * inputsVector[0]) * inputsVector[0])
setVector ve15 = {sat1[4],-0.5};
setVector ve16 = {1.0,inputsVector[0]};
setVector ve17 = {1.0,inputsVector[0]};
dotVectors sph1[4] = <ve15,ve16,ve17>;

//sph1[5] = 1.0
assignMv sph1[5] = [1.0];

//sph2[1] = sat2[1]
resetMv sph2[32];
setMv sph2[1,2,3] = sat2[1,2,3];

//sph2[2] = sat2[2]

//sph2[3] = sat2[3]

//sph2[4] = sat2[4] - ((0.5 * inputsVector[1]) * inputsVector[1])
setVector ve18 = {sat2[4],-0.5};
setVector ve19 = {1.0,inputsVector[1]};
setVector ve20 = {1.0,inputsVector[1]};
dotVectors sph2[4] = <ve18,ve19,ve20>;

//sph2[5] = 1.0
assignMv sph2[5] = [1.0];

//sph3[1] = sat3[1]
resetMv sph3[32];
setMv sph3[1,2,3] = sat3[1,2,3];

//sph3[2] = sat3[2]

//sph3[3] = sat3[3]

//sph3[4] = sat3[4] - ((0.5 * inputsVector[2]) * inputsVector[2])
setVector ve21 = {sat3[4],-0.5};
setVector ve22 = {1.0,inputsVector[2]};
setVector ve23 = {1.0,inputsVector[2]};
dotVectors sph3[4] = <ve21,ve22,ve23>;

//sph3[5] = 1.0
assignMv sph3[5] = [1.0];

//rcPp[16] = ((((sph1[1] * sph2[2]) + (-(sph1[2] * sph2[1]))) * sph3[3]) + (-(((sph1[1] * sph2[3]) + (-(sph1[3] * sph2[1]))) * sph3[2]))) + (((sph1[2] * sph2[3]) + (-(sph1[3] * sph2[2]))) * sph3[1])
resetMv rcPp[32];
resetMv tempmv24[1];
setVector ve25 = {sph1[1,-2]};
setVector ve26 = {sph2[2,1]};
dotVectors tempmv24[0] = <ve25,ve26>;
resetMv tempmv27[1];
resetMv tempmv28[1];
setVector ve29 = {sph1[1,-3]};
setVector ve30 = {sph2[3,1]};
dotVectors tempmv28[0] = <ve29,ve30>;
setMv tempmv27[0] = tempmv28[-0];
resetMv tempmv31[1];
setVector ve32 = {sph1[2,-3]};
setVector ve33 = {sph2[3,2]};
dotVectors tempmv31[0] = <ve32,ve33>;
setVector ve34 = {tempmv24[0],tempmv27[0],tempmv31[0]};
setVector ve35 = {sph3[3,2,1]};
dotVectors rcPp[16] = <ve34,ve35>;

//rcPp[17] = ((((sph1[1] * sph2[2]) + (-(sph1[2] * sph2[1]))) * sph3[4]) + (-(((sph1[1] * sph2[4]) + (-(sph1[4] * sph2[1]))) * sph3[2]))) + (((sph1[2] * sph2[4]) + (-(sph1[4] * sph2[2]))) * sph3[1])
resetMv tempmv36[1];
setVector ve37 = {sph1[1,-2]};
setVector ve38 = {sph2[2,1]};
dotVectors tempmv36[0] = <ve37,ve38>;
resetMv tempmv39[1];
resetMv tempmv40[1];
setVector ve41 = {sph1[1,-4]};
setVector ve42 = {sph2[4,1]};
dotVectors tempmv40[0] = <ve41,ve42>;
setMv tempmv39[0] = tempmv40[-0];
resetMv tempmv43[1];
setVector ve44 = {sph1[2,-4]};
setVector ve45 = {sph2[4,2]};
dotVectors tempmv43[0] = <ve44,ve45>;
setVector ve46 = {tempmv36[0],tempmv39[0],tempmv43[0]};
setVector ve47 = {sph3[4,2,1]};
dotVectors rcPp[17] = <ve46,ve47>;

//rcPp[18] = (((sph1[1] * sph2[2]) + (-(sph1[2] * sph2[1]))) + (-((sph1[1] + (-(sph2[1]))) * sph3[2]))) + ((sph1[2] + (-(sph2[2]))) * sph3[1])
resetMv tempmv48[1];
resetMv tempmv49[1];
setVector ve50 = {sph1[1],sph2[-1]};
dotVectors tempmv49[0] = <ve50>;
setMv tempmv48[0] = tempmv49[-0];
resetMv tempmv51[1];
setVector ve52 = {sph1[2],sph2[-2]};
dotVectors tempmv51[0] = <ve52>;
setVector ve53 = {sph1[1,-2],tempmv48[0],tempmv51[0]};
setVector ve54 = {sph2[2,1],sph3[2,1]};
dotVectors rcPp[18] = <ve53,ve54>;

//rcPp[19] = ((((sph1[1] * sph2[3]) + (-(sph1[3] * sph2[1]))) * sph3[4]) + (-(((sph1[1] * sph2[4]) + (-(sph1[4] * sph2[1]))) * sph3[3]))) + (((sph1[3] * sph2[4]) + (-(sph1[4] * sph2[3]))) * sph3[1])
resetMv tempmv55[1];
setVector ve56 = {sph1[1,-3]};
setVector ve57 = {sph2[3,1]};
dotVectors tempmv55[0] = <ve56,ve57>;
resetMv tempmv58[1];
resetMv tempmv59[1];
setVector ve60 = {sph1[1,-4]};
setVector ve61 = {sph2[4,1]};
dotVectors tempmv59[0] = <ve60,ve61>;
setMv tempmv58[0] = tempmv59[-0];
resetMv tempmv62[1];
setVector ve63 = {sph1[3,-4]};
setVector ve64 = {sph2[4,3]};
dotVectors tempmv62[0] = <ve63,ve64>;
setVector ve65 = {tempmv55[0],tempmv58[0],tempmv62[0]};
setVector ve66 = {sph3[4,3,1]};
dotVectors rcPp[19] = <ve65,ve66>;

//rcPp[20] = (((sph1[1] * sph2[3]) + (-(sph1[3] * sph2[1]))) + (-((sph1[1] + (-(sph2[1]))) * sph3[3]))) + ((sph1[3] + (-(sph2[3]))) * sph3[1])
resetMv tempmv67[1];
resetMv tempmv68[1];
setVector ve69 = {sph1[1],sph2[-1]};
dotVectors tempmv68[0] = <ve69>;
setMv tempmv67[0] = tempmv68[-0];
resetMv tempmv70[1];
setVector ve71 = {sph1[3],sph2[-3]};
dotVectors tempmv70[0] = <ve71>;
setVector ve72 = {sph1[1,-3],tempmv67[0],tempmv70[0]};
setVector ve73 = {sph2[3,1],sph3[3,1]};
dotVectors rcPp[20] = <ve72,ve73>;

//rcPp[21] = (((sph1[1] * sph2[4]) + (-(sph1[4] * sph2[1]))) + (-((sph1[1] + (-(sph2[1]))) * sph3[4]))) + ((sph1[4] + (-(sph2[4]))) * sph3[1])
resetMv tempmv74[1];
resetMv tempmv75[1];
setVector ve76 = {sph1[1],sph2[-1]};
dotVectors tempmv75[0] = <ve76>;
setMv tempmv74[0] = tempmv75[-0];
resetMv tempmv77[1];
setVector ve78 = {sph1[4],sph2[-4]};
dotVectors tempmv77[0] = <ve78>;
setVector ve79 = {sph1[1,-4],tempmv74[0],tempmv77[0]};
setVector ve80 = {sph2[4,1],sph3[4,1]};
dotVectors rcPp[21] = <ve79,ve80>;

//rcPp[22] = ((((sph1[2] * sph2[3]) + (-(sph1[3] * sph2[2]))) * sph3[4]) + (-(((sph1[2] * sph2[4]) + (-(sph1[4] * sph2[2]))) * sph3[3]))) + (((sph1[3] * sph2[4]) + (-(sph1[4] * sph2[3]))) * sph3[2])
resetMv tempmv81[1];
setVector ve82 = {sph1[2,-3]};
setVector ve83 = {sph2[3,2]};
dotVectors tempmv81[0] = <ve82,ve83>;
resetMv tempmv84[1];
resetMv tempmv85[1];
setVector ve86 = {sph1[2,-4]};
setVector ve87 = {sph2[4,2]};
dotVectors tempmv85[0] = <ve86,ve87>;
setMv tempmv84[0] = tempmv85[-0];
resetMv tempmv88[1];
setVector ve89 = {sph1[3,-4]};
setVector ve90 = {sph2[4,3]};
dotVectors tempmv88[0] = <ve89,ve90>;
setVector ve91 = {tempmv81[0],tempmv84[0],tempmv88[0]};
setVector ve92 = {sph3[4,3,2]};
dotVectors rcPp[22] = <ve91,ve92>;

//rcPp[23] = (((sph1[2] * sph2[3]) + (-(sph1[3] * sph2[2]))) + (-((sph1[2] + (-(sph2[2]))) * sph3[3]))) + ((sph1[3] + (-(sph2[3]))) * sph3[2])
resetMv tempmv93[1];
resetMv tempmv94[1];
setVector ve95 = {sph1[2],sph2[-2]};
dotVectors tempmv94[0] = <ve95>;
setMv tempmv93[0] = tempmv94[-0];
resetMv tempmv96[1];
setVector ve97 = {sph1[3],sph2[-3]};
dotVectors tempmv96[0] = <ve97>;
setVector ve98 = {sph1[2,-3],tempmv93[0],tempmv96[0]};
setVector ve99 = {sph2[3,2],sph3[3,2]};
dotVectors rcPp[23] = <ve98,ve99>;

//rcPp[24] = (((sph1[2] * sph2[4]) + (-(sph1[4] * sph2[2]))) + (-((sph1[2] + (-(sph2[2]))) * sph3[4]))) + ((sph1[4] + (-(sph2[4]))) * sph3[2])
resetMv tempmv100[1];
resetMv tempmv101[1];
setVector ve102 = {sph1[2],sph2[-2]};
dotVectors tempmv101[0] = <ve102>;
setMv tempmv100[0] = tempmv101[-0];
resetMv tempmv103[1];
setVector ve104 = {sph1[4],sph2[-4]};
dotVectors tempmv103[0] = <ve104>;
setVector ve105 = {sph1[2,-4],tempmv100[0],tempmv103[0]};
setVector ve106 = {sph2[4,2],sph3[4,2]};
dotVectors rcPp[24] = <ve105,ve106>;

//rcPp[25] = (((sph1[3] * sph2[4]) + (-(sph1[4] * sph2[3]))) + (-((sph1[3] + (-(sph2[3]))) * sph3[4]))) + ((sph1[4] + (-(sph2[4]))) * sph3[3])
resetMv tempmv107[1];
resetMv tempmv108[1];
setVector ve109 = {sph1[3],sph2[-3]};
dotVectors tempmv108[0] = <ve109>;
setMv tempmv107[0] = tempmv108[-0];
resetMv tempmv110[1];
setVector ve111 = {sph1[4],sph2[-4]};
dotVectors tempmv110[0] = <ve111>;
setVector ve112 = {sph1[3,-4],tempmv107[0],tempmv110[0]};
setVector ve113 = {sph2[4,3],sph3[4,3]};
dotVectors rcPp[25] = <ve112,ve113>;

//temp0[0] = (((((((((-(rcPp[16] * rcPp[16])) + (rcPp[17] * rcPp[18])) + (rcPp[18] * rcPp[17])) + (rcPp[19] * rcPp[20])) + (rcPp[20] * rcPp[19])) + (rcPp[21] * rcPp[21])) + (rcPp[22] * rcPp[23])) + (rcPp[23] * rcPp[22])) + (rcPp[24] * rcPp[24])) + (rcPp[25] * rcPp[25])
resetMv temp0[32];
setVector ve114 = {rcPp[-16,17,18,19,20,21,22,23,24,25]};
setVector ve115 = {rcPp[16,18,17,20,19,21,23,22,24,25]};
dotVectors temp0[0] = <ve114,ve115>;

//temp1 = abs(temp0)
resetMv temp1[32];
calculateMv temp1 = ABS(temp0);

//len = sqrt(temp1)
resetMv len[32];
calculateMv len = SQRT(temp1);

//rcPpDual[6] = -(rcPp[25])
resetMv rcPpDual[32];
setMv rcPpDual[6,7,8,9,10,11,12,13,14,15] = rcPp[-25,24,-22,23,-21,19,-20,-17,18,16];

//rcPpDual[7] = rcPp[24]

//rcPpDual[8] = -(rcPp[22])

//rcPpDual[9] = rcPp[23]

//rcPpDual[10] = -(rcPp[21])

//rcPpDual[11] = rcPp[19]

//rcPpDual[12] = -(rcPp[20])

//rcPpDual[13] = -(rcPp[17])

//rcPpDual[14] = rcPp[18]

//rcPpDual[15] = rcPp[16]

//nen[1] = rcPpDual[9]
resetMv nen[32];
setMv nen[1,2,3,4] = rcPpDual[9,12,14,15];

//nen[2] = rcPpDual[12]

//nen[3] = rcPpDual[14]

//nen[4] = rcPpDual[15]

//rc1[0] = (((len[1] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (len[2] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (len[3] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[5] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv rc1[32];
resetMv tempmv116[1];
resetMv tempmv117[1];
setVector ve118 = {nen[1,2,3]};
setVector ve119 = {nen[1,2,3]};
dotVectors tempmv117[0] = <ve118,ve119>;
resetMv tempmv120[1];
setMv tempmv120[0] = nen[1];
resetMv tempmv121[1];
setMv tempmv121[0] = tempmv117[0];
calculateMvCoeff tempmv116[0] = DIVISION(tempmv120,tempmv121);
resetMv tempmv122[1];
resetMv tempmv123[1];
setVector ve124 = {nen[1,2,3]};
setVector ve125 = {nen[1,2,3]};
dotVectors tempmv123[0] = <ve124,ve125>;
resetMv tempmv126[1];
setMv tempmv126[0] = nen[2];
resetMv tempmv127[1];
setMv tempmv127[0] = tempmv123[0];
calculateMvCoeff tempmv122[0] = DIVISION(tempmv126,tempmv127);
resetMv tempmv128[1];
resetMv tempmv129[1];
setVector ve130 = {nen[1,2,3]};
setVector ve131 = {nen[1,2,3]};
dotVectors tempmv129[0] = <ve130,ve131>;
resetMv tempmv132[1];
setMv tempmv132[0] = nen[3];
resetMv tempmv133[1];
setMv tempmv133[0] = tempmv129[0];
calculateMvCoeff tempmv128[0] = DIVISION(tempmv132,tempmv133);
resetMv tempmv134[1];
resetMv tempmv135[1];
setVector ve136 = {nen[1,2,3]};
setVector ve137 = {nen[1,2,3]};
dotVectors tempmv135[0] = <ve136,ve137>;
resetMv tempmv138[1];
setMv tempmv138[0] = nen[4];
resetMv tempmv139[1];
setMv tempmv139[0] = tempmv135[0];
calculateMvCoeff tempmv134[0] = DIVISION(tempmv138,tempmv139);
setVector ve140 = {len[1,2,3,-5]};
setVector ve141 = {tempmv116[0],tempmv122[0],tempmv128[0],tempmv134[0]};
dotVectors rc1[0] = <ve140,ve141>;

//rc1[1] = (((len[0] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + ((rcPpDual[6] + len[6]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((rcPpDual[7] + len[7]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((rcPpDual[9] + len[9]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv tempmv142[1];
resetMv tempmv143[1];
setVector ve144 = {nen[1,2,3]};
setVector ve145 = {nen[1,2,3]};
dotVectors tempmv143[0] = <ve144,ve145>;
resetMv tempmv146[1];
setMv tempmv146[0] = nen[1];
resetMv tempmv147[1];
setMv tempmv147[0] = tempmv143[0];
calculateMvCoeff tempmv142[0] = DIVISION(tempmv146,tempmv147);
resetMv tempmv148[1];
setVector ve149 = {rcPpDual[6],len[6]};
dotVectors tempmv148[0] = <ve149>;
resetMv tempmv150[1];
resetMv tempmv151[1];
setVector ve152 = {nen[1,2,3]};
setVector ve153 = {nen[1,2,3]};
dotVectors tempmv151[0] = <ve152,ve153>;
resetMv tempmv154[1];
setMv tempmv154[0] = nen[2];
resetMv tempmv155[1];
setMv tempmv155[0] = tempmv151[0];
calculateMvCoeff tempmv150[0] = DIVISION(tempmv154,tempmv155);
resetMv tempmv156[1];
setVector ve157 = {rcPpDual[7],len[7]};
dotVectors tempmv156[0] = <ve157>;
resetMv tempmv158[1];
resetMv tempmv159[1];
setVector ve160 = {nen[1,2,3]};
setVector ve161 = {nen[1,2,3]};
dotVectors tempmv159[0] = <ve160,ve161>;
resetMv tempmv162[1];
setMv tempmv162[0] = nen[3];
resetMv tempmv163[1];
setMv tempmv163[0] = tempmv159[0];
calculateMvCoeff tempmv158[0] = DIVISION(tempmv162,tempmv163);
resetMv tempmv164[1];
resetMv tempmv165[1];
setVector ve166 = {rcPpDual[9],len[9]};
dotVectors tempmv165[0] = <ve166>;
setMv tempmv164[0] = tempmv165[-0];
resetMv tempmv167[1];
resetMv tempmv168[1];
setVector ve169 = {nen[1,2,3]};
setVector ve170 = {nen[1,2,3]};
dotVectors tempmv168[0] = <ve169,ve170>;
resetMv tempmv171[1];
setMv tempmv171[0] = nen[4];
resetMv tempmv172[1];
setMv tempmv172[0] = tempmv168[0];
calculateMvCoeff tempmv167[0] = DIVISION(tempmv171,tempmv172);
setVector ve173 = {len[0],tempmv148[0],tempmv156[0],tempmv164[0]};
setVector ve174 = {tempmv142[0],tempmv150[0],tempmv158[0],tempmv167[0]};
dotVectors rc1[1] = <ve173,ve174>;

//rc1[2] = (((len[0] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((rcPpDual[6] + len[6]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + ((rcPpDual[10] + len[10]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((rcPpDual[12] + len[12]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv tempmv175[1];
resetMv tempmv176[1];
setVector ve177 = {nen[1,2,3]};
setVector ve178 = {nen[1,2,3]};
dotVectors tempmv176[0] = <ve177,ve178>;
resetMv tempmv179[1];
setMv tempmv179[0] = nen[2];
resetMv tempmv180[1];
setMv tempmv180[0] = tempmv176[0];
calculateMvCoeff tempmv175[0] = DIVISION(tempmv179,tempmv180);
resetMv tempmv181[1];
resetMv tempmv182[1];
setVector ve183 = {rcPpDual[6],len[6]};
dotVectors tempmv182[0] = <ve183>;
setMv tempmv181[0] = tempmv182[-0];
resetMv tempmv184[1];
resetMv tempmv185[1];
setVector ve186 = {nen[1,2,3]};
setVector ve187 = {nen[1,2,3]};
dotVectors tempmv185[0] = <ve186,ve187>;
resetMv tempmv188[1];
setMv tempmv188[0] = nen[1];
resetMv tempmv189[1];
setMv tempmv189[0] = tempmv185[0];
calculateMvCoeff tempmv184[0] = DIVISION(tempmv188,tempmv189);
resetMv tempmv190[1];
setVector ve191 = {rcPpDual[10],len[10]};
dotVectors tempmv190[0] = <ve191>;
resetMv tempmv192[1];
resetMv tempmv193[1];
setVector ve194 = {nen[1,2,3]};
setVector ve195 = {nen[1,2,3]};
dotVectors tempmv193[0] = <ve194,ve195>;
resetMv tempmv196[1];
setMv tempmv196[0] = nen[3];
resetMv tempmv197[1];
setMv tempmv197[0] = tempmv193[0];
calculateMvCoeff tempmv192[0] = DIVISION(tempmv196,tempmv197);
resetMv tempmv198[1];
resetMv tempmv199[1];
setVector ve200 = {rcPpDual[12],len[12]};
dotVectors tempmv199[0] = <ve200>;
setMv tempmv198[0] = tempmv199[-0];
resetMv tempmv201[1];
resetMv tempmv202[1];
setVector ve203 = {nen[1,2,3]};
setVector ve204 = {nen[1,2,3]};
dotVectors tempmv202[0] = <ve203,ve204>;
resetMv tempmv205[1];
setMv tempmv205[0] = nen[4];
resetMv tempmv206[1];
setMv tempmv206[0] = tempmv202[0];
calculateMvCoeff tempmv201[0] = DIVISION(tempmv205,tempmv206);
setVector ve207 = {len[0],tempmv181[0],tempmv190[0],tempmv198[0]};
setVector ve208 = {tempmv175[0],tempmv184[0],tempmv192[0],tempmv201[0]};
dotVectors rc1[2] = <ve207,ve208>;

//rc1[3] = (((len[0] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((rcPpDual[7] + len[7]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((rcPpDual[10] + len[10]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((rcPpDual[14] + len[14]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv tempmv209[1];
resetMv tempmv210[1];
setVector ve211 = {nen[1,2,3]};
setVector ve212 = {nen[1,2,3]};
dotVectors tempmv210[0] = <ve211,ve212>;
resetMv tempmv213[1];
setMv tempmv213[0] = nen[3];
resetMv tempmv214[1];
setMv tempmv214[0] = tempmv210[0];
calculateMvCoeff tempmv209[0] = DIVISION(tempmv213,tempmv214);
resetMv tempmv215[1];
resetMv tempmv216[1];
setVector ve217 = {rcPpDual[7],len[7]};
dotVectors tempmv216[0] = <ve217>;
setMv tempmv215[0] = tempmv216[-0];
resetMv tempmv218[1];
resetMv tempmv219[1];
setVector ve220 = {nen[1,2,3]};
setVector ve221 = {nen[1,2,3]};
dotVectors tempmv219[0] = <ve220,ve221>;
resetMv tempmv222[1];
setMv tempmv222[0] = nen[1];
resetMv tempmv223[1];
setMv tempmv223[0] = tempmv219[0];
calculateMvCoeff tempmv218[0] = DIVISION(tempmv222,tempmv223);
resetMv tempmv224[1];
resetMv tempmv225[1];
setVector ve226 = {rcPpDual[10],len[10]};
dotVectors tempmv225[0] = <ve226>;
setMv tempmv224[0] = tempmv225[-0];
resetMv tempmv227[1];
resetMv tempmv228[1];
setVector ve229 = {nen[1,2,3]};
setVector ve230 = {nen[1,2,3]};
dotVectors tempmv228[0] = <ve229,ve230>;
resetMv tempmv231[1];
setMv tempmv231[0] = nen[2];
resetMv tempmv232[1];
setMv tempmv232[0] = tempmv228[0];
calculateMvCoeff tempmv227[0] = DIVISION(tempmv231,tempmv232);
resetMv tempmv233[1];
resetMv tempmv234[1];
setVector ve235 = {rcPpDual[14],len[14]};
dotVectors tempmv234[0] = <ve235>;
setMv tempmv233[0] = tempmv234[-0];
resetMv tempmv236[1];
resetMv tempmv237[1];
setVector ve238 = {nen[1,2,3]};
setVector ve239 = {nen[1,2,3]};
dotVectors tempmv237[0] = <ve238,ve239>;
resetMv tempmv240[1];
setMv tempmv240[0] = nen[4];
resetMv tempmv241[1];
setMv tempmv241[0] = tempmv237[0];
calculateMvCoeff tempmv236[0] = DIVISION(tempmv240,tempmv241);
setVector ve242 = {len[0],tempmv215[0],tempmv224[0],tempmv233[0]};
setVector ve243 = {tempmv209[0],tempmv218[0],tempmv227[0],tempmv236[0]};
dotVectors rc1[3] = <ve242,ve243>;

//rc1[4] = ((((len[0] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((rcPpDual[8] + len[8]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((rcPpDual[11] + len[11]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((rcPpDual[13] + len[13]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((rcPpDual[15] + len[15]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv tempmv244[1];
resetMv tempmv245[1];
setVector ve246 = {nen[1,2,3]};
setVector ve247 = {nen[1,2,3]};
dotVectors tempmv245[0] = <ve246,ve247>;
resetMv tempmv248[1];
setMv tempmv248[0] = nen[4];
resetMv tempmv249[1];
setMv tempmv249[0] = tempmv245[0];
calculateMvCoeff tempmv244[0] = DIVISION(tempmv248,tempmv249);
resetMv tempmv250[1];
resetMv tempmv251[1];
setVector ve252 = {rcPpDual[8],len[8]};
dotVectors tempmv251[0] = <ve252>;
setMv tempmv250[0] = tempmv251[-0];
resetMv tempmv253[1];
resetMv tempmv254[1];
setVector ve255 = {nen[1,2,3]};
setVector ve256 = {nen[1,2,3]};
dotVectors tempmv254[0] = <ve255,ve256>;
resetMv tempmv257[1];
setMv tempmv257[0] = nen[1];
resetMv tempmv258[1];
setMv tempmv258[0] = tempmv254[0];
calculateMvCoeff tempmv253[0] = DIVISION(tempmv257,tempmv258);
resetMv tempmv259[1];
resetMv tempmv260[1];
setVector ve261 = {rcPpDual[11],len[11]};
dotVectors tempmv260[0] = <ve261>;
setMv tempmv259[0] = tempmv260[-0];
resetMv tempmv262[1];
resetMv tempmv263[1];
setVector ve264 = {nen[1,2,3]};
setVector ve265 = {nen[1,2,3]};
dotVectors tempmv263[0] = <ve264,ve265>;
resetMv tempmv266[1];
setMv tempmv266[0] = nen[2];
resetMv tempmv267[1];
setMv tempmv267[0] = tempmv263[0];
calculateMvCoeff tempmv262[0] = DIVISION(tempmv266,tempmv267);
resetMv tempmv268[1];
resetMv tempmv269[1];
setVector ve270 = {rcPpDual[13],len[13]};
dotVectors tempmv269[0] = <ve270>;
setMv tempmv268[0] = tempmv269[-0];
resetMv tempmv271[1];
resetMv tempmv272[1];
setVector ve273 = {nen[1,2,3]};
setVector ve274 = {nen[1,2,3]};
dotVectors tempmv272[0] = <ve273,ve274>;
resetMv tempmv275[1];
setMv tempmv275[0] = nen[3];
resetMv tempmv276[1];
setMv tempmv276[0] = tempmv272[0];
calculateMvCoeff tempmv271[0] = DIVISION(tempmv275,tempmv276);
resetMv tempmv277[1];
resetMv tempmv278[1];
setVector ve279 = {rcPpDual[15],len[15]};
dotVectors tempmv278[0] = <ve279>;
setMv tempmv277[0] = tempmv278[-0];
resetMv tempmv280[1];
resetMv tempmv281[1];
setVector ve282 = {nen[1,2,3]};
setVector ve283 = {nen[1,2,3]};
dotVectors tempmv281[0] = <ve282,ve283>;
resetMv tempmv284[1];
setMv tempmv284[0] = nen[4];
resetMv tempmv285[1];
setMv tempmv285[0] = tempmv281[0];
calculateMvCoeff tempmv280[0] = DIVISION(tempmv284,tempmv285);
setVector ve286 = {len[0],tempmv250[0],tempmv259[0],tempmv268[0],tempmv277[0]};
setVector ve287 = {tempmv244[0],tempmv253[0],tempmv262[0],tempmv271[0],tempmv280[0]};
dotVectors rc1[4] = <ve286,ve287>;

//rc1[5] = ((-((rcPpDual[9] + len[9]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((rcPpDual[12] + len[12]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((rcPpDual[14] + len[14]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv tempmv288[1];
resetMv tempmv289[1];
setVector ve290 = {rcPpDual[9],len[9]};
dotVectors tempmv289[0] = <ve290>;
setMv tempmv288[0] = tempmv289[-0];
resetMv tempmv291[1];
resetMv tempmv292[1];
setVector ve293 = {nen[1,2,3]};
setVector ve294 = {nen[1,2,3]};
dotVectors tempmv292[0] = <ve293,ve294>;
resetMv tempmv295[1];
setMv tempmv295[0] = nen[1];
resetMv tempmv296[1];
setMv tempmv296[0] = tempmv292[0];
calculateMvCoeff tempmv291[0] = DIVISION(tempmv295,tempmv296);
resetMv tempmv297[1];
resetMv tempmv298[1];
setVector ve299 = {rcPpDual[12],len[12]};
dotVectors tempmv298[0] = <ve299>;
setMv tempmv297[0] = tempmv298[-0];
resetMv tempmv300[1];
resetMv tempmv301[1];
setVector ve302 = {nen[1,2,3]};
setVector ve303 = {nen[1,2,3]};
dotVectors tempmv301[0] = <ve302,ve303>;
resetMv tempmv304[1];
setMv tempmv304[0] = nen[2];
resetMv tempmv305[1];
setMv tempmv305[0] = tempmv301[0];
calculateMvCoeff tempmv300[0] = DIVISION(tempmv304,tempmv305);
resetMv tempmv306[1];
resetMv tempmv307[1];
setVector ve308 = {rcPpDual[14],len[14]};
dotVectors tempmv307[0] = <ve308>;
setMv tempmv306[0] = tempmv307[-0];
resetMv tempmv309[1];
resetMv tempmv310[1];
setVector ve311 = {nen[1,2,3]};
setVector ve312 = {nen[1,2,3]};
dotVectors tempmv310[0] = <ve311,ve312>;
resetMv tempmv313[1];
setMv tempmv313[0] = nen[3];
resetMv tempmv314[1];
setMv tempmv314[0] = tempmv310[0];
calculateMvCoeff tempmv309[0] = DIVISION(tempmv313,tempmv314);
setVector ve315 = {tempmv288[0],tempmv297[0],tempmv306[0]};
setVector ve316 = {tempmv291[0],tempmv300[0],tempmv309[0]};
dotVectors rc1[5] = <ve315,ve316>;

//rc1[6] = (((len[1] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-(len[2] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (len[16] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[18] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv tempmv317[1];
resetMv tempmv318[1];
setVector ve319 = {nen[1,2,3]};
setVector ve320 = {nen[1,2,3]};
dotVectors tempmv318[0] = <ve319,ve320>;
resetMv tempmv321[1];
setMv tempmv321[0] = nen[2];
resetMv tempmv322[1];
setMv tempmv322[0] = tempmv318[0];
calculateMvCoeff tempmv317[0] = DIVISION(tempmv321,tempmv322);
resetMv tempmv323[1];
resetMv tempmv324[1];
setVector ve325 = {nen[1,2,3]};
setVector ve326 = {nen[1,2,3]};
dotVectors tempmv324[0] = <ve325,ve326>;
resetMv tempmv327[1];
setMv tempmv327[0] = nen[1];
resetMv tempmv328[1];
setMv tempmv328[0] = tempmv324[0];
calculateMvCoeff tempmv323[0] = DIVISION(tempmv327,tempmv328);
resetMv tempmv329[1];
resetMv tempmv330[1];
setVector ve331 = {nen[1,2,3]};
setVector ve332 = {nen[1,2,3]};
dotVectors tempmv330[0] = <ve331,ve332>;
resetMv tempmv333[1];
setMv tempmv333[0] = nen[3];
resetMv tempmv334[1];
setMv tempmv334[0] = tempmv330[0];
calculateMvCoeff tempmv329[0] = DIVISION(tempmv333,tempmv334);
resetMv tempmv335[1];
resetMv tempmv336[1];
setVector ve337 = {nen[1,2,3]};
setVector ve338 = {nen[1,2,3]};
dotVectors tempmv336[0] = <ve337,ve338>;
resetMv tempmv339[1];
setMv tempmv339[0] = nen[4];
resetMv tempmv340[1];
setMv tempmv340[0] = tempmv336[0];
calculateMvCoeff tempmv335[0] = DIVISION(tempmv339,tempmv340);
setVector ve341 = {len[1,-2,16,-18]};
setVector ve342 = {tempmv317[0],tempmv323[0],tempmv329[0],tempmv335[0]};
dotVectors rc1[6] = <ve341,ve342>;

//rc1[7] = (((len[1] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-(len[3] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(len[16] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(len[20] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv tempmv343[1];
resetMv tempmv344[1];
setVector ve345 = {nen[1,2,3]};
setVector ve346 = {nen[1,2,3]};
dotVectors tempmv344[0] = <ve345,ve346>;
resetMv tempmv347[1];
setMv tempmv347[0] = nen[3];
resetMv tempmv348[1];
setMv tempmv348[0] = tempmv344[0];
calculateMvCoeff tempmv343[0] = DIVISION(tempmv347,tempmv348);
resetMv tempmv349[1];
resetMv tempmv350[1];
setVector ve351 = {nen[1,2,3]};
setVector ve352 = {nen[1,2,3]};
dotVectors tempmv350[0] = <ve351,ve352>;
resetMv tempmv353[1];
setMv tempmv353[0] = nen[1];
resetMv tempmv354[1];
setMv tempmv354[0] = tempmv350[0];
calculateMvCoeff tempmv349[0] = DIVISION(tempmv353,tempmv354);
resetMv tempmv355[1];
resetMv tempmv356[1];
setVector ve357 = {nen[1,2,3]};
setVector ve358 = {nen[1,2,3]};
dotVectors tempmv356[0] = <ve357,ve358>;
resetMv tempmv359[1];
setMv tempmv359[0] = nen[2];
resetMv tempmv360[1];
setMv tempmv360[0] = tempmv356[0];
calculateMvCoeff tempmv355[0] = DIVISION(tempmv359,tempmv360);
resetMv tempmv361[1];
resetMv tempmv362[1];
setVector ve363 = {nen[1,2,3]};
setVector ve364 = {nen[1,2,3]};
dotVectors tempmv362[0] = <ve363,ve364>;
resetMv tempmv365[1];
setMv tempmv365[0] = nen[4];
resetMv tempmv366[1];
setMv tempmv366[0] = tempmv362[0];
calculateMvCoeff tempmv361[0] = DIVISION(tempmv365,tempmv366);
setVector ve367 = {len[1,-3,-16,-20]};
setVector ve368 = {tempmv343[0],tempmv349[0],tempmv355[0],tempmv361[0]};
dotVectors rc1[7] = <ve367,ve368>;

//rc1[8] = ((((len[1] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-(len[4] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(len[17] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(len[19] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(len[21] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv tempmv369[1];
resetMv tempmv370[1];
setVector ve371 = {nen[1,2,3]};
setVector ve372 = {nen[1,2,3]};
dotVectors tempmv370[0] = <ve371,ve372>;
resetMv tempmv373[1];
setMv tempmv373[0] = nen[4];
resetMv tempmv374[1];
setMv tempmv374[0] = tempmv370[0];
calculateMvCoeff tempmv369[0] = DIVISION(tempmv373,tempmv374);
resetMv tempmv375[1];
resetMv tempmv376[1];
setVector ve377 = {nen[1,2,3]};
setVector ve378 = {nen[1,2,3]};
dotVectors tempmv376[0] = <ve377,ve378>;
resetMv tempmv379[1];
setMv tempmv379[0] = nen[1];
resetMv tempmv380[1];
setMv tempmv380[0] = tempmv376[0];
calculateMvCoeff tempmv375[0] = DIVISION(tempmv379,tempmv380);
resetMv tempmv381[1];
resetMv tempmv382[1];
setVector ve383 = {nen[1,2,3]};
setVector ve384 = {nen[1,2,3]};
dotVectors tempmv382[0] = <ve383,ve384>;
resetMv tempmv385[1];
setMv tempmv385[0] = nen[2];
resetMv tempmv386[1];
setMv tempmv386[0] = tempmv382[0];
calculateMvCoeff tempmv381[0] = DIVISION(tempmv385,tempmv386);
resetMv tempmv387[1];
resetMv tempmv388[1];
setVector ve389 = {nen[1,2,3]};
setVector ve390 = {nen[1,2,3]};
dotVectors tempmv388[0] = <ve389,ve390>;
resetMv tempmv391[1];
setMv tempmv391[0] = nen[3];
resetMv tempmv392[1];
setMv tempmv392[0] = tempmv388[0];
calculateMvCoeff tempmv387[0] = DIVISION(tempmv391,tempmv392);
resetMv tempmv393[1];
resetMv tempmv394[1];
setVector ve395 = {nen[1,2,3]};
setVector ve396 = {nen[1,2,3]};
dotVectors tempmv394[0] = <ve395,ve396>;
resetMv tempmv397[1];
setMv tempmv397[0] = nen[4];
resetMv tempmv398[1];
setMv tempmv398[0] = tempmv394[0];
calculateMvCoeff tempmv393[0] = DIVISION(tempmv397,tempmv398);
setVector ve399 = {len[1,-4,-17,-19,-21]};
setVector ve400 = {tempmv369[0],tempmv375[0],tempmv381[0],tempmv387[0],tempmv393[0]};
dotVectors rc1[8] = <ve399,ve400>;

//rc1[9] = ((-(len[5] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[18] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(len[20] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv tempmv401[1];
resetMv tempmv402[1];
setVector ve403 = {nen[1,2,3]};
setVector ve404 = {nen[1,2,3]};
dotVectors tempmv402[0] = <ve403,ve404>;
resetMv tempmv405[1];
setMv tempmv405[0] = nen[1];
resetMv tempmv406[1];
setMv tempmv406[0] = tempmv402[0];
calculateMvCoeff tempmv401[0] = DIVISION(tempmv405,tempmv406);
resetMv tempmv407[1];
resetMv tempmv408[1];
setVector ve409 = {nen[1,2,3]};
setVector ve410 = {nen[1,2,3]};
dotVectors tempmv408[0] = <ve409,ve410>;
resetMv tempmv411[1];
setMv tempmv411[0] = nen[2];
resetMv tempmv412[1];
setMv tempmv412[0] = tempmv408[0];
calculateMvCoeff tempmv407[0] = DIVISION(tempmv411,tempmv412);
resetMv tempmv413[1];
resetMv tempmv414[1];
setVector ve415 = {nen[1,2,3]};
setVector ve416 = {nen[1,2,3]};
dotVectors tempmv414[0] = <ve415,ve416>;
resetMv tempmv417[1];
setMv tempmv417[0] = nen[3];
resetMv tempmv418[1];
setMv tempmv418[0] = tempmv414[0];
calculateMvCoeff tempmv413[0] = DIVISION(tempmv417,tempmv418);
setVector ve419 = {len[-5,-18,-20]};
setVector ve420 = {tempmv401[0],tempmv407[0],tempmv413[0]};
dotVectors rc1[9] = <ve419,ve420>;

//rc1[10] = (((len[2] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-(len[3] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (len[16] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[23] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv tempmv421[1];
resetMv tempmv422[1];
setVector ve423 = {nen[1,2,3]};
setVector ve424 = {nen[1,2,3]};
dotVectors tempmv422[0] = <ve423,ve424>;
resetMv tempmv425[1];
setMv tempmv425[0] = nen[3];
resetMv tempmv426[1];
setMv tempmv426[0] = tempmv422[0];
calculateMvCoeff tempmv421[0] = DIVISION(tempmv425,tempmv426);
resetMv tempmv427[1];
resetMv tempmv428[1];
setVector ve429 = {nen[1,2,3]};
setVector ve430 = {nen[1,2,3]};
dotVectors tempmv428[0] = <ve429,ve430>;
resetMv tempmv431[1];
setMv tempmv431[0] = nen[2];
resetMv tempmv432[1];
setMv tempmv432[0] = tempmv428[0];
calculateMvCoeff tempmv427[0] = DIVISION(tempmv431,tempmv432);
resetMv tempmv433[1];
resetMv tempmv434[1];
setVector ve435 = {nen[1,2,3]};
setVector ve436 = {nen[1,2,3]};
dotVectors tempmv434[0] = <ve435,ve436>;
resetMv tempmv437[1];
setMv tempmv437[0] = nen[1];
resetMv tempmv438[1];
setMv tempmv438[0] = tempmv434[0];
calculateMvCoeff tempmv433[0] = DIVISION(tempmv437,tempmv438);
resetMv tempmv439[1];
resetMv tempmv440[1];
setVector ve441 = {nen[1,2,3]};
setVector ve442 = {nen[1,2,3]};
dotVectors tempmv440[0] = <ve441,ve442>;
resetMv tempmv443[1];
setMv tempmv443[0] = nen[4];
resetMv tempmv444[1];
setMv tempmv444[0] = tempmv440[0];
calculateMvCoeff tempmv439[0] = DIVISION(tempmv443,tempmv444);
setVector ve445 = {len[2,-3,16,-23]};
setVector ve446 = {tempmv421[0],tempmv427[0],tempmv433[0],tempmv439[0]};
dotVectors rc1[10] = <ve445,ve446>;

//rc1[11] = ((((len[2] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-(len[4] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (len[17] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[22] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(len[24] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv tempmv447[1];
resetMv tempmv448[1];
setVector ve449 = {nen[1,2,3]};
setVector ve450 = {nen[1,2,3]};
dotVectors tempmv448[0] = <ve449,ve450>;
resetMv tempmv451[1];
setMv tempmv451[0] = nen[4];
resetMv tempmv452[1];
setMv tempmv452[0] = tempmv448[0];
calculateMvCoeff tempmv447[0] = DIVISION(tempmv451,tempmv452);
resetMv tempmv453[1];
resetMv tempmv454[1];
setVector ve455 = {nen[1,2,3]};
setVector ve456 = {nen[1,2,3]};
dotVectors tempmv454[0] = <ve455,ve456>;
resetMv tempmv457[1];
setMv tempmv457[0] = nen[2];
resetMv tempmv458[1];
setMv tempmv458[0] = tempmv454[0];
calculateMvCoeff tempmv453[0] = DIVISION(tempmv457,tempmv458);
resetMv tempmv459[1];
resetMv tempmv460[1];
setVector ve461 = {nen[1,2,3]};
setVector ve462 = {nen[1,2,3]};
dotVectors tempmv460[0] = <ve461,ve462>;
resetMv tempmv463[1];
setMv tempmv463[0] = nen[1];
resetMv tempmv464[1];
setMv tempmv464[0] = tempmv460[0];
calculateMvCoeff tempmv459[0] = DIVISION(tempmv463,tempmv464);
resetMv tempmv465[1];
resetMv tempmv466[1];
setVector ve467 = {nen[1,2,3]};
setVector ve468 = {nen[1,2,3]};
dotVectors tempmv466[0] = <ve467,ve468>;
resetMv tempmv469[1];
setMv tempmv469[0] = nen[3];
resetMv tempmv470[1];
setMv tempmv470[0] = tempmv466[0];
calculateMvCoeff tempmv465[0] = DIVISION(tempmv469,tempmv470);
resetMv tempmv471[1];
resetMv tempmv472[1];
setVector ve473 = {nen[1,2,3]};
setVector ve474 = {nen[1,2,3]};
dotVectors tempmv472[0] = <ve473,ve474>;
resetMv tempmv475[1];
setMv tempmv475[0] = nen[4];
resetMv tempmv476[1];
setMv tempmv476[0] = tempmv472[0];
calculateMvCoeff tempmv471[0] = DIVISION(tempmv475,tempmv476);
setVector ve477 = {len[2,-4,17,-22,-24]};
setVector ve478 = {tempmv447[0],tempmv453[0],tempmv459[0],tempmv465[0],tempmv471[0]};
dotVectors rc1[11] = <ve477,ve478>;

//rc1[12] = ((-(len[5] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (len[18] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[23] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv tempmv479[1];
resetMv tempmv480[1];
setVector ve481 = {nen[1,2,3]};
setVector ve482 = {nen[1,2,3]};
dotVectors tempmv480[0] = <ve481,ve482>;
resetMv tempmv483[1];
setMv tempmv483[0] = nen[2];
resetMv tempmv484[1];
setMv tempmv484[0] = tempmv480[0];
calculateMvCoeff tempmv479[0] = DIVISION(tempmv483,tempmv484);
resetMv tempmv485[1];
resetMv tempmv486[1];
setVector ve487 = {nen[1,2,3]};
setVector ve488 = {nen[1,2,3]};
dotVectors tempmv486[0] = <ve487,ve488>;
resetMv tempmv489[1];
setMv tempmv489[0] = nen[1];
resetMv tempmv490[1];
setMv tempmv490[0] = tempmv486[0];
calculateMvCoeff tempmv485[0] = DIVISION(tempmv489,tempmv490);
resetMv tempmv491[1];
resetMv tempmv492[1];
setVector ve493 = {nen[1,2,3]};
setVector ve494 = {nen[1,2,3]};
dotVectors tempmv492[0] = <ve493,ve494>;
resetMv tempmv495[1];
setMv tempmv495[0] = nen[3];
resetMv tempmv496[1];
setMv tempmv496[0] = tempmv492[0];
calculateMvCoeff tempmv491[0] = DIVISION(tempmv495,tempmv496);
setVector ve497 = {len[-5,18,-23]};
setVector ve498 = {tempmv479[0],tempmv485[0],tempmv491[0]};
dotVectors rc1[12] = <ve497,ve498>;

//rc1[13] = ((((len[3] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-(len[4] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (len[19] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (len[22] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[25] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv tempmv499[1];
resetMv tempmv500[1];
setVector ve501 = {nen[1,2,3]};
setVector ve502 = {nen[1,2,3]};
dotVectors tempmv500[0] = <ve501,ve502>;
resetMv tempmv503[1];
setMv tempmv503[0] = nen[4];
resetMv tempmv504[1];
setMv tempmv504[0] = tempmv500[0];
calculateMvCoeff tempmv499[0] = DIVISION(tempmv503,tempmv504);
resetMv tempmv505[1];
resetMv tempmv506[1];
setVector ve507 = {nen[1,2,3]};
setVector ve508 = {nen[1,2,3]};
dotVectors tempmv506[0] = <ve507,ve508>;
resetMv tempmv509[1];
setMv tempmv509[0] = nen[3];
resetMv tempmv510[1];
setMv tempmv510[0] = tempmv506[0];
calculateMvCoeff tempmv505[0] = DIVISION(tempmv509,tempmv510);
resetMv tempmv511[1];
resetMv tempmv512[1];
setVector ve513 = {nen[1,2,3]};
setVector ve514 = {nen[1,2,3]};
dotVectors tempmv512[0] = <ve513,ve514>;
resetMv tempmv515[1];
setMv tempmv515[0] = nen[1];
resetMv tempmv516[1];
setMv tempmv516[0] = tempmv512[0];
calculateMvCoeff tempmv511[0] = DIVISION(tempmv515,tempmv516);
resetMv tempmv517[1];
resetMv tempmv518[1];
setVector ve519 = {nen[1,2,3]};
setVector ve520 = {nen[1,2,3]};
dotVectors tempmv518[0] = <ve519,ve520>;
resetMv tempmv521[1];
setMv tempmv521[0] = nen[2];
resetMv tempmv522[1];
setMv tempmv522[0] = tempmv518[0];
calculateMvCoeff tempmv517[0] = DIVISION(tempmv521,tempmv522);
resetMv tempmv523[1];
resetMv tempmv524[1];
setVector ve525 = {nen[1,2,3]};
setVector ve526 = {nen[1,2,3]};
dotVectors tempmv524[0] = <ve525,ve526>;
resetMv tempmv527[1];
setMv tempmv527[0] = nen[4];
resetMv tempmv528[1];
setMv tempmv528[0] = tempmv524[0];
calculateMvCoeff tempmv523[0] = DIVISION(tempmv527,tempmv528);
setVector ve529 = {len[3,-4,19,22,-25]};
setVector ve530 = {tempmv499[0],tempmv505[0],tempmv511[0],tempmv517[0],tempmv523[0]};
dotVectors rc1[13] = <ve529,ve530>;

//rc1[14] = ((-(len[5] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (len[20] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (len[23] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv tempmv531[1];
resetMv tempmv532[1];
setVector ve533 = {nen[1,2,3]};
setVector ve534 = {nen[1,2,3]};
dotVectors tempmv532[0] = <ve533,ve534>;
resetMv tempmv535[1];
setMv tempmv535[0] = nen[3];
resetMv tempmv536[1];
setMv tempmv536[0] = tempmv532[0];
calculateMvCoeff tempmv531[0] = DIVISION(tempmv535,tempmv536);
resetMv tempmv537[1];
resetMv tempmv538[1];
setVector ve539 = {nen[1,2,3]};
setVector ve540 = {nen[1,2,3]};
dotVectors tempmv538[0] = <ve539,ve540>;
resetMv tempmv541[1];
setMv tempmv541[0] = nen[1];
resetMv tempmv542[1];
setMv tempmv542[0] = tempmv538[0];
calculateMvCoeff tempmv537[0] = DIVISION(tempmv541,tempmv542);
resetMv tempmv543[1];
resetMv tempmv544[1];
setVector ve545 = {nen[1,2,3]};
setVector ve546 = {nen[1,2,3]};
dotVectors tempmv544[0] = <ve545,ve546>;
resetMv tempmv547[1];
setMv tempmv547[0] = nen[2];
resetMv tempmv548[1];
setMv tempmv548[0] = tempmv544[0];
calculateMvCoeff tempmv543[0] = DIVISION(tempmv547,tempmv548);
setVector ve549 = {len[-5,20,23]};
setVector ve550 = {tempmv531[0],tempmv537[0],tempmv543[0]};
dotVectors rc1[14] = <ve549,ve550>;

//rc1[15] = (((-(len[5] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (len[21] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (len[24] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (len[25] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv tempmv551[1];
resetMv tempmv552[1];
setVector ve553 = {nen[1,2,3]};
setVector ve554 = {nen[1,2,3]};
dotVectors tempmv552[0] = <ve553,ve554>;
resetMv tempmv555[1];
setMv tempmv555[0] = nen[4];
resetMv tempmv556[1];
setMv tempmv556[0] = tempmv552[0];
calculateMvCoeff tempmv551[0] = DIVISION(tempmv555,tempmv556);
resetMv tempmv557[1];
resetMv tempmv558[1];
setVector ve559 = {nen[1,2,3]};
setVector ve560 = {nen[1,2,3]};
dotVectors tempmv558[0] = <ve559,ve560>;
resetMv tempmv561[1];
setMv tempmv561[0] = nen[1];
resetMv tempmv562[1];
setMv tempmv562[0] = tempmv558[0];
calculateMvCoeff tempmv557[0] = DIVISION(tempmv561,tempmv562);
resetMv tempmv563[1];
resetMv tempmv564[1];
setVector ve565 = {nen[1,2,3]};
setVector ve566 = {nen[1,2,3]};
dotVectors tempmv564[0] = <ve565,ve566>;
resetMv tempmv567[1];
setMv tempmv567[0] = nen[2];
resetMv tempmv568[1];
setMv tempmv568[0] = tempmv564[0];
calculateMvCoeff tempmv563[0] = DIVISION(tempmv567,tempmv568);
resetMv tempmv569[1];
resetMv tempmv570[1];
setVector ve571 = {nen[1,2,3]};
setVector ve572 = {nen[1,2,3]};
dotVectors tempmv570[0] = <ve571,ve572>;
resetMv tempmv573[1];
setMv tempmv573[0] = nen[3];
resetMv tempmv574[1];
setMv tempmv574[0] = tempmv570[0];
calculateMvCoeff tempmv569[0] = DIVISION(tempmv573,tempmv574);
setVector ve575 = {len[-5,21,24,25]};
setVector ve576 = {tempmv551[0],tempmv557[0],tempmv563[0],tempmv569[0]};
dotVectors rc1[15] = <ve575,ve576>;

//rc1[16] = ((((rcPpDual[6] + len[6]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((rcPpDual[7] + len[7]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + ((rcPpDual[10] + len[10]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[27] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv tempmv577[1];
setVector ve578 = {rcPpDual[6],len[6]};
dotVectors tempmv577[0] = <ve578>;
resetMv tempmv579[1];
resetMv tempmv580[1];
setVector ve581 = {nen[1,2,3]};
setVector ve582 = {nen[1,2,3]};
dotVectors tempmv580[0] = <ve581,ve582>;
resetMv tempmv583[1];
setMv tempmv583[0] = nen[3];
resetMv tempmv584[1];
setMv tempmv584[0] = tempmv580[0];
calculateMvCoeff tempmv579[0] = DIVISION(tempmv583,tempmv584);
resetMv tempmv585[1];
resetMv tempmv586[1];
setVector ve587 = {rcPpDual[7],len[7]};
dotVectors tempmv586[0] = <ve587>;
setMv tempmv585[0] = tempmv586[-0];
resetMv tempmv588[1];
resetMv tempmv589[1];
setVector ve590 = {nen[1,2,3]};
setVector ve591 = {nen[1,2,3]};
dotVectors tempmv589[0] = <ve590,ve591>;
resetMv tempmv592[1];
setMv tempmv592[0] = nen[2];
resetMv tempmv593[1];
setMv tempmv593[0] = tempmv589[0];
calculateMvCoeff tempmv588[0] = DIVISION(tempmv592,tempmv593);
resetMv tempmv594[1];
setVector ve595 = {rcPpDual[10],len[10]};
dotVectors tempmv594[0] = <ve595>;
resetMv tempmv596[1];
resetMv tempmv597[1];
setVector ve598 = {nen[1,2,3]};
setVector ve599 = {nen[1,2,3]};
dotVectors tempmv597[0] = <ve598,ve599>;
resetMv tempmv600[1];
setMv tempmv600[0] = nen[1];
resetMv tempmv601[1];
setMv tempmv601[0] = tempmv597[0];
calculateMvCoeff tempmv596[0] = DIVISION(tempmv600,tempmv601);
resetMv tempmv602[1];
resetMv tempmv603[1];
setVector ve604 = {nen[1,2,3]};
setVector ve605 = {nen[1,2,3]};
dotVectors tempmv603[0] = <ve604,ve605>;
resetMv tempmv606[1];
setMv tempmv606[0] = nen[4];
resetMv tempmv607[1];
setMv tempmv607[0] = tempmv603[0];
calculateMvCoeff tempmv602[0] = DIVISION(tempmv606,tempmv607);
setVector ve608 = {tempmv577[0],tempmv585[0],tempmv594[0],len[-27]};
setVector ve609 = {tempmv579[0],tempmv588[0],tempmv596[0],tempmv602[0]};
dotVectors rc1[16] = <ve608,ve609>;

//rc1[17] = (((((rcPpDual[6] + len[6]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((rcPpDual[8] + len[8]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + ((rcPpDual[11] + len[11]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[26] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(len[28] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv tempmv610[1];
setVector ve611 = {rcPpDual[6],len[6]};
dotVectors tempmv610[0] = <ve611>;
resetMv tempmv612[1];
resetMv tempmv613[1];
setVector ve614 = {nen[1,2,3]};
setVector ve615 = {nen[1,2,3]};
dotVectors tempmv613[0] = <ve614,ve615>;
resetMv tempmv616[1];
setMv tempmv616[0] = nen[4];
resetMv tempmv617[1];
setMv tempmv617[0] = tempmv613[0];
calculateMvCoeff tempmv612[0] = DIVISION(tempmv616,tempmv617);
resetMv tempmv618[1];
resetMv tempmv619[1];
setVector ve620 = {rcPpDual[8],len[8]};
dotVectors tempmv619[0] = <ve620>;
setMv tempmv618[0] = tempmv619[-0];
resetMv tempmv621[1];
resetMv tempmv622[1];
setVector ve623 = {nen[1,2,3]};
setVector ve624 = {nen[1,2,3]};
dotVectors tempmv622[0] = <ve623,ve624>;
resetMv tempmv625[1];
setMv tempmv625[0] = nen[2];
resetMv tempmv626[1];
setMv tempmv626[0] = tempmv622[0];
calculateMvCoeff tempmv621[0] = DIVISION(tempmv625,tempmv626);
resetMv tempmv627[1];
setVector ve628 = {rcPpDual[11],len[11]};
dotVectors tempmv627[0] = <ve628>;
resetMv tempmv629[1];
resetMv tempmv630[1];
setVector ve631 = {nen[1,2,3]};
setVector ve632 = {nen[1,2,3]};
dotVectors tempmv630[0] = <ve631,ve632>;
resetMv tempmv633[1];
setMv tempmv633[0] = nen[1];
resetMv tempmv634[1];
setMv tempmv634[0] = tempmv630[0];
calculateMvCoeff tempmv629[0] = DIVISION(tempmv633,tempmv634);
resetMv tempmv635[1];
resetMv tempmv636[1];
setVector ve637 = {nen[1,2,3]};
setVector ve638 = {nen[1,2,3]};
dotVectors tempmv636[0] = <ve637,ve638>;
resetMv tempmv639[1];
setMv tempmv639[0] = nen[3];
resetMv tempmv640[1];
setMv tempmv640[0] = tempmv636[0];
calculateMvCoeff tempmv635[0] = DIVISION(tempmv639,tempmv640);
resetMv tempmv641[1];
resetMv tempmv642[1];
setVector ve643 = {nen[1,2,3]};
setVector ve644 = {nen[1,2,3]};
dotVectors tempmv642[0] = <ve643,ve644>;
resetMv tempmv645[1];
setMv tempmv645[0] = nen[4];
resetMv tempmv646[1];
setMv tempmv646[0] = tempmv642[0];
calculateMvCoeff tempmv641[0] = DIVISION(tempmv645,tempmv646);
setVector ve647 = {tempmv610[0],tempmv618[0],tempmv627[0],len[-26,-28]};
setVector ve648 = {tempmv612[0],tempmv621[0],tempmv629[0],tempmv635[0],tempmv641[0]};
dotVectors rc1[17] = <ve647,ve648>;

//rc1[18] = ((-((rcPpDual[9] + len[9]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((rcPpDual[12] + len[12]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[27] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv tempmv649[1];
resetMv tempmv650[1];
setVector ve651 = {rcPpDual[9],len[9]};
dotVectors tempmv650[0] = <ve651>;
setMv tempmv649[0] = tempmv650[-0];
resetMv tempmv652[1];
resetMv tempmv653[1];
setVector ve654 = {nen[1,2,3]};
setVector ve655 = {nen[1,2,3]};
dotVectors tempmv653[0] = <ve654,ve655>;
resetMv tempmv656[1];
setMv tempmv656[0] = nen[2];
resetMv tempmv657[1];
setMv tempmv657[0] = tempmv653[0];
calculateMvCoeff tempmv652[0] = DIVISION(tempmv656,tempmv657);
resetMv tempmv658[1];
setVector ve659 = {rcPpDual[12],len[12]};
dotVectors tempmv658[0] = <ve659>;
resetMv tempmv660[1];
resetMv tempmv661[1];
setVector ve662 = {nen[1,2,3]};
setVector ve663 = {nen[1,2,3]};
dotVectors tempmv661[0] = <ve662,ve663>;
resetMv tempmv664[1];
setMv tempmv664[0] = nen[1];
resetMv tempmv665[1];
setMv tempmv665[0] = tempmv661[0];
calculateMvCoeff tempmv660[0] = DIVISION(tempmv664,tempmv665);
resetMv tempmv666[1];
resetMv tempmv667[1];
setVector ve668 = {nen[1,2,3]};
setVector ve669 = {nen[1,2,3]};
dotVectors tempmv667[0] = <ve668,ve669>;
resetMv tempmv670[1];
setMv tempmv670[0] = nen[3];
resetMv tempmv671[1];
setMv tempmv671[0] = tempmv667[0];
calculateMvCoeff tempmv666[0] = DIVISION(tempmv670,tempmv671);
setVector ve672 = {tempmv649[0],tempmv658[0],len[-27]};
setVector ve673 = {tempmv652[0],tempmv660[0],tempmv666[0]};
dotVectors rc1[18] = <ve672,ve673>;

//rc1[19] = (((((rcPpDual[7] + len[7]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((rcPpDual[8] + len[8]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + ((rcPpDual[13] + len[13]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (len[26] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[29] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv tempmv674[1];
setVector ve675 = {rcPpDual[7],len[7]};
dotVectors tempmv674[0] = <ve675>;
resetMv tempmv676[1];
resetMv tempmv677[1];
setVector ve678 = {nen[1,2,3]};
setVector ve679 = {nen[1,2,3]};
dotVectors tempmv677[0] = <ve678,ve679>;
resetMv tempmv680[1];
setMv tempmv680[0] = nen[4];
resetMv tempmv681[1];
setMv tempmv681[0] = tempmv677[0];
calculateMvCoeff tempmv676[0] = DIVISION(tempmv680,tempmv681);
resetMv tempmv682[1];
resetMv tempmv683[1];
setVector ve684 = {rcPpDual[8],len[8]};
dotVectors tempmv683[0] = <ve684>;
setMv tempmv682[0] = tempmv683[-0];
resetMv tempmv685[1];
resetMv tempmv686[1];
setVector ve687 = {nen[1,2,3]};
setVector ve688 = {nen[1,2,3]};
dotVectors tempmv686[0] = <ve687,ve688>;
resetMv tempmv689[1];
setMv tempmv689[0] = nen[3];
resetMv tempmv690[1];
setMv tempmv690[0] = tempmv686[0];
calculateMvCoeff tempmv685[0] = DIVISION(tempmv689,tempmv690);
resetMv tempmv691[1];
setVector ve692 = {rcPpDual[13],len[13]};
dotVectors tempmv691[0] = <ve692>;
resetMv tempmv693[1];
resetMv tempmv694[1];
setVector ve695 = {nen[1,2,3]};
setVector ve696 = {nen[1,2,3]};
dotVectors tempmv694[0] = <ve695,ve696>;
resetMv tempmv697[1];
setMv tempmv697[0] = nen[1];
resetMv tempmv698[1];
setMv tempmv698[0] = tempmv694[0];
calculateMvCoeff tempmv693[0] = DIVISION(tempmv697,tempmv698);
resetMv tempmv699[1];
resetMv tempmv700[1];
setVector ve701 = {nen[1,2,3]};
setVector ve702 = {nen[1,2,3]};
dotVectors tempmv700[0] = <ve701,ve702>;
resetMv tempmv703[1];
setMv tempmv703[0] = nen[2];
resetMv tempmv704[1];
setMv tempmv704[0] = tempmv700[0];
calculateMvCoeff tempmv699[0] = DIVISION(tempmv703,tempmv704);
resetMv tempmv705[1];
resetMv tempmv706[1];
setVector ve707 = {nen[1,2,3]};
setVector ve708 = {nen[1,2,3]};
dotVectors tempmv706[0] = <ve707,ve708>;
resetMv tempmv709[1];
setMv tempmv709[0] = nen[4];
resetMv tempmv710[1];
setMv tempmv710[0] = tempmv706[0];
calculateMvCoeff tempmv705[0] = DIVISION(tempmv709,tempmv710);
setVector ve711 = {tempmv674[0],tempmv682[0],tempmv691[0],len[26,-29]};
setVector ve712 = {tempmv676[0],tempmv685[0],tempmv693[0],tempmv699[0],tempmv705[0]};
dotVectors rc1[19] = <ve711,ve712>;

//rc1[20] = ((-((rcPpDual[9] + len[9]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((rcPpDual[14] + len[14]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (len[27] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv tempmv713[1];
resetMv tempmv714[1];
setVector ve715 = {rcPpDual[9],len[9]};
dotVectors tempmv714[0] = <ve715>;
setMv tempmv713[0] = tempmv714[-0];
resetMv tempmv716[1];
resetMv tempmv717[1];
setVector ve718 = {nen[1,2,3]};
setVector ve719 = {nen[1,2,3]};
dotVectors tempmv717[0] = <ve718,ve719>;
resetMv tempmv720[1];
setMv tempmv720[0] = nen[3];
resetMv tempmv721[1];
setMv tempmv721[0] = tempmv717[0];
calculateMvCoeff tempmv716[0] = DIVISION(tempmv720,tempmv721);
resetMv tempmv722[1];
setVector ve723 = {rcPpDual[14],len[14]};
dotVectors tempmv722[0] = <ve723>;
resetMv tempmv724[1];
resetMv tempmv725[1];
setVector ve726 = {nen[1,2,3]};
setVector ve727 = {nen[1,2,3]};
dotVectors tempmv725[0] = <ve726,ve727>;
resetMv tempmv728[1];
setMv tempmv728[0] = nen[1];
resetMv tempmv729[1];
setMv tempmv729[0] = tempmv725[0];
calculateMvCoeff tempmv724[0] = DIVISION(tempmv728,tempmv729);
resetMv tempmv730[1];
resetMv tempmv731[1];
setVector ve732 = {nen[1,2,3]};
setVector ve733 = {nen[1,2,3]};
dotVectors tempmv731[0] = <ve732,ve733>;
resetMv tempmv734[1];
setMv tempmv734[0] = nen[2];
resetMv tempmv735[1];
setMv tempmv735[0] = tempmv731[0];
calculateMvCoeff tempmv730[0] = DIVISION(tempmv734,tempmv735);
setVector ve736 = {tempmv713[0],tempmv722[0],len[27]};
setVector ve737 = {tempmv716[0],tempmv724[0],tempmv730[0]};
dotVectors rc1[20] = <ve736,ve737>;

//rc1[21] = (((-((rcPpDual[9] + len[9]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((rcPpDual[15] + len[15]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (len[28] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (len[29] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv tempmv738[1];
resetMv tempmv739[1];
setVector ve740 = {rcPpDual[9],len[9]};
dotVectors tempmv739[0] = <ve740>;
setMv tempmv738[0] = tempmv739[-0];
resetMv tempmv741[1];
resetMv tempmv742[1];
setVector ve743 = {nen[1,2,3]};
setVector ve744 = {nen[1,2,3]};
dotVectors tempmv742[0] = <ve743,ve744>;
resetMv tempmv745[1];
setMv tempmv745[0] = nen[4];
resetMv tempmv746[1];
setMv tempmv746[0] = tempmv742[0];
calculateMvCoeff tempmv741[0] = DIVISION(tempmv745,tempmv746);
resetMv tempmv747[1];
setVector ve748 = {rcPpDual[15],len[15]};
dotVectors tempmv747[0] = <ve748>;
resetMv tempmv749[1];
resetMv tempmv750[1];
setVector ve751 = {nen[1,2,3]};
setVector ve752 = {nen[1,2,3]};
dotVectors tempmv750[0] = <ve751,ve752>;
resetMv tempmv753[1];
setMv tempmv753[0] = nen[1];
resetMv tempmv754[1];
setMv tempmv754[0] = tempmv750[0];
calculateMvCoeff tempmv749[0] = DIVISION(tempmv753,tempmv754);
resetMv tempmv755[1];
resetMv tempmv756[1];
setVector ve757 = {nen[1,2,3]};
setVector ve758 = {nen[1,2,3]};
dotVectors tempmv756[0] = <ve757,ve758>;
resetMv tempmv759[1];
setMv tempmv759[0] = nen[2];
resetMv tempmv760[1];
setMv tempmv760[0] = tempmv756[0];
calculateMvCoeff tempmv755[0] = DIVISION(tempmv759,tempmv760);
resetMv tempmv761[1];
resetMv tempmv762[1];
setVector ve763 = {nen[1,2,3]};
setVector ve764 = {nen[1,2,3]};
dotVectors tempmv762[0] = <ve763,ve764>;
resetMv tempmv765[1];
setMv tempmv765[0] = nen[3];
resetMv tempmv766[1];
setMv tempmv766[0] = tempmv762[0];
calculateMvCoeff tempmv761[0] = DIVISION(tempmv765,tempmv766);
setVector ve767 = {tempmv738[0],tempmv747[0],len[28,29]};
setVector ve768 = {tempmv741[0],tempmv749[0],tempmv755[0],tempmv761[0]};
dotVectors rc1[21] = <ve767,ve768>;

//rc1[22] = (((((rcPpDual[10] + len[10]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((rcPpDual[11] + len[11]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + ((rcPpDual[13] + len[13]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[26] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(len[30] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv tempmv769[1];
setVector ve770 = {rcPpDual[10],len[10]};
dotVectors tempmv769[0] = <ve770>;
resetMv tempmv771[1];
resetMv tempmv772[1];
setVector ve773 = {nen[1,2,3]};
setVector ve774 = {nen[1,2,3]};
dotVectors tempmv772[0] = <ve773,ve774>;
resetMv tempmv775[1];
setMv tempmv775[0] = nen[4];
resetMv tempmv776[1];
setMv tempmv776[0] = tempmv772[0];
calculateMvCoeff tempmv771[0] = DIVISION(tempmv775,tempmv776);
resetMv tempmv777[1];
resetMv tempmv778[1];
setVector ve779 = {rcPpDual[11],len[11]};
dotVectors tempmv778[0] = <ve779>;
setMv tempmv777[0] = tempmv778[-0];
resetMv tempmv780[1];
resetMv tempmv781[1];
setVector ve782 = {nen[1,2,3]};
setVector ve783 = {nen[1,2,3]};
dotVectors tempmv781[0] = <ve782,ve783>;
resetMv tempmv784[1];
setMv tempmv784[0] = nen[3];
resetMv tempmv785[1];
setMv tempmv785[0] = tempmv781[0];
calculateMvCoeff tempmv780[0] = DIVISION(tempmv784,tempmv785);
resetMv tempmv786[1];
setVector ve787 = {rcPpDual[13],len[13]};
dotVectors tempmv786[0] = <ve787>;
resetMv tempmv788[1];
resetMv tempmv789[1];
setVector ve790 = {nen[1,2,3]};
setVector ve791 = {nen[1,2,3]};
dotVectors tempmv789[0] = <ve790,ve791>;
resetMv tempmv792[1];
setMv tempmv792[0] = nen[2];
resetMv tempmv793[1];
setMv tempmv793[0] = tempmv789[0];
calculateMvCoeff tempmv788[0] = DIVISION(tempmv792,tempmv793);
resetMv tempmv794[1];
resetMv tempmv795[1];
setVector ve796 = {nen[1,2,3]};
setVector ve797 = {nen[1,2,3]};
dotVectors tempmv795[0] = <ve796,ve797>;
resetMv tempmv798[1];
setMv tempmv798[0] = nen[1];
resetMv tempmv799[1];
setMv tempmv799[0] = tempmv795[0];
calculateMvCoeff tempmv794[0] = DIVISION(tempmv798,tempmv799);
resetMv tempmv800[1];
resetMv tempmv801[1];
setVector ve802 = {nen[1,2,3]};
setVector ve803 = {nen[1,2,3]};
dotVectors tempmv801[0] = <ve802,ve803>;
resetMv tempmv804[1];
setMv tempmv804[0] = nen[4];
resetMv tempmv805[1];
setMv tempmv805[0] = tempmv801[0];
calculateMvCoeff tempmv800[0] = DIVISION(tempmv804,tempmv805);
setVector ve806 = {tempmv769[0],tempmv777[0],tempmv786[0],len[-26,-30]};
setVector ve807 = {tempmv771[0],tempmv780[0],tempmv788[0],tempmv794[0],tempmv800[0]};
dotVectors rc1[22] = <ve806,ve807>;

//rc1[23] = ((-((rcPpDual[12] + len[12]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((rcPpDual[14] + len[14]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[27] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv tempmv808[1];
resetMv tempmv809[1];
setVector ve810 = {rcPpDual[12],len[12]};
dotVectors tempmv809[0] = <ve810>;
setMv tempmv808[0] = tempmv809[-0];
resetMv tempmv811[1];
resetMv tempmv812[1];
setVector ve813 = {nen[1,2,3]};
setVector ve814 = {nen[1,2,3]};
dotVectors tempmv812[0] = <ve813,ve814>;
resetMv tempmv815[1];
setMv tempmv815[0] = nen[3];
resetMv tempmv816[1];
setMv tempmv816[0] = tempmv812[0];
calculateMvCoeff tempmv811[0] = DIVISION(tempmv815,tempmv816);
resetMv tempmv817[1];
setVector ve818 = {rcPpDual[14],len[14]};
dotVectors tempmv817[0] = <ve818>;
resetMv tempmv819[1];
resetMv tempmv820[1];
setVector ve821 = {nen[1,2,3]};
setVector ve822 = {nen[1,2,3]};
dotVectors tempmv820[0] = <ve821,ve822>;
resetMv tempmv823[1];
setMv tempmv823[0] = nen[2];
resetMv tempmv824[1];
setMv tempmv824[0] = tempmv820[0];
calculateMvCoeff tempmv819[0] = DIVISION(tempmv823,tempmv824);
resetMv tempmv825[1];
resetMv tempmv826[1];
setVector ve827 = {nen[1,2,3]};
setVector ve828 = {nen[1,2,3]};
dotVectors tempmv826[0] = <ve827,ve828>;
resetMv tempmv829[1];
setMv tempmv829[0] = nen[1];
resetMv tempmv830[1];
setMv tempmv830[0] = tempmv826[0];
calculateMvCoeff tempmv825[0] = DIVISION(tempmv829,tempmv830);
setVector ve831 = {tempmv808[0],tempmv817[0],len[-27]};
setVector ve832 = {tempmv811[0],tempmv819[0],tempmv825[0]};
dotVectors rc1[23] = <ve831,ve832>;

//rc1[24] = (((-((rcPpDual[12] + len[12]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((rcPpDual[15] + len[15]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[28] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (len[30] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv tempmv833[1];
resetMv tempmv834[1];
setVector ve835 = {rcPpDual[12],len[12]};
dotVectors tempmv834[0] = <ve835>;
setMv tempmv833[0] = tempmv834[-0];
resetMv tempmv836[1];
resetMv tempmv837[1];
setVector ve838 = {nen[1,2,3]};
setVector ve839 = {nen[1,2,3]};
dotVectors tempmv837[0] = <ve838,ve839>;
resetMv tempmv840[1];
setMv tempmv840[0] = nen[4];
resetMv tempmv841[1];
setMv tempmv841[0] = tempmv837[0];
calculateMvCoeff tempmv836[0] = DIVISION(tempmv840,tempmv841);
resetMv tempmv842[1];
setVector ve843 = {rcPpDual[15],len[15]};
dotVectors tempmv842[0] = <ve843>;
resetMv tempmv844[1];
resetMv tempmv845[1];
setVector ve846 = {nen[1,2,3]};
setVector ve847 = {nen[1,2,3]};
dotVectors tempmv845[0] = <ve846,ve847>;
resetMv tempmv848[1];
setMv tempmv848[0] = nen[2];
resetMv tempmv849[1];
setMv tempmv849[0] = tempmv845[0];
calculateMvCoeff tempmv844[0] = DIVISION(tempmv848,tempmv849);
resetMv tempmv850[1];
resetMv tempmv851[1];
setVector ve852 = {nen[1,2,3]};
setVector ve853 = {nen[1,2,3]};
dotVectors tempmv851[0] = <ve852,ve853>;
resetMv tempmv854[1];
setMv tempmv854[0] = nen[1];
resetMv tempmv855[1];
setMv tempmv855[0] = tempmv851[0];
calculateMvCoeff tempmv850[0] = DIVISION(tempmv854,tempmv855);
resetMv tempmv856[1];
resetMv tempmv857[1];
setVector ve858 = {nen[1,2,3]};
setVector ve859 = {nen[1,2,3]};
dotVectors tempmv857[0] = <ve858,ve859>;
resetMv tempmv860[1];
setMv tempmv860[0] = nen[3];
resetMv tempmv861[1];
setMv tempmv861[0] = tempmv857[0];
calculateMvCoeff tempmv856[0] = DIVISION(tempmv860,tempmv861);
setVector ve862 = {tempmv833[0],tempmv842[0],len[-28,30]};
setVector ve863 = {tempmv836[0],tempmv844[0],tempmv850[0],tempmv856[0]};
dotVectors rc1[24] = <ve862,ve863>;

//rc1[25] = (((-((rcPpDual[14] + len[14]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((rcPpDual[15] + len[15]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[29] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(len[30] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv tempmv864[1];
resetMv tempmv865[1];
setVector ve866 = {rcPpDual[14],len[14]};
dotVectors tempmv865[0] = <ve866>;
setMv tempmv864[0] = tempmv865[-0];
resetMv tempmv867[1];
resetMv tempmv868[1];
setVector ve869 = {nen[1,2,3]};
setVector ve870 = {nen[1,2,3]};
dotVectors tempmv868[0] = <ve869,ve870>;
resetMv tempmv871[1];
setMv tempmv871[0] = nen[4];
resetMv tempmv872[1];
setMv tempmv872[0] = tempmv868[0];
calculateMvCoeff tempmv867[0] = DIVISION(tempmv871,tempmv872);
resetMv tempmv873[1];
setVector ve874 = {rcPpDual[15],len[15]};
dotVectors tempmv873[0] = <ve874>;
resetMv tempmv875[1];
resetMv tempmv876[1];
setVector ve877 = {nen[1,2,3]};
setVector ve878 = {nen[1,2,3]};
dotVectors tempmv876[0] = <ve877,ve878>;
resetMv tempmv879[1];
setMv tempmv879[0] = nen[3];
resetMv tempmv880[1];
setMv tempmv880[0] = tempmv876[0];
calculateMvCoeff tempmv875[0] = DIVISION(tempmv879,tempmv880);
resetMv tempmv881[1];
resetMv tempmv882[1];
setVector ve883 = {nen[1,2,3]};
setVector ve884 = {nen[1,2,3]};
dotVectors tempmv882[0] = <ve883,ve884>;
resetMv tempmv885[1];
setMv tempmv885[0] = nen[1];
resetMv tempmv886[1];
setMv tempmv886[0] = tempmv882[0];
calculateMvCoeff tempmv881[0] = DIVISION(tempmv885,tempmv886);
resetMv tempmv887[1];
resetMv tempmv888[1];
setVector ve889 = {nen[1,2,3]};
setVector ve890 = {nen[1,2,3]};
dotVectors tempmv888[0] = <ve889,ve890>;
resetMv tempmv891[1];
setMv tempmv891[0] = nen[2];
resetMv tempmv892[1];
setMv tempmv892[0] = tempmv888[0];
calculateMvCoeff tempmv887[0] = DIVISION(tempmv891,tempmv892);
setVector ve893 = {tempmv864[0],tempmv873[0],len[-29,-30]};
setVector ve894 = {tempmv867[0],tempmv875[0],tempmv881[0],tempmv887[0]};
dotVectors rc1[25] = <ve893,ve894>;

//rc1[26] = ((((len[16] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-(len[17] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (len[19] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[22] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(len[31] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv tempmv895[1];
resetMv tempmv896[1];
setVector ve897 = {nen[1,2,3]};
setVector ve898 = {nen[1,2,3]};
dotVectors tempmv896[0] = <ve897,ve898>;
resetMv tempmv899[1];
setMv tempmv899[0] = nen[4];
resetMv tempmv900[1];
setMv tempmv900[0] = tempmv896[0];
calculateMvCoeff tempmv895[0] = DIVISION(tempmv899,tempmv900);
resetMv tempmv901[1];
resetMv tempmv902[1];
setVector ve903 = {nen[1,2,3]};
setVector ve904 = {nen[1,2,3]};
dotVectors tempmv902[0] = <ve903,ve904>;
resetMv tempmv905[1];
setMv tempmv905[0] = nen[3];
resetMv tempmv906[1];
setMv tempmv906[0] = tempmv902[0];
calculateMvCoeff tempmv901[0] = DIVISION(tempmv905,tempmv906);
resetMv tempmv907[1];
resetMv tempmv908[1];
setVector ve909 = {nen[1,2,3]};
setVector ve910 = {nen[1,2,3]};
dotVectors tempmv908[0] = <ve909,ve910>;
resetMv tempmv911[1];
setMv tempmv911[0] = nen[2];
resetMv tempmv912[1];
setMv tempmv912[0] = tempmv908[0];
calculateMvCoeff tempmv907[0] = DIVISION(tempmv911,tempmv912);
resetMv tempmv913[1];
resetMv tempmv914[1];
setVector ve915 = {nen[1,2,3]};
setVector ve916 = {nen[1,2,3]};
dotVectors tempmv914[0] = <ve915,ve916>;
resetMv tempmv917[1];
setMv tempmv917[0] = nen[1];
resetMv tempmv918[1];
setMv tempmv918[0] = tempmv914[0];
calculateMvCoeff tempmv913[0] = DIVISION(tempmv917,tempmv918);
resetMv tempmv919[1];
resetMv tempmv920[1];
setVector ve921 = {nen[1,2,3]};
setVector ve922 = {nen[1,2,3]};
dotVectors tempmv920[0] = <ve921,ve922>;
resetMv tempmv923[1];
setMv tempmv923[0] = nen[4];
resetMv tempmv924[1];
setMv tempmv924[0] = tempmv920[0];
calculateMvCoeff tempmv919[0] = DIVISION(tempmv923,tempmv924);
setVector ve925 = {len[16,-17,19,-22,-31]};
setVector ve926 = {tempmv895[0],tempmv901[0],tempmv907[0],tempmv913[0],tempmv919[0]};
dotVectors rc1[26] = <ve925,ve926>;

//rc1[27] = ((-(len[18] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (len[20] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[23] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv tempmv927[1];
resetMv tempmv928[1];
setVector ve929 = {nen[1,2,3]};
setVector ve930 = {nen[1,2,3]};
dotVectors tempmv928[0] = <ve929,ve930>;
resetMv tempmv931[1];
setMv tempmv931[0] = nen[3];
resetMv tempmv932[1];
setMv tempmv932[0] = tempmv928[0];
calculateMvCoeff tempmv927[0] = DIVISION(tempmv931,tempmv932);
resetMv tempmv933[1];
resetMv tempmv934[1];
setVector ve935 = {nen[1,2,3]};
setVector ve936 = {nen[1,2,3]};
dotVectors tempmv934[0] = <ve935,ve936>;
resetMv tempmv937[1];
setMv tempmv937[0] = nen[2];
resetMv tempmv938[1];
setMv tempmv938[0] = tempmv934[0];
calculateMvCoeff tempmv933[0] = DIVISION(tempmv937,tempmv938);
resetMv tempmv939[1];
resetMv tempmv940[1];
setVector ve941 = {nen[1,2,3]};
setVector ve942 = {nen[1,2,3]};
dotVectors tempmv940[0] = <ve941,ve942>;
resetMv tempmv943[1];
setMv tempmv943[0] = nen[1];
resetMv tempmv944[1];
setMv tempmv944[0] = tempmv940[0];
calculateMvCoeff tempmv939[0] = DIVISION(tempmv943,tempmv944);
setVector ve945 = {len[-18,20,-23]};
setVector ve946 = {tempmv927[0],tempmv933[0],tempmv939[0]};
dotVectors rc1[27] = <ve945,ve946>;

//rc1[28] = (((-(len[18] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (len[21] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[24] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (len[31] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv tempmv947[1];
resetMv tempmv948[1];
setVector ve949 = {nen[1,2,3]};
setVector ve950 = {nen[1,2,3]};
dotVectors tempmv948[0] = <ve949,ve950>;
resetMv tempmv951[1];
setMv tempmv951[0] = nen[4];
resetMv tempmv952[1];
setMv tempmv952[0] = tempmv948[0];
calculateMvCoeff tempmv947[0] = DIVISION(tempmv951,tempmv952);
resetMv tempmv953[1];
resetMv tempmv954[1];
setVector ve955 = {nen[1,2,3]};
setVector ve956 = {nen[1,2,3]};
dotVectors tempmv954[0] = <ve955,ve956>;
resetMv tempmv957[1];
setMv tempmv957[0] = nen[2];
resetMv tempmv958[1];
setMv tempmv958[0] = tempmv954[0];
calculateMvCoeff tempmv953[0] = DIVISION(tempmv957,tempmv958);
resetMv tempmv959[1];
resetMv tempmv960[1];
setVector ve961 = {nen[1,2,3]};
setVector ve962 = {nen[1,2,3]};
dotVectors tempmv960[0] = <ve961,ve962>;
resetMv tempmv963[1];
setMv tempmv963[0] = nen[1];
resetMv tempmv964[1];
setMv tempmv964[0] = tempmv960[0];
calculateMvCoeff tempmv959[0] = DIVISION(tempmv963,tempmv964);
resetMv tempmv965[1];
resetMv tempmv966[1];
setVector ve967 = {nen[1,2,3]};
setVector ve968 = {nen[1,2,3]};
dotVectors tempmv966[0] = <ve967,ve968>;
resetMv tempmv969[1];
setMv tempmv969[0] = nen[3];
resetMv tempmv970[1];
setMv tempmv970[0] = tempmv966[0];
calculateMvCoeff tempmv965[0] = DIVISION(tempmv969,tempmv970);
setVector ve971 = {len[-18,21,-24,31]};
setVector ve972 = {tempmv947[0],tempmv953[0],tempmv959[0],tempmv965[0]};
dotVectors rc1[28] = <ve971,ve972>;

//rc1[29] = (((-(len[20] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (len[21] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[25] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(len[31] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv tempmv973[1];
resetMv tempmv974[1];
setVector ve975 = {nen[1,2,3]};
setVector ve976 = {nen[1,2,3]};
dotVectors tempmv974[0] = <ve975,ve976>;
resetMv tempmv977[1];
setMv tempmv977[0] = nen[4];
resetMv tempmv978[1];
setMv tempmv978[0] = tempmv974[0];
calculateMvCoeff tempmv973[0] = DIVISION(tempmv977,tempmv978);
resetMv tempmv979[1];
resetMv tempmv980[1];
setVector ve981 = {nen[1,2,3]};
setVector ve982 = {nen[1,2,3]};
dotVectors tempmv980[0] = <ve981,ve982>;
resetMv tempmv983[1];
setMv tempmv983[0] = nen[3];
resetMv tempmv984[1];
setMv tempmv984[0] = tempmv980[0];
calculateMvCoeff tempmv979[0] = DIVISION(tempmv983,tempmv984);
resetMv tempmv985[1];
resetMv tempmv986[1];
setVector ve987 = {nen[1,2,3]};
setVector ve988 = {nen[1,2,3]};
dotVectors tempmv986[0] = <ve987,ve988>;
resetMv tempmv989[1];
setMv tempmv989[0] = nen[1];
resetMv tempmv990[1];
setMv tempmv990[0] = tempmv986[0];
calculateMvCoeff tempmv985[0] = DIVISION(tempmv989,tempmv990);
resetMv tempmv991[1];
resetMv tempmv992[1];
setVector ve993 = {nen[1,2,3]};
setVector ve994 = {nen[1,2,3]};
dotVectors tempmv992[0] = <ve993,ve994>;
resetMv tempmv995[1];
setMv tempmv995[0] = nen[2];
resetMv tempmv996[1];
setMv tempmv996[0] = tempmv992[0];
calculateMvCoeff tempmv991[0] = DIVISION(tempmv995,tempmv996);
setVector ve997 = {len[-20,21,-25,-31]};
setVector ve998 = {tempmv973[0],tempmv979[0],tempmv985[0],tempmv991[0]};
dotVectors rc1[29] = <ve997,ve998>;

//rc1[30] = (((-(len[23] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (len[24] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[25] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (len[31] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv tempmv999[1];
resetMv tempmv1000[1];
setVector ve1001 = {nen[1,2,3]};
setVector ve1002 = {nen[1,2,3]};
dotVectors tempmv1000[0] = <ve1001,ve1002>;
resetMv tempmv1003[1];
setMv tempmv1003[0] = nen[4];
resetMv tempmv1004[1];
setMv tempmv1004[0] = tempmv1000[0];
calculateMvCoeff tempmv999[0] = DIVISION(tempmv1003,tempmv1004);
resetMv tempmv1005[1];
resetMv tempmv1006[1];
setVector ve1007 = {nen[1,2,3]};
setVector ve1008 = {nen[1,2,3]};
dotVectors tempmv1006[0] = <ve1007,ve1008>;
resetMv tempmv1009[1];
setMv tempmv1009[0] = nen[3];
resetMv tempmv1010[1];
setMv tempmv1010[0] = tempmv1006[0];
calculateMvCoeff tempmv1005[0] = DIVISION(tempmv1009,tempmv1010);
resetMv tempmv1011[1];
resetMv tempmv1012[1];
setVector ve1013 = {nen[1,2,3]};
setVector ve1014 = {nen[1,2,3]};
dotVectors tempmv1012[0] = <ve1013,ve1014>;
resetMv tempmv1015[1];
setMv tempmv1015[0] = nen[2];
resetMv tempmv1016[1];
setMv tempmv1016[0] = tempmv1012[0];
calculateMvCoeff tempmv1011[0] = DIVISION(tempmv1015,tempmv1016);
resetMv tempmv1017[1];
resetMv tempmv1018[1];
setVector ve1019 = {nen[1,2,3]};
setVector ve1020 = {nen[1,2,3]};
dotVectors tempmv1018[0] = <ve1019,ve1020>;
resetMv tempmv1021[1];
setMv tempmv1021[0] = nen[1];
resetMv tempmv1022[1];
setMv tempmv1022[0] = tempmv1018[0];
calculateMvCoeff tempmv1017[0] = DIVISION(tempmv1021,tempmv1022);
setVector ve1023 = {len[-23,24,-25,31]};
setVector ve1024 = {tempmv999[0],tempmv1005[0],tempmv1011[0],tempmv1017[0]};
dotVectors rc1[30] = <ve1023,ve1024>;

//rc1[31] = (((-(len[27] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (len[28] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[29] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (len[30] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv tempmv1025[1];
resetMv tempmv1026[1];
setVector ve1027 = {nen[1,2,3]};
setVector ve1028 = {nen[1,2,3]};
dotVectors tempmv1026[0] = <ve1027,ve1028>;
resetMv tempmv1029[1];
setMv tempmv1029[0] = nen[4];
resetMv tempmv1030[1];
setMv tempmv1030[0] = tempmv1026[0];
calculateMvCoeff tempmv1025[0] = DIVISION(tempmv1029,tempmv1030);
resetMv tempmv1031[1];
resetMv tempmv1032[1];
setVector ve1033 = {nen[1,2,3]};
setVector ve1034 = {nen[1,2,3]};
dotVectors tempmv1032[0] = <ve1033,ve1034>;
resetMv tempmv1035[1];
setMv tempmv1035[0] = nen[3];
resetMv tempmv1036[1];
setMv tempmv1036[0] = tempmv1032[0];
calculateMvCoeff tempmv1031[0] = DIVISION(tempmv1035,tempmv1036);
resetMv tempmv1037[1];
resetMv tempmv1038[1];
setVector ve1039 = {nen[1,2,3]};
setVector ve1040 = {nen[1,2,3]};
dotVectors tempmv1038[0] = <ve1039,ve1040>;
resetMv tempmv1041[1];
setMv tempmv1041[0] = nen[2];
resetMv tempmv1042[1];
setMv tempmv1042[0] = tempmv1038[0];
calculateMvCoeff tempmv1037[0] = DIVISION(tempmv1041,tempmv1042);
resetMv tempmv1043[1];
resetMv tempmv1044[1];
setVector ve1045 = {nen[1,2,3]};
setVector ve1046 = {nen[1,2,3]};
dotVectors tempmv1044[0] = <ve1045,ve1046>;
resetMv tempmv1047[1];
setMv tempmv1047[0] = nen[1];
resetMv tempmv1048[1];
setMv tempmv1048[0] = tempmv1044[0];
calculateMvCoeff tempmv1043[0] = DIVISION(tempmv1047,tempmv1048);
setVector ve1049 = {len[-27,28,-29,30]};
setVector ve1050 = {tempmv1025[0],tempmv1031[0],tempmv1037[0],tempmv1043[0]};
dotVectors rc1[31] = <ve1049,ve1050>;

//rc1N[1] = ((((((((((((((((-(rc1[0])) * ((-(rc1[9])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))) + ((-(rc1[1])) * ((-(rc1[5])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + (-((-(rc1[2])) * (rc1[18] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[3])) * (rc1[20] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + ((-(rc1[5])) * (rc1[21] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[6])) * ((-(rc1[12])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[7])) * ((-(rc1[14])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + (-((-(rc1[9])) * ((-(rc1[15])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[10])) * (rc1[27] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + ((-(rc1[12])) * (rc1[28] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[14])) * (rc1[29] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + (-((-(rc1[16])) * (rc1[23] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + ((-(rc1[18])) * (rc1[24] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[20])) * (rc1[25] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + (-((-(rc1[23])) * ((-(rc1[31])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + ((-(rc1[27])) * (rc1[30] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))
resetMv rc1N[32];
resetMv tempmv1051[1];
resetMv tempmv1052[1];
setVector ve1053 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1054 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1052[0] = <ve1053,ve1054>;
resetMv tempmv1055[1];
setMv tempmv1055[0] = rc1[-9];
resetMv tempmv1056[1];
setMv tempmv1056[0] = tempmv1052[0];
calculateMvCoeff tempmv1051[0] = DIVISION(tempmv1055,tempmv1056);
resetMv tempmv1057[1];
resetMv tempmv1058[1];
setVector ve1059 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1060 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1058[0] = <ve1059,ve1060>;
resetMv tempmv1061[1];
setMv tempmv1061[0] = rc1[-5];
resetMv tempmv1062[1];
setMv tempmv1062[0] = tempmv1058[0];
calculateMvCoeff tempmv1057[0] = DIVISION(tempmv1061,tempmv1062);
resetMv tempmv1063[1];
resetMv tempmv1064[1];
setVector ve1065 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1066 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1064[0] = <ve1065,ve1066>;
resetMv tempmv1067[1];
setMv tempmv1067[0] = rc1[18];
resetMv tempmv1068[1];
setMv tempmv1068[0] = tempmv1064[0];
calculateMvCoeff tempmv1063[0] = DIVISION(tempmv1067,tempmv1068);
resetMv tempmv1069[1];
resetMv tempmv1070[1];
setVector ve1071 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1072 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1070[0] = <ve1071,ve1072>;
resetMv tempmv1073[1];
setMv tempmv1073[0] = rc1[20];
resetMv tempmv1074[1];
setMv tempmv1074[0] = tempmv1070[0];
calculateMvCoeff tempmv1069[0] = DIVISION(tempmv1073,tempmv1074);
resetMv tempmv1075[1];
resetMv tempmv1076[1];
setVector ve1077 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1078 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1076[0] = <ve1077,ve1078>;
resetMv tempmv1079[1];
setMv tempmv1079[0] = rc1[21];
resetMv tempmv1080[1];
setMv tempmv1080[0] = tempmv1076[0];
calculateMvCoeff tempmv1075[0] = DIVISION(tempmv1079,tempmv1080);
resetMv tempmv1081[1];
resetMv tempmv1082[1];
setVector ve1083 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1084 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1082[0] = <ve1083,ve1084>;
resetMv tempmv1085[1];
setMv tempmv1085[0] = rc1[-12];
resetMv tempmv1086[1];
setMv tempmv1086[0] = tempmv1082[0];
calculateMvCoeff tempmv1081[0] = DIVISION(tempmv1085,tempmv1086);
resetMv tempmv1087[1];
resetMv tempmv1088[1];
setVector ve1089 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1090 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1088[0] = <ve1089,ve1090>;
resetMv tempmv1091[1];
setMv tempmv1091[0] = rc1[-14];
resetMv tempmv1092[1];
setMv tempmv1092[0] = tempmv1088[0];
calculateMvCoeff tempmv1087[0] = DIVISION(tempmv1091,tempmv1092);
resetMv tempmv1093[1];
resetMv tempmv1094[1];
setVector ve1095 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1096 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1094[0] = <ve1095,ve1096>;
resetMv tempmv1097[1];
setMv tempmv1097[0] = rc1[-15];
resetMv tempmv1098[1];
setMv tempmv1098[0] = tempmv1094[0];
calculateMvCoeff tempmv1093[0] = DIVISION(tempmv1097,tempmv1098);
resetMv tempmv1099[1];
resetMv tempmv1100[1];
setVector ve1101 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1102 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1100[0] = <ve1101,ve1102>;
resetMv tempmv1103[1];
setMv tempmv1103[0] = rc1[27];
resetMv tempmv1104[1];
setMv tempmv1104[0] = tempmv1100[0];
calculateMvCoeff tempmv1099[0] = DIVISION(tempmv1103,tempmv1104);
resetMv tempmv1105[1];
resetMv tempmv1106[1];
setVector ve1107 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1108 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1106[0] = <ve1107,ve1108>;
resetMv tempmv1109[1];
setMv tempmv1109[0] = rc1[28];
resetMv tempmv1110[1];
setMv tempmv1110[0] = tempmv1106[0];
calculateMvCoeff tempmv1105[0] = DIVISION(tempmv1109,tempmv1110);
resetMv tempmv1111[1];
resetMv tempmv1112[1];
setVector ve1113 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1114 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1112[0] = <ve1113,ve1114>;
resetMv tempmv1115[1];
setMv tempmv1115[0] = rc1[29];
resetMv tempmv1116[1];
setMv tempmv1116[0] = tempmv1112[0];
calculateMvCoeff tempmv1111[0] = DIVISION(tempmv1115,tempmv1116);
resetMv tempmv1117[1];
resetMv tempmv1118[1];
setVector ve1119 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1120 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1118[0] = <ve1119,ve1120>;
resetMv tempmv1121[1];
setMv tempmv1121[0] = rc1[23];
resetMv tempmv1122[1];
setMv tempmv1122[0] = tempmv1118[0];
calculateMvCoeff tempmv1117[0] = DIVISION(tempmv1121,tempmv1122);
resetMv tempmv1123[1];
resetMv tempmv1124[1];
setVector ve1125 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1126 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1124[0] = <ve1125,ve1126>;
resetMv tempmv1127[1];
setMv tempmv1127[0] = rc1[24];
resetMv tempmv1128[1];
setMv tempmv1128[0] = tempmv1124[0];
calculateMvCoeff tempmv1123[0] = DIVISION(tempmv1127,tempmv1128);
resetMv tempmv1129[1];
resetMv tempmv1130[1];
setVector ve1131 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1132 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1130[0] = <ve1131,ve1132>;
resetMv tempmv1133[1];
setMv tempmv1133[0] = rc1[25];
resetMv tempmv1134[1];
setMv tempmv1134[0] = tempmv1130[0];
calculateMvCoeff tempmv1129[0] = DIVISION(tempmv1133,tempmv1134);
resetMv tempmv1135[1];
resetMv tempmv1136[1];
setVector ve1137 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1138 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1136[0] = <ve1137,ve1138>;
resetMv tempmv1139[1];
setMv tempmv1139[0] = rc1[-31];
resetMv tempmv1140[1];
setMv tempmv1140[0] = tempmv1136[0];
calculateMvCoeff tempmv1135[0] = DIVISION(tempmv1139,tempmv1140);
resetMv tempmv1141[1];
resetMv tempmv1142[1];
setVector ve1143 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1144 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1142[0] = <ve1143,ve1144>;
resetMv tempmv1145[1];
setMv tempmv1145[0] = rc1[30];
resetMv tempmv1146[1];
setMv tempmv1146[0] = tempmv1142[0];
calculateMvCoeff tempmv1141[0] = DIVISION(tempmv1145,tempmv1146);
setVector ve1147 = {rc1[-0,-1,2,3,-5,-6,-7,9,10,-12,-14,16,-18,-20,23,-27]};
setVector ve1148 = {tempmv1051[0],tempmv1057[0],tempmv1063[0],tempmv1069[0],tempmv1075[0],tempmv1081[0],tempmv1087[0],tempmv1093[0],tempmv1099[0],tempmv1105[0],tempmv1111[0],tempmv1117[0],tempmv1123[0],tempmv1129[0],tempmv1135[0],tempmv1141[0]};
dotVectors rc1N[1] = <ve1147,ve1148>;

//rc1N[2] = ((((((((((((((((-(rc1[0])) * ((-(rc1[12])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))) + ((-(rc1[1])) * (rc1[18] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[2])) * ((-(rc1[5])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + (-((-(rc1[3])) * (rc1[23] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + ((-(rc1[5])) * (rc1[24] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + (-((-(rc1[6])) * ((-(rc1[9])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + ((-(rc1[7])) * (rc1[27] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + (-((-(rc1[9])) * (rc1[28] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + ((-(rc1[10])) * ((-(rc1[14])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + (-((-(rc1[12])) * ((-(rc1[15])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + ((-(rc1[14])) * (rc1[30] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[16])) * (rc1[20] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + (-((-(rc1[18])) * (rc1[21] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + ((-(rc1[20])) * ((-(rc1[31])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[23])) * (rc1[25] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + (-((-(rc1[27])) * (rc1[29] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))
resetMv tempmv1149[1];
resetMv tempmv1150[1];
setVector ve1151 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1152 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1150[0] = <ve1151,ve1152>;
resetMv tempmv1153[1];
setMv tempmv1153[0] = rc1[-12];
resetMv tempmv1154[1];
setMv tempmv1154[0] = tempmv1150[0];
calculateMvCoeff tempmv1149[0] = DIVISION(tempmv1153,tempmv1154);
resetMv tempmv1155[1];
resetMv tempmv1156[1];
setVector ve1157 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1158 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1156[0] = <ve1157,ve1158>;
resetMv tempmv1159[1];
setMv tempmv1159[0] = rc1[18];
resetMv tempmv1160[1];
setMv tempmv1160[0] = tempmv1156[0];
calculateMvCoeff tempmv1155[0] = DIVISION(tempmv1159,tempmv1160);
resetMv tempmv1161[1];
resetMv tempmv1162[1];
setVector ve1163 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1164 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1162[0] = <ve1163,ve1164>;
resetMv tempmv1165[1];
setMv tempmv1165[0] = rc1[-5];
resetMv tempmv1166[1];
setMv tempmv1166[0] = tempmv1162[0];
calculateMvCoeff tempmv1161[0] = DIVISION(tempmv1165,tempmv1166);
resetMv tempmv1167[1];
resetMv tempmv1168[1];
setVector ve1169 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1170 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1168[0] = <ve1169,ve1170>;
resetMv tempmv1171[1];
setMv tempmv1171[0] = rc1[23];
resetMv tempmv1172[1];
setMv tempmv1172[0] = tempmv1168[0];
calculateMvCoeff tempmv1167[0] = DIVISION(tempmv1171,tempmv1172);
resetMv tempmv1173[1];
resetMv tempmv1174[1];
setVector ve1175 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1176 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1174[0] = <ve1175,ve1176>;
resetMv tempmv1177[1];
setMv tempmv1177[0] = rc1[24];
resetMv tempmv1178[1];
setMv tempmv1178[0] = tempmv1174[0];
calculateMvCoeff tempmv1173[0] = DIVISION(tempmv1177,tempmv1178);
resetMv tempmv1179[1];
resetMv tempmv1180[1];
setVector ve1181 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1182 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1180[0] = <ve1181,ve1182>;
resetMv tempmv1183[1];
setMv tempmv1183[0] = rc1[-9];
resetMv tempmv1184[1];
setMv tempmv1184[0] = tempmv1180[0];
calculateMvCoeff tempmv1179[0] = DIVISION(tempmv1183,tempmv1184);
resetMv tempmv1185[1];
resetMv tempmv1186[1];
setVector ve1187 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1188 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1186[0] = <ve1187,ve1188>;
resetMv tempmv1189[1];
setMv tempmv1189[0] = rc1[27];
resetMv tempmv1190[1];
setMv tempmv1190[0] = tempmv1186[0];
calculateMvCoeff tempmv1185[0] = DIVISION(tempmv1189,tempmv1190);
resetMv tempmv1191[1];
resetMv tempmv1192[1];
setVector ve1193 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1194 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1192[0] = <ve1193,ve1194>;
resetMv tempmv1195[1];
setMv tempmv1195[0] = rc1[28];
resetMv tempmv1196[1];
setMv tempmv1196[0] = tempmv1192[0];
calculateMvCoeff tempmv1191[0] = DIVISION(tempmv1195,tempmv1196);
resetMv tempmv1197[1];
resetMv tempmv1198[1];
setVector ve1199 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1200 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1198[0] = <ve1199,ve1200>;
resetMv tempmv1201[1];
setMv tempmv1201[0] = rc1[-14];
resetMv tempmv1202[1];
setMv tempmv1202[0] = tempmv1198[0];
calculateMvCoeff tempmv1197[0] = DIVISION(tempmv1201,tempmv1202);
resetMv tempmv1203[1];
resetMv tempmv1204[1];
setVector ve1205 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1206 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1204[0] = <ve1205,ve1206>;
resetMv tempmv1207[1];
setMv tempmv1207[0] = rc1[-15];
resetMv tempmv1208[1];
setMv tempmv1208[0] = tempmv1204[0];
calculateMvCoeff tempmv1203[0] = DIVISION(tempmv1207,tempmv1208);
resetMv tempmv1209[1];
resetMv tempmv1210[1];
setVector ve1211 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1212 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1210[0] = <ve1211,ve1212>;
resetMv tempmv1213[1];
setMv tempmv1213[0] = rc1[30];
resetMv tempmv1214[1];
setMv tempmv1214[0] = tempmv1210[0];
calculateMvCoeff tempmv1209[0] = DIVISION(tempmv1213,tempmv1214);
resetMv tempmv1215[1];
resetMv tempmv1216[1];
setVector ve1217 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1218 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1216[0] = <ve1217,ve1218>;
resetMv tempmv1219[1];
setMv tempmv1219[0] = rc1[20];
resetMv tempmv1220[1];
setMv tempmv1220[0] = tempmv1216[0];
calculateMvCoeff tempmv1215[0] = DIVISION(tempmv1219,tempmv1220);
resetMv tempmv1221[1];
resetMv tempmv1222[1];
setVector ve1223 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1224 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1222[0] = <ve1223,ve1224>;
resetMv tempmv1225[1];
setMv tempmv1225[0] = rc1[21];
resetMv tempmv1226[1];
setMv tempmv1226[0] = tempmv1222[0];
calculateMvCoeff tempmv1221[0] = DIVISION(tempmv1225,tempmv1226);
resetMv tempmv1227[1];
resetMv tempmv1228[1];
setVector ve1229 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1230 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1228[0] = <ve1229,ve1230>;
resetMv tempmv1231[1];
setMv tempmv1231[0] = rc1[-31];
resetMv tempmv1232[1];
setMv tempmv1232[0] = tempmv1228[0];
calculateMvCoeff tempmv1227[0] = DIVISION(tempmv1231,tempmv1232);
resetMv tempmv1233[1];
resetMv tempmv1234[1];
setVector ve1235 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1236 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1234[0] = <ve1235,ve1236>;
resetMv tempmv1237[1];
setMv tempmv1237[0] = rc1[25];
resetMv tempmv1238[1];
setMv tempmv1238[0] = tempmv1234[0];
calculateMvCoeff tempmv1233[0] = DIVISION(tempmv1237,tempmv1238);
resetMv tempmv1239[1];
resetMv tempmv1240[1];
setVector ve1241 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1242 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1240[0] = <ve1241,ve1242>;
resetMv tempmv1243[1];
setMv tempmv1243[0] = rc1[29];
resetMv tempmv1244[1];
setMv tempmv1244[0] = tempmv1240[0];
calculateMvCoeff tempmv1239[0] = DIVISION(tempmv1243,tempmv1244);
setVector ve1245 = {rc1[-0,-1,-2,3,-5,6,-7,9,-10,12,-14,-16,18,-20,-23,27]};
setVector ve1246 = {tempmv1149[0],tempmv1155[0],tempmv1161[0],tempmv1167[0],tempmv1173[0],tempmv1179[0],tempmv1185[0],tempmv1191[0],tempmv1197[0],tempmv1203[0],tempmv1209[0],tempmv1215[0],tempmv1221[0],tempmv1227[0],tempmv1233[0],tempmv1239[0]};
dotVectors rc1N[2] = <ve1245,ve1246>;

//rc1N[3] = ((((((((((((((((-(rc1[0])) * ((-(rc1[14])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))) + ((-(rc1[1])) * (rc1[20] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[2])) * (rc1[23] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[3])) * ((-(rc1[5])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[5])) * (rc1[25] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + (-((-(rc1[6])) * (rc1[27] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[7])) * ((-(rc1[9])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[9])) * (rc1[29] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[10])) * ((-(rc1[12])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[12])) * (rc1[30] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[14])) * ((-(rc1[15])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[16])) * (rc1[18] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[18])) * ((-(rc1[31])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[20])) * (rc1[21] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[23])) * (rc1[24] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + ((-(rc1[27])) * (rc1[28] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))
resetMv tempmv1247[1];
resetMv tempmv1248[1];
setVector ve1249 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1250 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1248[0] = <ve1249,ve1250>;
resetMv tempmv1251[1];
setMv tempmv1251[0] = rc1[-14];
resetMv tempmv1252[1];
setMv tempmv1252[0] = tempmv1248[0];
calculateMvCoeff tempmv1247[0] = DIVISION(tempmv1251,tempmv1252);
resetMv tempmv1253[1];
resetMv tempmv1254[1];
setVector ve1255 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1256 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1254[0] = <ve1255,ve1256>;
resetMv tempmv1257[1];
setMv tempmv1257[0] = rc1[20];
resetMv tempmv1258[1];
setMv tempmv1258[0] = tempmv1254[0];
calculateMvCoeff tempmv1253[0] = DIVISION(tempmv1257,tempmv1258);
resetMv tempmv1259[1];
resetMv tempmv1260[1];
setVector ve1261 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1262 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1260[0] = <ve1261,ve1262>;
resetMv tempmv1263[1];
setMv tempmv1263[0] = rc1[23];
resetMv tempmv1264[1];
setMv tempmv1264[0] = tempmv1260[0];
calculateMvCoeff tempmv1259[0] = DIVISION(tempmv1263,tempmv1264);
resetMv tempmv1265[1];
resetMv tempmv1266[1];
setVector ve1267 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1268 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1266[0] = <ve1267,ve1268>;
resetMv tempmv1269[1];
setMv tempmv1269[0] = rc1[-5];
resetMv tempmv1270[1];
setMv tempmv1270[0] = tempmv1266[0];
calculateMvCoeff tempmv1265[0] = DIVISION(tempmv1269,tempmv1270);
resetMv tempmv1271[1];
resetMv tempmv1272[1];
setVector ve1273 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1274 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1272[0] = <ve1273,ve1274>;
resetMv tempmv1275[1];
setMv tempmv1275[0] = rc1[25];
resetMv tempmv1276[1];
setMv tempmv1276[0] = tempmv1272[0];
calculateMvCoeff tempmv1271[0] = DIVISION(tempmv1275,tempmv1276);
resetMv tempmv1277[1];
resetMv tempmv1278[1];
setVector ve1279 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1280 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1278[0] = <ve1279,ve1280>;
resetMv tempmv1281[1];
setMv tempmv1281[0] = rc1[27];
resetMv tempmv1282[1];
setMv tempmv1282[0] = tempmv1278[0];
calculateMvCoeff tempmv1277[0] = DIVISION(tempmv1281,tempmv1282);
resetMv tempmv1283[1];
resetMv tempmv1284[1];
setVector ve1285 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1286 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1284[0] = <ve1285,ve1286>;
resetMv tempmv1287[1];
setMv tempmv1287[0] = rc1[-9];
resetMv tempmv1288[1];
setMv tempmv1288[0] = tempmv1284[0];
calculateMvCoeff tempmv1283[0] = DIVISION(tempmv1287,tempmv1288);
resetMv tempmv1289[1];
resetMv tempmv1290[1];
setVector ve1291 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1292 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1290[0] = <ve1291,ve1292>;
resetMv tempmv1293[1];
setMv tempmv1293[0] = rc1[29];
resetMv tempmv1294[1];
setMv tempmv1294[0] = tempmv1290[0];
calculateMvCoeff tempmv1289[0] = DIVISION(tempmv1293,tempmv1294);
resetMv tempmv1295[1];
resetMv tempmv1296[1];
setVector ve1297 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1298 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1296[0] = <ve1297,ve1298>;
resetMv tempmv1299[1];
setMv tempmv1299[0] = rc1[-12];
resetMv tempmv1300[1];
setMv tempmv1300[0] = tempmv1296[0];
calculateMvCoeff tempmv1295[0] = DIVISION(tempmv1299,tempmv1300);
resetMv tempmv1301[1];
resetMv tempmv1302[1];
setVector ve1303 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1304 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1302[0] = <ve1303,ve1304>;
resetMv tempmv1305[1];
setMv tempmv1305[0] = rc1[30];
resetMv tempmv1306[1];
setMv tempmv1306[0] = tempmv1302[0];
calculateMvCoeff tempmv1301[0] = DIVISION(tempmv1305,tempmv1306);
resetMv tempmv1307[1];
resetMv tempmv1308[1];
setVector ve1309 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1310 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1308[0] = <ve1309,ve1310>;
resetMv tempmv1311[1];
setMv tempmv1311[0] = rc1[-15];
resetMv tempmv1312[1];
setMv tempmv1312[0] = tempmv1308[0];
calculateMvCoeff tempmv1307[0] = DIVISION(tempmv1311,tempmv1312);
resetMv tempmv1313[1];
resetMv tempmv1314[1];
setVector ve1315 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1316 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1314[0] = <ve1315,ve1316>;
resetMv tempmv1317[1];
setMv tempmv1317[0] = rc1[18];
resetMv tempmv1318[1];
setMv tempmv1318[0] = tempmv1314[0];
calculateMvCoeff tempmv1313[0] = DIVISION(tempmv1317,tempmv1318);
resetMv tempmv1319[1];
resetMv tempmv1320[1];
setVector ve1321 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1322 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1320[0] = <ve1321,ve1322>;
resetMv tempmv1323[1];
setMv tempmv1323[0] = rc1[-31];
resetMv tempmv1324[1];
setMv tempmv1324[0] = tempmv1320[0];
calculateMvCoeff tempmv1319[0] = DIVISION(tempmv1323,tempmv1324);
resetMv tempmv1325[1];
resetMv tempmv1326[1];
setVector ve1327 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1328 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1326[0] = <ve1327,ve1328>;
resetMv tempmv1329[1];
setMv tempmv1329[0] = rc1[21];
resetMv tempmv1330[1];
setMv tempmv1330[0] = tempmv1326[0];
calculateMvCoeff tempmv1325[0] = DIVISION(tempmv1329,tempmv1330);
resetMv tempmv1331[1];
resetMv tempmv1332[1];
setVector ve1333 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1334 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1332[0] = <ve1333,ve1334>;
resetMv tempmv1335[1];
setMv tempmv1335[0] = rc1[24];
resetMv tempmv1336[1];
setMv tempmv1336[0] = tempmv1332[0];
calculateMvCoeff tempmv1331[0] = DIVISION(tempmv1335,tempmv1336);
resetMv tempmv1337[1];
resetMv tempmv1338[1];
setVector ve1339 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1340 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1338[0] = <ve1339,ve1340>;
resetMv tempmv1341[1];
setMv tempmv1341[0] = rc1[28];
resetMv tempmv1342[1];
setMv tempmv1342[0] = tempmv1338[0];
calculateMvCoeff tempmv1337[0] = DIVISION(tempmv1341,tempmv1342);
setVector ve1343 = {rc1[-0,-1,-2,-3,-5,6,7,9,10,12,14,16,18,20,23,-27]};
setVector ve1344 = {tempmv1247[0],tempmv1253[0],tempmv1259[0],tempmv1265[0],tempmv1271[0],tempmv1277[0],tempmv1283[0],tempmv1289[0],tempmv1295[0],tempmv1301[0],tempmv1307[0],tempmv1313[0],tempmv1319[0],tempmv1325[0],tempmv1331[0],tempmv1337[0]};
dotVectors rc1N[3] = <ve1343,ve1344>;

//rc1N[4] = ((((((((((((((((((((((((-(rc1[0])) * ((-(rc1[15])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))) + ((-(rc1[1])) * (rc1[21] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[2])) * (rc1[24] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[3])) * (rc1[25] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[4])) * ((-(rc1[5])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + (-((-(rc1[6])) * (rc1[28] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[7])) * (rc1[29] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[8])) * ((-(rc1[9])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[10])) * (rc1[30] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[11])) * ((-(rc1[12])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[13])) * ((-(rc1[14])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[15])) * ((-(rc1[15])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[16])) * ((-(rc1[31])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[17])) * (rc1[18] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[19])) * (rc1[20] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[21])) * (rc1[21] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[22])) * (rc1[23] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[24])) * (rc1[24] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[25])) * (rc1[25] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + ((-(rc1[26])) * (rc1[27] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[28])) * (rc1[28] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[29])) * (rc1[29] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[30])) * (rc1[30] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[31])) * ((-(rc1[31])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))
resetMv tempmv1345[1];
resetMv tempmv1346[1];
setVector ve1347 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1348 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1346[0] = <ve1347,ve1348>;
resetMv tempmv1349[1];
setMv tempmv1349[0] = rc1[-15];
resetMv tempmv1350[1];
setMv tempmv1350[0] = tempmv1346[0];
calculateMvCoeff tempmv1345[0] = DIVISION(tempmv1349,tempmv1350);
resetMv tempmv1351[1];
resetMv tempmv1352[1];
setVector ve1353 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1354 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1352[0] = <ve1353,ve1354>;
resetMv tempmv1355[1];
setMv tempmv1355[0] = rc1[21];
resetMv tempmv1356[1];
setMv tempmv1356[0] = tempmv1352[0];
calculateMvCoeff tempmv1351[0] = DIVISION(tempmv1355,tempmv1356);
resetMv tempmv1357[1];
resetMv tempmv1358[1];
setVector ve1359 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1360 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1358[0] = <ve1359,ve1360>;
resetMv tempmv1361[1];
setMv tempmv1361[0] = rc1[24];
resetMv tempmv1362[1];
setMv tempmv1362[0] = tempmv1358[0];
calculateMvCoeff tempmv1357[0] = DIVISION(tempmv1361,tempmv1362);
resetMv tempmv1363[1];
resetMv tempmv1364[1];
setVector ve1365 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1366 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1364[0] = <ve1365,ve1366>;
resetMv tempmv1367[1];
setMv tempmv1367[0] = rc1[25];
resetMv tempmv1368[1];
setMv tempmv1368[0] = tempmv1364[0];
calculateMvCoeff tempmv1363[0] = DIVISION(tempmv1367,tempmv1368);
resetMv tempmv1369[1];
resetMv tempmv1370[1];
setVector ve1371 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1372 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1370[0] = <ve1371,ve1372>;
resetMv tempmv1373[1];
setMv tempmv1373[0] = rc1[-5];
resetMv tempmv1374[1];
setMv tempmv1374[0] = tempmv1370[0];
calculateMvCoeff tempmv1369[0] = DIVISION(tempmv1373,tempmv1374);
resetMv tempmv1375[1];
resetMv tempmv1376[1];
setVector ve1377 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1378 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1376[0] = <ve1377,ve1378>;
resetMv tempmv1379[1];
setMv tempmv1379[0] = rc1[28];
resetMv tempmv1380[1];
setMv tempmv1380[0] = tempmv1376[0];
calculateMvCoeff tempmv1375[0] = DIVISION(tempmv1379,tempmv1380);
resetMv tempmv1381[1];
resetMv tempmv1382[1];
setVector ve1383 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1384 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1382[0] = <ve1383,ve1384>;
resetMv tempmv1385[1];
setMv tempmv1385[0] = rc1[29];
resetMv tempmv1386[1];
setMv tempmv1386[0] = tempmv1382[0];
calculateMvCoeff tempmv1381[0] = DIVISION(tempmv1385,tempmv1386);
resetMv tempmv1387[1];
resetMv tempmv1388[1];
setVector ve1389 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1390 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1388[0] = <ve1389,ve1390>;
resetMv tempmv1391[1];
setMv tempmv1391[0] = rc1[-9];
resetMv tempmv1392[1];
setMv tempmv1392[0] = tempmv1388[0];
calculateMvCoeff tempmv1387[0] = DIVISION(tempmv1391,tempmv1392);
resetMv tempmv1393[1];
resetMv tempmv1394[1];
setVector ve1395 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1396 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1394[0] = <ve1395,ve1396>;
resetMv tempmv1397[1];
setMv tempmv1397[0] = rc1[30];
resetMv tempmv1398[1];
setMv tempmv1398[0] = tempmv1394[0];
calculateMvCoeff tempmv1393[0] = DIVISION(tempmv1397,tempmv1398);
resetMv tempmv1399[1];
resetMv tempmv1400[1];
setVector ve1401 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1402 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1400[0] = <ve1401,ve1402>;
resetMv tempmv1403[1];
setMv tempmv1403[0] = rc1[-12];
resetMv tempmv1404[1];
setMv tempmv1404[0] = tempmv1400[0];
calculateMvCoeff tempmv1399[0] = DIVISION(tempmv1403,tempmv1404);
resetMv tempmv1405[1];
resetMv tempmv1406[1];
setVector ve1407 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1408 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1406[0] = <ve1407,ve1408>;
resetMv tempmv1409[1];
setMv tempmv1409[0] = rc1[-14];
resetMv tempmv1410[1];
setMv tempmv1410[0] = tempmv1406[0];
calculateMvCoeff tempmv1405[0] = DIVISION(tempmv1409,tempmv1410);
resetMv tempmv1411[1];
resetMv tempmv1412[1];
setVector ve1413 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1414 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1412[0] = <ve1413,ve1414>;
resetMv tempmv1415[1];
setMv tempmv1415[0] = rc1[-15];
resetMv tempmv1416[1];
setMv tempmv1416[0] = tempmv1412[0];
calculateMvCoeff tempmv1411[0] = DIVISION(tempmv1415,tempmv1416);
resetMv tempmv1417[1];
resetMv tempmv1418[1];
setVector ve1419 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1420 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1418[0] = <ve1419,ve1420>;
resetMv tempmv1421[1];
setMv tempmv1421[0] = rc1[-31];
resetMv tempmv1422[1];
setMv tempmv1422[0] = tempmv1418[0];
calculateMvCoeff tempmv1417[0] = DIVISION(tempmv1421,tempmv1422);
resetMv tempmv1423[1];
resetMv tempmv1424[1];
setVector ve1425 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1426 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1424[0] = <ve1425,ve1426>;
resetMv tempmv1427[1];
setMv tempmv1427[0] = rc1[18];
resetMv tempmv1428[1];
setMv tempmv1428[0] = tempmv1424[0];
calculateMvCoeff tempmv1423[0] = DIVISION(tempmv1427,tempmv1428);
resetMv tempmv1429[1];
resetMv tempmv1430[1];
setVector ve1431 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1432 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1430[0] = <ve1431,ve1432>;
resetMv tempmv1433[1];
setMv tempmv1433[0] = rc1[20];
resetMv tempmv1434[1];
setMv tempmv1434[0] = tempmv1430[0];
calculateMvCoeff tempmv1429[0] = DIVISION(tempmv1433,tempmv1434);
resetMv tempmv1435[1];
resetMv tempmv1436[1];
setVector ve1437 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1438 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1436[0] = <ve1437,ve1438>;
resetMv tempmv1439[1];
setMv tempmv1439[0] = rc1[21];
resetMv tempmv1440[1];
setMv tempmv1440[0] = tempmv1436[0];
calculateMvCoeff tempmv1435[0] = DIVISION(tempmv1439,tempmv1440);
resetMv tempmv1441[1];
resetMv tempmv1442[1];
setVector ve1443 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1444 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1442[0] = <ve1443,ve1444>;
resetMv tempmv1445[1];
setMv tempmv1445[0] = rc1[23];
resetMv tempmv1446[1];
setMv tempmv1446[0] = tempmv1442[0];
calculateMvCoeff tempmv1441[0] = DIVISION(tempmv1445,tempmv1446);
resetMv tempmv1447[1];
resetMv tempmv1448[1];
setVector ve1449 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1450 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1448[0] = <ve1449,ve1450>;
resetMv tempmv1451[1];
setMv tempmv1451[0] = rc1[24];
resetMv tempmv1452[1];
setMv tempmv1452[0] = tempmv1448[0];
calculateMvCoeff tempmv1447[0] = DIVISION(tempmv1451,tempmv1452);
resetMv tempmv1453[1];
resetMv tempmv1454[1];
setVector ve1455 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1456 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1454[0] = <ve1455,ve1456>;
resetMv tempmv1457[1];
setMv tempmv1457[0] = rc1[25];
resetMv tempmv1458[1];
setMv tempmv1458[0] = tempmv1454[0];
calculateMvCoeff tempmv1453[0] = DIVISION(tempmv1457,tempmv1458);
resetMv tempmv1459[1];
resetMv tempmv1460[1];
setVector ve1461 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1462 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1460[0] = <ve1461,ve1462>;
resetMv tempmv1463[1];
setMv tempmv1463[0] = rc1[27];
resetMv tempmv1464[1];
setMv tempmv1464[0] = tempmv1460[0];
calculateMvCoeff tempmv1459[0] = DIVISION(tempmv1463,tempmv1464);
resetMv tempmv1465[1];
resetMv tempmv1466[1];
setVector ve1467 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1468 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1466[0] = <ve1467,ve1468>;
resetMv tempmv1469[1];
setMv tempmv1469[0] = rc1[28];
resetMv tempmv1470[1];
setMv tempmv1470[0] = tempmv1466[0];
calculateMvCoeff tempmv1465[0] = DIVISION(tempmv1469,tempmv1470);
resetMv tempmv1471[1];
resetMv tempmv1472[1];
setVector ve1473 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1474 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1472[0] = <ve1473,ve1474>;
resetMv tempmv1475[1];
setMv tempmv1475[0] = rc1[29];
resetMv tempmv1476[1];
setMv tempmv1476[0] = tempmv1472[0];
calculateMvCoeff tempmv1471[0] = DIVISION(tempmv1475,tempmv1476);
resetMv tempmv1477[1];
resetMv tempmv1478[1];
setVector ve1479 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1480 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1478[0] = <ve1479,ve1480>;
resetMv tempmv1481[1];
setMv tempmv1481[0] = rc1[30];
resetMv tempmv1482[1];
setMv tempmv1482[0] = tempmv1478[0];
calculateMvCoeff tempmv1477[0] = DIVISION(tempmv1481,tempmv1482);
resetMv tempmv1483[1];
resetMv tempmv1484[1];
setVector ve1485 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1486 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1484[0] = <ve1485,ve1486>;
resetMv tempmv1487[1];
setMv tempmv1487[0] = rc1[-31];
resetMv tempmv1488[1];
setMv tempmv1488[0] = tempmv1484[0];
calculateMvCoeff tempmv1483[0] = DIVISION(tempmv1487,tempmv1488);
setVector ve1489 = {rc1[-0,-1,-2,-3,-4,6,7,8,10,11,13,15,16,17,19,21,22,24,25,-26,-28,-29,-30,-31]};
setVector ve1490 = {tempmv1345[0],tempmv1351[0],tempmv1357[0],tempmv1363[0],tempmv1369[0],tempmv1375[0],tempmv1381[0],tempmv1387[0],tempmv1393[0],tempmv1399[0],tempmv1405[0],tempmv1411[0],tempmv1417[0],tempmv1423[0],tempmv1429[0],tempmv1435[0],tempmv1441[0],tempmv1447[0],tempmv1453[0],tempmv1459[0],tempmv1465[0],tempmv1471[0],tempmv1477[0],tempmv1483[0]};
dotVectors rc1N[4] = <ve1489,ve1490>;

//rc1N[5] = ((((((((-(rc1[5])) * ((-(rc1[5])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))) + (-((-(rc1[9])) * ((-(rc1[9])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[12])) * ((-(rc1[12])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[14])) * ((-(rc1[14])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[18])) * (rc1[18] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[20])) * (rc1[20] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[23])) * (rc1[23] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + ((-(rc1[27])) * (rc1[27] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))
resetMv tempmv1491[1];
resetMv tempmv1492[1];
setVector ve1493 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1494 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1492[0] = <ve1493,ve1494>;
resetMv tempmv1495[1];
setMv tempmv1495[0] = rc1[-5];
resetMv tempmv1496[1];
setMv tempmv1496[0] = tempmv1492[0];
calculateMvCoeff tempmv1491[0] = DIVISION(tempmv1495,tempmv1496);
resetMv tempmv1497[1];
resetMv tempmv1498[1];
setVector ve1499 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1500 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1498[0] = <ve1499,ve1500>;
resetMv tempmv1501[1];
setMv tempmv1501[0] = rc1[-9];
resetMv tempmv1502[1];
setMv tempmv1502[0] = tempmv1498[0];
calculateMvCoeff tempmv1497[0] = DIVISION(tempmv1501,tempmv1502);
resetMv tempmv1503[1];
resetMv tempmv1504[1];
setVector ve1505 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1506 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1504[0] = <ve1505,ve1506>;
resetMv tempmv1507[1];
setMv tempmv1507[0] = rc1[-12];
resetMv tempmv1508[1];
setMv tempmv1508[0] = tempmv1504[0];
calculateMvCoeff tempmv1503[0] = DIVISION(tempmv1507,tempmv1508);
resetMv tempmv1509[1];
resetMv tempmv1510[1];
setVector ve1511 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1512 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1510[0] = <ve1511,ve1512>;
resetMv tempmv1513[1];
setMv tempmv1513[0] = rc1[-14];
resetMv tempmv1514[1];
setMv tempmv1514[0] = tempmv1510[0];
calculateMvCoeff tempmv1509[0] = DIVISION(tempmv1513,tempmv1514);
resetMv tempmv1515[1];
resetMv tempmv1516[1];
setVector ve1517 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1518 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1516[0] = <ve1517,ve1518>;
resetMv tempmv1519[1];
setMv tempmv1519[0] = rc1[18];
resetMv tempmv1520[1];
setMv tempmv1520[0] = tempmv1516[0];
calculateMvCoeff tempmv1515[0] = DIVISION(tempmv1519,tempmv1520);
resetMv tempmv1521[1];
resetMv tempmv1522[1];
setVector ve1523 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1524 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1522[0] = <ve1523,ve1524>;
resetMv tempmv1525[1];
setMv tempmv1525[0] = rc1[20];
resetMv tempmv1526[1];
setMv tempmv1526[0] = tempmv1522[0];
calculateMvCoeff tempmv1521[0] = DIVISION(tempmv1525,tempmv1526);
resetMv tempmv1527[1];
resetMv tempmv1528[1];
setVector ve1529 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1530 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1528[0] = <ve1529,ve1530>;
resetMv tempmv1531[1];
setMv tempmv1531[0] = rc1[23];
resetMv tempmv1532[1];
setMv tempmv1532[0] = tempmv1528[0];
calculateMvCoeff tempmv1527[0] = DIVISION(tempmv1531,tempmv1532);
resetMv tempmv1533[1];
resetMv tempmv1534[1];
setVector ve1535 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1536 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv1534[0] = <ve1535,ve1536>;
resetMv tempmv1537[1];
setMv tempmv1537[0] = rc1[27];
resetMv tempmv1538[1];
setMv tempmv1538[0] = tempmv1534[0];
calculateMvCoeff tempmv1533[0] = DIVISION(tempmv1537,tempmv1538);
setVector ve1539 = {rc1[-5,9,12,14,18,20,23,-27]};
setVector ve1540 = {tempmv1491[0],tempmv1497[0],tempmv1503[0],tempmv1509[0],tempmv1515[0],tempmv1521[0],tempmv1527[0],tempmv1533[0]};
dotVectors rc1N[5] = <ve1539,ve1540>;

//rc2[0] = ((((-(len[1])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + ((-(len[2])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((-(len[3])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[5])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv rc2[32];
resetMv tempmv1541[1];
resetMv tempmv1542[1];
setVector ve1543 = {nen[1,2,3]};
setVector ve1544 = {nen[1,2,3]};
dotVectors tempmv1542[0] = <ve1543,ve1544>;
resetMv tempmv1545[1];
setMv tempmv1545[0] = nen[1];
resetMv tempmv1546[1];
setMv tempmv1546[0] = tempmv1542[0];
calculateMvCoeff tempmv1541[0] = DIVISION(tempmv1545,tempmv1546);
resetMv tempmv1547[1];
resetMv tempmv1548[1];
setVector ve1549 = {nen[1,2,3]};
setVector ve1550 = {nen[1,2,3]};
dotVectors tempmv1548[0] = <ve1549,ve1550>;
resetMv tempmv1551[1];
setMv tempmv1551[0] = nen[2];
resetMv tempmv1552[1];
setMv tempmv1552[0] = tempmv1548[0];
calculateMvCoeff tempmv1547[0] = DIVISION(tempmv1551,tempmv1552);
resetMv tempmv1553[1];
resetMv tempmv1554[1];
setVector ve1555 = {nen[1,2,3]};
setVector ve1556 = {nen[1,2,3]};
dotVectors tempmv1554[0] = <ve1555,ve1556>;
resetMv tempmv1557[1];
setMv tempmv1557[0] = nen[3];
resetMv tempmv1558[1];
setMv tempmv1558[0] = tempmv1554[0];
calculateMvCoeff tempmv1553[0] = DIVISION(tempmv1557,tempmv1558);
resetMv tempmv1559[1];
resetMv tempmv1560[1];
setVector ve1561 = {nen[1,2,3]};
setVector ve1562 = {nen[1,2,3]};
dotVectors tempmv1560[0] = <ve1561,ve1562>;
resetMv tempmv1563[1];
setMv tempmv1563[0] = nen[4];
resetMv tempmv1564[1];
setMv tempmv1564[0] = tempmv1560[0];
calculateMvCoeff tempmv1559[0] = DIVISION(tempmv1563,tempmv1564);
setVector ve1565 = {len[-1,-2,-3,5]};
setVector ve1566 = {tempmv1541[0],tempmv1547[0],tempmv1553[0],tempmv1559[0]};
dotVectors rc2[0] = <ve1565,ve1566>;

//rc2[1] = ((((-(len[0])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + ((rcPpDual[6] - len[6]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((rcPpDual[7] - len[7]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((rcPpDual[9] - len[9]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv tempmv1567[1];
resetMv tempmv1568[1];
setVector ve1569 = {nen[1,2,3]};
setVector ve1570 = {nen[1,2,3]};
dotVectors tempmv1568[0] = <ve1569,ve1570>;
resetMv tempmv1571[1];
setMv tempmv1571[0] = nen[1];
resetMv tempmv1572[1];
setMv tempmv1572[0] = tempmv1568[0];
calculateMvCoeff tempmv1567[0] = DIVISION(tempmv1571,tempmv1572);
resetMv tempmv1573[1];
setVector ve1574 = {rcPpDual[6],len[-6]};
dotVectors tempmv1573[0] = <ve1574>;
resetMv tempmv1575[1];
resetMv tempmv1576[1];
setVector ve1577 = {nen[1,2,3]};
setVector ve1578 = {nen[1,2,3]};
dotVectors tempmv1576[0] = <ve1577,ve1578>;
resetMv tempmv1579[1];
setMv tempmv1579[0] = nen[2];
resetMv tempmv1580[1];
setMv tempmv1580[0] = tempmv1576[0];
calculateMvCoeff tempmv1575[0] = DIVISION(tempmv1579,tempmv1580);
resetMv tempmv1581[1];
setVector ve1582 = {rcPpDual[7],len[-7]};
dotVectors tempmv1581[0] = <ve1582>;
resetMv tempmv1583[1];
resetMv tempmv1584[1];
setVector ve1585 = {nen[1,2,3]};
setVector ve1586 = {nen[1,2,3]};
dotVectors tempmv1584[0] = <ve1585,ve1586>;
resetMv tempmv1587[1];
setMv tempmv1587[0] = nen[3];
resetMv tempmv1588[1];
setMv tempmv1588[0] = tempmv1584[0];
calculateMvCoeff tempmv1583[0] = DIVISION(tempmv1587,tempmv1588);
resetMv tempmv1589[1];
resetMv tempmv1590[1];
setVector ve1591 = {rcPpDual[9],len[-9]};
dotVectors tempmv1590[0] = <ve1591>;
setMv tempmv1589[0] = tempmv1590[-0];
resetMv tempmv1592[1];
resetMv tempmv1593[1];
setVector ve1594 = {nen[1,2,3]};
setVector ve1595 = {nen[1,2,3]};
dotVectors tempmv1593[0] = <ve1594,ve1595>;
resetMv tempmv1596[1];
setMv tempmv1596[0] = nen[4];
resetMv tempmv1597[1];
setMv tempmv1597[0] = tempmv1593[0];
calculateMvCoeff tempmv1592[0] = DIVISION(tempmv1596,tempmv1597);
setVector ve1598 = {len[-0],tempmv1573[0],tempmv1581[0],tempmv1589[0]};
setVector ve1599 = {tempmv1567[0],tempmv1575[0],tempmv1583[0],tempmv1592[0]};
dotVectors rc2[1] = <ve1598,ve1599>;

//rc2[2] = ((((-(len[0])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((rcPpDual[6] - len[6]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + ((rcPpDual[10] - len[10]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((rcPpDual[12] - len[12]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv tempmv1600[1];
resetMv tempmv1601[1];
setVector ve1602 = {nen[1,2,3]};
setVector ve1603 = {nen[1,2,3]};
dotVectors tempmv1601[0] = <ve1602,ve1603>;
resetMv tempmv1604[1];
setMv tempmv1604[0] = nen[2];
resetMv tempmv1605[1];
setMv tempmv1605[0] = tempmv1601[0];
calculateMvCoeff tempmv1600[0] = DIVISION(tempmv1604,tempmv1605);
resetMv tempmv1606[1];
resetMv tempmv1607[1];
setVector ve1608 = {rcPpDual[6],len[-6]};
dotVectors tempmv1607[0] = <ve1608>;
setMv tempmv1606[0] = tempmv1607[-0];
resetMv tempmv1609[1];
resetMv tempmv1610[1];
setVector ve1611 = {nen[1,2,3]};
setVector ve1612 = {nen[1,2,3]};
dotVectors tempmv1610[0] = <ve1611,ve1612>;
resetMv tempmv1613[1];
setMv tempmv1613[0] = nen[1];
resetMv tempmv1614[1];
setMv tempmv1614[0] = tempmv1610[0];
calculateMvCoeff tempmv1609[0] = DIVISION(tempmv1613,tempmv1614);
resetMv tempmv1615[1];
setVector ve1616 = {rcPpDual[10],len[-10]};
dotVectors tempmv1615[0] = <ve1616>;
resetMv tempmv1617[1];
resetMv tempmv1618[1];
setVector ve1619 = {nen[1,2,3]};
setVector ve1620 = {nen[1,2,3]};
dotVectors tempmv1618[0] = <ve1619,ve1620>;
resetMv tempmv1621[1];
setMv tempmv1621[0] = nen[3];
resetMv tempmv1622[1];
setMv tempmv1622[0] = tempmv1618[0];
calculateMvCoeff tempmv1617[0] = DIVISION(tempmv1621,tempmv1622);
resetMv tempmv1623[1];
resetMv tempmv1624[1];
setVector ve1625 = {rcPpDual[12],len[-12]};
dotVectors tempmv1624[0] = <ve1625>;
setMv tempmv1623[0] = tempmv1624[-0];
resetMv tempmv1626[1];
resetMv tempmv1627[1];
setVector ve1628 = {nen[1,2,3]};
setVector ve1629 = {nen[1,2,3]};
dotVectors tempmv1627[0] = <ve1628,ve1629>;
resetMv tempmv1630[1];
setMv tempmv1630[0] = nen[4];
resetMv tempmv1631[1];
setMv tempmv1631[0] = tempmv1627[0];
calculateMvCoeff tempmv1626[0] = DIVISION(tempmv1630,tempmv1631);
setVector ve1632 = {len[-0],tempmv1606[0],tempmv1615[0],tempmv1623[0]};
setVector ve1633 = {tempmv1600[0],tempmv1609[0],tempmv1617[0],tempmv1626[0]};
dotVectors rc2[2] = <ve1632,ve1633>;

//rc2[3] = ((((-(len[0])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((rcPpDual[7] - len[7]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((rcPpDual[10] - len[10]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((rcPpDual[14] - len[14]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv tempmv1634[1];
resetMv tempmv1635[1];
setVector ve1636 = {nen[1,2,3]};
setVector ve1637 = {nen[1,2,3]};
dotVectors tempmv1635[0] = <ve1636,ve1637>;
resetMv tempmv1638[1];
setMv tempmv1638[0] = nen[3];
resetMv tempmv1639[1];
setMv tempmv1639[0] = tempmv1635[0];
calculateMvCoeff tempmv1634[0] = DIVISION(tempmv1638,tempmv1639);
resetMv tempmv1640[1];
resetMv tempmv1641[1];
setVector ve1642 = {rcPpDual[7],len[-7]};
dotVectors tempmv1641[0] = <ve1642>;
setMv tempmv1640[0] = tempmv1641[-0];
resetMv tempmv1643[1];
resetMv tempmv1644[1];
setVector ve1645 = {nen[1,2,3]};
setVector ve1646 = {nen[1,2,3]};
dotVectors tempmv1644[0] = <ve1645,ve1646>;
resetMv tempmv1647[1];
setMv tempmv1647[0] = nen[1];
resetMv tempmv1648[1];
setMv tempmv1648[0] = tempmv1644[0];
calculateMvCoeff tempmv1643[0] = DIVISION(tempmv1647,tempmv1648);
resetMv tempmv1649[1];
resetMv tempmv1650[1];
setVector ve1651 = {rcPpDual[10],len[-10]};
dotVectors tempmv1650[0] = <ve1651>;
setMv tempmv1649[0] = tempmv1650[-0];
resetMv tempmv1652[1];
resetMv tempmv1653[1];
setVector ve1654 = {nen[1,2,3]};
setVector ve1655 = {nen[1,2,3]};
dotVectors tempmv1653[0] = <ve1654,ve1655>;
resetMv tempmv1656[1];
setMv tempmv1656[0] = nen[2];
resetMv tempmv1657[1];
setMv tempmv1657[0] = tempmv1653[0];
calculateMvCoeff tempmv1652[0] = DIVISION(tempmv1656,tempmv1657);
resetMv tempmv1658[1];
resetMv tempmv1659[1];
setVector ve1660 = {rcPpDual[14],len[-14]};
dotVectors tempmv1659[0] = <ve1660>;
setMv tempmv1658[0] = tempmv1659[-0];
resetMv tempmv1661[1];
resetMv tempmv1662[1];
setVector ve1663 = {nen[1,2,3]};
setVector ve1664 = {nen[1,2,3]};
dotVectors tempmv1662[0] = <ve1663,ve1664>;
resetMv tempmv1665[1];
setMv tempmv1665[0] = nen[4];
resetMv tempmv1666[1];
setMv tempmv1666[0] = tempmv1662[0];
calculateMvCoeff tempmv1661[0] = DIVISION(tempmv1665,tempmv1666);
setVector ve1667 = {len[-0],tempmv1640[0],tempmv1649[0],tempmv1658[0]};
setVector ve1668 = {tempmv1634[0],tempmv1643[0],tempmv1652[0],tempmv1661[0]};
dotVectors rc2[3] = <ve1667,ve1668>;

//rc2[4] = (((((-(len[0])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((rcPpDual[8] - len[8]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((rcPpDual[11] - len[11]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((rcPpDual[13] - len[13]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((rcPpDual[15] - len[15]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv tempmv1669[1];
resetMv tempmv1670[1];
setVector ve1671 = {nen[1,2,3]};
setVector ve1672 = {nen[1,2,3]};
dotVectors tempmv1670[0] = <ve1671,ve1672>;
resetMv tempmv1673[1];
setMv tempmv1673[0] = nen[4];
resetMv tempmv1674[1];
setMv tempmv1674[0] = tempmv1670[0];
calculateMvCoeff tempmv1669[0] = DIVISION(tempmv1673,tempmv1674);
resetMv tempmv1675[1];
resetMv tempmv1676[1];
setVector ve1677 = {rcPpDual[8],len[-8]};
dotVectors tempmv1676[0] = <ve1677>;
setMv tempmv1675[0] = tempmv1676[-0];
resetMv tempmv1678[1];
resetMv tempmv1679[1];
setVector ve1680 = {nen[1,2,3]};
setVector ve1681 = {nen[1,2,3]};
dotVectors tempmv1679[0] = <ve1680,ve1681>;
resetMv tempmv1682[1];
setMv tempmv1682[0] = nen[1];
resetMv tempmv1683[1];
setMv tempmv1683[0] = tempmv1679[0];
calculateMvCoeff tempmv1678[0] = DIVISION(tempmv1682,tempmv1683);
resetMv tempmv1684[1];
resetMv tempmv1685[1];
setVector ve1686 = {rcPpDual[11],len[-11]};
dotVectors tempmv1685[0] = <ve1686>;
setMv tempmv1684[0] = tempmv1685[-0];
resetMv tempmv1687[1];
resetMv tempmv1688[1];
setVector ve1689 = {nen[1,2,3]};
setVector ve1690 = {nen[1,2,3]};
dotVectors tempmv1688[0] = <ve1689,ve1690>;
resetMv tempmv1691[1];
setMv tempmv1691[0] = nen[2];
resetMv tempmv1692[1];
setMv tempmv1692[0] = tempmv1688[0];
calculateMvCoeff tempmv1687[0] = DIVISION(tempmv1691,tempmv1692);
resetMv tempmv1693[1];
resetMv tempmv1694[1];
setVector ve1695 = {rcPpDual[13],len[-13]};
dotVectors tempmv1694[0] = <ve1695>;
setMv tempmv1693[0] = tempmv1694[-0];
resetMv tempmv1696[1];
resetMv tempmv1697[1];
setVector ve1698 = {nen[1,2,3]};
setVector ve1699 = {nen[1,2,3]};
dotVectors tempmv1697[0] = <ve1698,ve1699>;
resetMv tempmv1700[1];
setMv tempmv1700[0] = nen[3];
resetMv tempmv1701[1];
setMv tempmv1701[0] = tempmv1697[0];
calculateMvCoeff tempmv1696[0] = DIVISION(tempmv1700,tempmv1701);
resetMv tempmv1702[1];
resetMv tempmv1703[1];
setVector ve1704 = {rcPpDual[15],len[-15]};
dotVectors tempmv1703[0] = <ve1704>;
setMv tempmv1702[0] = tempmv1703[-0];
resetMv tempmv1705[1];
resetMv tempmv1706[1];
setVector ve1707 = {nen[1,2,3]};
setVector ve1708 = {nen[1,2,3]};
dotVectors tempmv1706[0] = <ve1707,ve1708>;
resetMv tempmv1709[1];
setMv tempmv1709[0] = nen[4];
resetMv tempmv1710[1];
setMv tempmv1710[0] = tempmv1706[0];
calculateMvCoeff tempmv1705[0] = DIVISION(tempmv1709,tempmv1710);
setVector ve1711 = {len[-0],tempmv1675[0],tempmv1684[0],tempmv1693[0],tempmv1702[0]};
setVector ve1712 = {tempmv1669[0],tempmv1678[0],tempmv1687[0],tempmv1696[0],tempmv1705[0]};
dotVectors rc2[4] = <ve1711,ve1712>;

//rc2[5] = ((-((rcPpDual[9] - len[9]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((rcPpDual[12] - len[12]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((rcPpDual[14] - len[14]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv tempmv1713[1];
resetMv tempmv1714[1];
setVector ve1715 = {rcPpDual[9],len[-9]};
dotVectors tempmv1714[0] = <ve1715>;
setMv tempmv1713[0] = tempmv1714[-0];
resetMv tempmv1716[1];
resetMv tempmv1717[1];
setVector ve1718 = {nen[1,2,3]};
setVector ve1719 = {nen[1,2,3]};
dotVectors tempmv1717[0] = <ve1718,ve1719>;
resetMv tempmv1720[1];
setMv tempmv1720[0] = nen[1];
resetMv tempmv1721[1];
setMv tempmv1721[0] = tempmv1717[0];
calculateMvCoeff tempmv1716[0] = DIVISION(tempmv1720,tempmv1721);
resetMv tempmv1722[1];
resetMv tempmv1723[1];
setVector ve1724 = {rcPpDual[12],len[-12]};
dotVectors tempmv1723[0] = <ve1724>;
setMv tempmv1722[0] = tempmv1723[-0];
resetMv tempmv1725[1];
resetMv tempmv1726[1];
setVector ve1727 = {nen[1,2,3]};
setVector ve1728 = {nen[1,2,3]};
dotVectors tempmv1726[0] = <ve1727,ve1728>;
resetMv tempmv1729[1];
setMv tempmv1729[0] = nen[2];
resetMv tempmv1730[1];
setMv tempmv1730[0] = tempmv1726[0];
calculateMvCoeff tempmv1725[0] = DIVISION(tempmv1729,tempmv1730);
resetMv tempmv1731[1];
resetMv tempmv1732[1];
setVector ve1733 = {rcPpDual[14],len[-14]};
dotVectors tempmv1732[0] = <ve1733>;
setMv tempmv1731[0] = tempmv1732[-0];
resetMv tempmv1734[1];
resetMv tempmv1735[1];
setVector ve1736 = {nen[1,2,3]};
setVector ve1737 = {nen[1,2,3]};
dotVectors tempmv1735[0] = <ve1736,ve1737>;
resetMv tempmv1738[1];
setMv tempmv1738[0] = nen[3];
resetMv tempmv1739[1];
setMv tempmv1739[0] = tempmv1735[0];
calculateMvCoeff tempmv1734[0] = DIVISION(tempmv1738,tempmv1739);
setVector ve1740 = {tempmv1713[0],tempmv1722[0],tempmv1731[0]};
setVector ve1741 = {tempmv1716[0],tempmv1725[0],tempmv1734[0]};
dotVectors rc2[5] = <ve1740,ve1741>;

//rc2[6] = ((((-(len[1])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((-(len[2])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + ((-(len[16])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[18])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv tempmv1742[1];
resetMv tempmv1743[1];
setVector ve1744 = {nen[1,2,3]};
setVector ve1745 = {nen[1,2,3]};
dotVectors tempmv1743[0] = <ve1744,ve1745>;
resetMv tempmv1746[1];
setMv tempmv1746[0] = nen[2];
resetMv tempmv1747[1];
setMv tempmv1747[0] = tempmv1743[0];
calculateMvCoeff tempmv1742[0] = DIVISION(tempmv1746,tempmv1747);
resetMv tempmv1748[1];
resetMv tempmv1749[1];
setVector ve1750 = {nen[1,2,3]};
setVector ve1751 = {nen[1,2,3]};
dotVectors tempmv1749[0] = <ve1750,ve1751>;
resetMv tempmv1752[1];
setMv tempmv1752[0] = nen[1];
resetMv tempmv1753[1];
setMv tempmv1753[0] = tempmv1749[0];
calculateMvCoeff tempmv1748[0] = DIVISION(tempmv1752,tempmv1753);
resetMv tempmv1754[1];
resetMv tempmv1755[1];
setVector ve1756 = {nen[1,2,3]};
setVector ve1757 = {nen[1,2,3]};
dotVectors tempmv1755[0] = <ve1756,ve1757>;
resetMv tempmv1758[1];
setMv tempmv1758[0] = nen[3];
resetMv tempmv1759[1];
setMv tempmv1759[0] = tempmv1755[0];
calculateMvCoeff tempmv1754[0] = DIVISION(tempmv1758,tempmv1759);
resetMv tempmv1760[1];
resetMv tempmv1761[1];
setVector ve1762 = {nen[1,2,3]};
setVector ve1763 = {nen[1,2,3]};
dotVectors tempmv1761[0] = <ve1762,ve1763>;
resetMv tempmv1764[1];
setMv tempmv1764[0] = nen[4];
resetMv tempmv1765[1];
setMv tempmv1765[0] = tempmv1761[0];
calculateMvCoeff tempmv1760[0] = DIVISION(tempmv1764,tempmv1765);
setVector ve1766 = {len[-1,2,-16,18]};
setVector ve1767 = {tempmv1742[0],tempmv1748[0],tempmv1754[0],tempmv1760[0]};
dotVectors rc2[6] = <ve1766,ve1767>;

//rc2[7] = ((((-(len[1])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((-(len[3])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((-(len[16])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((-(len[20])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv tempmv1768[1];
resetMv tempmv1769[1];
setVector ve1770 = {nen[1,2,3]};
setVector ve1771 = {nen[1,2,3]};
dotVectors tempmv1769[0] = <ve1770,ve1771>;
resetMv tempmv1772[1];
setMv tempmv1772[0] = nen[3];
resetMv tempmv1773[1];
setMv tempmv1773[0] = tempmv1769[0];
calculateMvCoeff tempmv1768[0] = DIVISION(tempmv1772,tempmv1773);
resetMv tempmv1774[1];
resetMv tempmv1775[1];
setVector ve1776 = {nen[1,2,3]};
setVector ve1777 = {nen[1,2,3]};
dotVectors tempmv1775[0] = <ve1776,ve1777>;
resetMv tempmv1778[1];
setMv tempmv1778[0] = nen[1];
resetMv tempmv1779[1];
setMv tempmv1779[0] = tempmv1775[0];
calculateMvCoeff tempmv1774[0] = DIVISION(tempmv1778,tempmv1779);
resetMv tempmv1780[1];
resetMv tempmv1781[1];
setVector ve1782 = {nen[1,2,3]};
setVector ve1783 = {nen[1,2,3]};
dotVectors tempmv1781[0] = <ve1782,ve1783>;
resetMv tempmv1784[1];
setMv tempmv1784[0] = nen[2];
resetMv tempmv1785[1];
setMv tempmv1785[0] = tempmv1781[0];
calculateMvCoeff tempmv1780[0] = DIVISION(tempmv1784,tempmv1785);
resetMv tempmv1786[1];
resetMv tempmv1787[1];
setVector ve1788 = {nen[1,2,3]};
setVector ve1789 = {nen[1,2,3]};
dotVectors tempmv1787[0] = <ve1788,ve1789>;
resetMv tempmv1790[1];
setMv tempmv1790[0] = nen[4];
resetMv tempmv1791[1];
setMv tempmv1791[0] = tempmv1787[0];
calculateMvCoeff tempmv1786[0] = DIVISION(tempmv1790,tempmv1791);
setVector ve1792 = {len[-1,3,16,20]};
setVector ve1793 = {tempmv1768[0],tempmv1774[0],tempmv1780[0],tempmv1786[0]};
dotVectors rc2[7] = <ve1792,ve1793>;

//rc2[8] = (((((-(len[1])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((-(len[4])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((-(len[17])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((-(len[19])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((-(len[21])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv tempmv1794[1];
resetMv tempmv1795[1];
setVector ve1796 = {nen[1,2,3]};
setVector ve1797 = {nen[1,2,3]};
dotVectors tempmv1795[0] = <ve1796,ve1797>;
resetMv tempmv1798[1];
setMv tempmv1798[0] = nen[4];
resetMv tempmv1799[1];
setMv tempmv1799[0] = tempmv1795[0];
calculateMvCoeff tempmv1794[0] = DIVISION(tempmv1798,tempmv1799);
resetMv tempmv1800[1];
resetMv tempmv1801[1];
setVector ve1802 = {nen[1,2,3]};
setVector ve1803 = {nen[1,2,3]};
dotVectors tempmv1801[0] = <ve1802,ve1803>;
resetMv tempmv1804[1];
setMv tempmv1804[0] = nen[1];
resetMv tempmv1805[1];
setMv tempmv1805[0] = tempmv1801[0];
calculateMvCoeff tempmv1800[0] = DIVISION(tempmv1804,tempmv1805);
resetMv tempmv1806[1];
resetMv tempmv1807[1];
setVector ve1808 = {nen[1,2,3]};
setVector ve1809 = {nen[1,2,3]};
dotVectors tempmv1807[0] = <ve1808,ve1809>;
resetMv tempmv1810[1];
setMv tempmv1810[0] = nen[2];
resetMv tempmv1811[1];
setMv tempmv1811[0] = tempmv1807[0];
calculateMvCoeff tempmv1806[0] = DIVISION(tempmv1810,tempmv1811);
resetMv tempmv1812[1];
resetMv tempmv1813[1];
setVector ve1814 = {nen[1,2,3]};
setVector ve1815 = {nen[1,2,3]};
dotVectors tempmv1813[0] = <ve1814,ve1815>;
resetMv tempmv1816[1];
setMv tempmv1816[0] = nen[3];
resetMv tempmv1817[1];
setMv tempmv1817[0] = tempmv1813[0];
calculateMvCoeff tempmv1812[0] = DIVISION(tempmv1816,tempmv1817);
resetMv tempmv1818[1];
resetMv tempmv1819[1];
setVector ve1820 = {nen[1,2,3]};
setVector ve1821 = {nen[1,2,3]};
dotVectors tempmv1819[0] = <ve1820,ve1821>;
resetMv tempmv1822[1];
setMv tempmv1822[0] = nen[4];
resetMv tempmv1823[1];
setMv tempmv1823[0] = tempmv1819[0];
calculateMvCoeff tempmv1818[0] = DIVISION(tempmv1822,tempmv1823);
setVector ve1824 = {len[-1,4,17,19,21]};
setVector ve1825 = {tempmv1794[0],tempmv1800[0],tempmv1806[0],tempmv1812[0],tempmv1818[0]};
dotVectors rc2[8] = <ve1824,ve1825>;

//rc2[9] = ((-((-(len[5])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[18])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((-(len[20])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv tempmv1826[1];
resetMv tempmv1827[1];
setVector ve1828 = {nen[1,2,3]};
setVector ve1829 = {nen[1,2,3]};
dotVectors tempmv1827[0] = <ve1828,ve1829>;
resetMv tempmv1830[1];
setMv tempmv1830[0] = nen[1];
resetMv tempmv1831[1];
setMv tempmv1831[0] = tempmv1827[0];
calculateMvCoeff tempmv1826[0] = DIVISION(tempmv1830,tempmv1831);
resetMv tempmv1832[1];
resetMv tempmv1833[1];
setVector ve1834 = {nen[1,2,3]};
setVector ve1835 = {nen[1,2,3]};
dotVectors tempmv1833[0] = <ve1834,ve1835>;
resetMv tempmv1836[1];
setMv tempmv1836[0] = nen[2];
resetMv tempmv1837[1];
setMv tempmv1837[0] = tempmv1833[0];
calculateMvCoeff tempmv1832[0] = DIVISION(tempmv1836,tempmv1837);
resetMv tempmv1838[1];
resetMv tempmv1839[1];
setVector ve1840 = {nen[1,2,3]};
setVector ve1841 = {nen[1,2,3]};
dotVectors tempmv1839[0] = <ve1840,ve1841>;
resetMv tempmv1842[1];
setMv tempmv1842[0] = nen[3];
resetMv tempmv1843[1];
setMv tempmv1843[0] = tempmv1839[0];
calculateMvCoeff tempmv1838[0] = DIVISION(tempmv1842,tempmv1843);
setVector ve1844 = {len[5,18,20]};
setVector ve1845 = {tempmv1826[0],tempmv1832[0],tempmv1838[0]};
dotVectors rc2[9] = <ve1844,ve1845>;

//rc2[10] = ((((-(len[2])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((-(len[3])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + ((-(len[16])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[23])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv tempmv1846[1];
resetMv tempmv1847[1];
setVector ve1848 = {nen[1,2,3]};
setVector ve1849 = {nen[1,2,3]};
dotVectors tempmv1847[0] = <ve1848,ve1849>;
resetMv tempmv1850[1];
setMv tempmv1850[0] = nen[3];
resetMv tempmv1851[1];
setMv tempmv1851[0] = tempmv1847[0];
calculateMvCoeff tempmv1846[0] = DIVISION(tempmv1850,tempmv1851);
resetMv tempmv1852[1];
resetMv tempmv1853[1];
setVector ve1854 = {nen[1,2,3]};
setVector ve1855 = {nen[1,2,3]};
dotVectors tempmv1853[0] = <ve1854,ve1855>;
resetMv tempmv1856[1];
setMv tempmv1856[0] = nen[2];
resetMv tempmv1857[1];
setMv tempmv1857[0] = tempmv1853[0];
calculateMvCoeff tempmv1852[0] = DIVISION(tempmv1856,tempmv1857);
resetMv tempmv1858[1];
resetMv tempmv1859[1];
setVector ve1860 = {nen[1,2,3]};
setVector ve1861 = {nen[1,2,3]};
dotVectors tempmv1859[0] = <ve1860,ve1861>;
resetMv tempmv1862[1];
setMv tempmv1862[0] = nen[1];
resetMv tempmv1863[1];
setMv tempmv1863[0] = tempmv1859[0];
calculateMvCoeff tempmv1858[0] = DIVISION(tempmv1862,tempmv1863);
resetMv tempmv1864[1];
resetMv tempmv1865[1];
setVector ve1866 = {nen[1,2,3]};
setVector ve1867 = {nen[1,2,3]};
dotVectors tempmv1865[0] = <ve1866,ve1867>;
resetMv tempmv1868[1];
setMv tempmv1868[0] = nen[4];
resetMv tempmv1869[1];
setMv tempmv1869[0] = tempmv1865[0];
calculateMvCoeff tempmv1864[0] = DIVISION(tempmv1868,tempmv1869);
setVector ve1870 = {len[-2,3,-16,23]};
setVector ve1871 = {tempmv1846[0],tempmv1852[0],tempmv1858[0],tempmv1864[0]};
dotVectors rc2[10] = <ve1870,ve1871>;

//rc2[11] = (((((-(len[2])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((-(len[4])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + ((-(len[17])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[22])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((-(len[24])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv tempmv1872[1];
resetMv tempmv1873[1];
setVector ve1874 = {nen[1,2,3]};
setVector ve1875 = {nen[1,2,3]};
dotVectors tempmv1873[0] = <ve1874,ve1875>;
resetMv tempmv1876[1];
setMv tempmv1876[0] = nen[4];
resetMv tempmv1877[1];
setMv tempmv1877[0] = tempmv1873[0];
calculateMvCoeff tempmv1872[0] = DIVISION(tempmv1876,tempmv1877);
resetMv tempmv1878[1];
resetMv tempmv1879[1];
setVector ve1880 = {nen[1,2,3]};
setVector ve1881 = {nen[1,2,3]};
dotVectors tempmv1879[0] = <ve1880,ve1881>;
resetMv tempmv1882[1];
setMv tempmv1882[0] = nen[2];
resetMv tempmv1883[1];
setMv tempmv1883[0] = tempmv1879[0];
calculateMvCoeff tempmv1878[0] = DIVISION(tempmv1882,tempmv1883);
resetMv tempmv1884[1];
resetMv tempmv1885[1];
setVector ve1886 = {nen[1,2,3]};
setVector ve1887 = {nen[1,2,3]};
dotVectors tempmv1885[0] = <ve1886,ve1887>;
resetMv tempmv1888[1];
setMv tempmv1888[0] = nen[1];
resetMv tempmv1889[1];
setMv tempmv1889[0] = tempmv1885[0];
calculateMvCoeff tempmv1884[0] = DIVISION(tempmv1888,tempmv1889);
resetMv tempmv1890[1];
resetMv tempmv1891[1];
setVector ve1892 = {nen[1,2,3]};
setVector ve1893 = {nen[1,2,3]};
dotVectors tempmv1891[0] = <ve1892,ve1893>;
resetMv tempmv1894[1];
setMv tempmv1894[0] = nen[3];
resetMv tempmv1895[1];
setMv tempmv1895[0] = tempmv1891[0];
calculateMvCoeff tempmv1890[0] = DIVISION(tempmv1894,tempmv1895);
resetMv tempmv1896[1];
resetMv tempmv1897[1];
setVector ve1898 = {nen[1,2,3]};
setVector ve1899 = {nen[1,2,3]};
dotVectors tempmv1897[0] = <ve1898,ve1899>;
resetMv tempmv1900[1];
setMv tempmv1900[0] = nen[4];
resetMv tempmv1901[1];
setMv tempmv1901[0] = tempmv1897[0];
calculateMvCoeff tempmv1896[0] = DIVISION(tempmv1900,tempmv1901);
setVector ve1902 = {len[-2,4,-17,22,24]};
setVector ve1903 = {tempmv1872[0],tempmv1878[0],tempmv1884[0],tempmv1890[0],tempmv1896[0]};
dotVectors rc2[11] = <ve1902,ve1903>;

//rc2[12] = ((-((-(len[5])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((-(len[18])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[23])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv tempmv1904[1];
resetMv tempmv1905[1];
setVector ve1906 = {nen[1,2,3]};
setVector ve1907 = {nen[1,2,3]};
dotVectors tempmv1905[0] = <ve1906,ve1907>;
resetMv tempmv1908[1];
setMv tempmv1908[0] = nen[2];
resetMv tempmv1909[1];
setMv tempmv1909[0] = tempmv1905[0];
calculateMvCoeff tempmv1904[0] = DIVISION(tempmv1908,tempmv1909);
resetMv tempmv1910[1];
resetMv tempmv1911[1];
setVector ve1912 = {nen[1,2,3]};
setVector ve1913 = {nen[1,2,3]};
dotVectors tempmv1911[0] = <ve1912,ve1913>;
resetMv tempmv1914[1];
setMv tempmv1914[0] = nen[1];
resetMv tempmv1915[1];
setMv tempmv1915[0] = tempmv1911[0];
calculateMvCoeff tempmv1910[0] = DIVISION(tempmv1914,tempmv1915);
resetMv tempmv1916[1];
resetMv tempmv1917[1];
setVector ve1918 = {nen[1,2,3]};
setVector ve1919 = {nen[1,2,3]};
dotVectors tempmv1917[0] = <ve1918,ve1919>;
resetMv tempmv1920[1];
setMv tempmv1920[0] = nen[3];
resetMv tempmv1921[1];
setMv tempmv1921[0] = tempmv1917[0];
calculateMvCoeff tempmv1916[0] = DIVISION(tempmv1920,tempmv1921);
setVector ve1922 = {len[5,-18,23]};
setVector ve1923 = {tempmv1904[0],tempmv1910[0],tempmv1916[0]};
dotVectors rc2[12] = <ve1922,ve1923>;

//rc2[13] = (((((-(len[3])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((-(len[4])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + ((-(len[19])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((-(len[22])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[25])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv tempmv1924[1];
resetMv tempmv1925[1];
setVector ve1926 = {nen[1,2,3]};
setVector ve1927 = {nen[1,2,3]};
dotVectors tempmv1925[0] = <ve1926,ve1927>;
resetMv tempmv1928[1];
setMv tempmv1928[0] = nen[4];
resetMv tempmv1929[1];
setMv tempmv1929[0] = tempmv1925[0];
calculateMvCoeff tempmv1924[0] = DIVISION(tempmv1928,tempmv1929);
resetMv tempmv1930[1];
resetMv tempmv1931[1];
setVector ve1932 = {nen[1,2,3]};
setVector ve1933 = {nen[1,2,3]};
dotVectors tempmv1931[0] = <ve1932,ve1933>;
resetMv tempmv1934[1];
setMv tempmv1934[0] = nen[3];
resetMv tempmv1935[1];
setMv tempmv1935[0] = tempmv1931[0];
calculateMvCoeff tempmv1930[0] = DIVISION(tempmv1934,tempmv1935);
resetMv tempmv1936[1];
resetMv tempmv1937[1];
setVector ve1938 = {nen[1,2,3]};
setVector ve1939 = {nen[1,2,3]};
dotVectors tempmv1937[0] = <ve1938,ve1939>;
resetMv tempmv1940[1];
setMv tempmv1940[0] = nen[1];
resetMv tempmv1941[1];
setMv tempmv1941[0] = tempmv1937[0];
calculateMvCoeff tempmv1936[0] = DIVISION(tempmv1940,tempmv1941);
resetMv tempmv1942[1];
resetMv tempmv1943[1];
setVector ve1944 = {nen[1,2,3]};
setVector ve1945 = {nen[1,2,3]};
dotVectors tempmv1943[0] = <ve1944,ve1945>;
resetMv tempmv1946[1];
setMv tempmv1946[0] = nen[2];
resetMv tempmv1947[1];
setMv tempmv1947[0] = tempmv1943[0];
calculateMvCoeff tempmv1942[0] = DIVISION(tempmv1946,tempmv1947);
resetMv tempmv1948[1];
resetMv tempmv1949[1];
setVector ve1950 = {nen[1,2,3]};
setVector ve1951 = {nen[1,2,3]};
dotVectors tempmv1949[0] = <ve1950,ve1951>;
resetMv tempmv1952[1];
setMv tempmv1952[0] = nen[4];
resetMv tempmv1953[1];
setMv tempmv1953[0] = tempmv1949[0];
calculateMvCoeff tempmv1948[0] = DIVISION(tempmv1952,tempmv1953);
setVector ve1954 = {len[-3,4,-19,-22,25]};
setVector ve1955 = {tempmv1924[0],tempmv1930[0],tempmv1936[0],tempmv1942[0],tempmv1948[0]};
dotVectors rc2[13] = <ve1954,ve1955>;

//rc2[14] = ((-((-(len[5])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((-(len[20])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((-(len[23])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv tempmv1956[1];
resetMv tempmv1957[1];
setVector ve1958 = {nen[1,2,3]};
setVector ve1959 = {nen[1,2,3]};
dotVectors tempmv1957[0] = <ve1958,ve1959>;
resetMv tempmv1960[1];
setMv tempmv1960[0] = nen[3];
resetMv tempmv1961[1];
setMv tempmv1961[0] = tempmv1957[0];
calculateMvCoeff tempmv1956[0] = DIVISION(tempmv1960,tempmv1961);
resetMv tempmv1962[1];
resetMv tempmv1963[1];
setVector ve1964 = {nen[1,2,3]};
setVector ve1965 = {nen[1,2,3]};
dotVectors tempmv1963[0] = <ve1964,ve1965>;
resetMv tempmv1966[1];
setMv tempmv1966[0] = nen[1];
resetMv tempmv1967[1];
setMv tempmv1967[0] = tempmv1963[0];
calculateMvCoeff tempmv1962[0] = DIVISION(tempmv1966,tempmv1967);
resetMv tempmv1968[1];
resetMv tempmv1969[1];
setVector ve1970 = {nen[1,2,3]};
setVector ve1971 = {nen[1,2,3]};
dotVectors tempmv1969[0] = <ve1970,ve1971>;
resetMv tempmv1972[1];
setMv tempmv1972[0] = nen[2];
resetMv tempmv1973[1];
setMv tempmv1973[0] = tempmv1969[0];
calculateMvCoeff tempmv1968[0] = DIVISION(tempmv1972,tempmv1973);
setVector ve1974 = {len[5,-20,-23]};
setVector ve1975 = {tempmv1956[0],tempmv1962[0],tempmv1968[0]};
dotVectors rc2[14] = <ve1974,ve1975>;

//rc2[15] = (((-((-(len[5])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((-(len[21])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((-(len[24])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((-(len[25])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv tempmv1976[1];
resetMv tempmv1977[1];
setVector ve1978 = {nen[1,2,3]};
setVector ve1979 = {nen[1,2,3]};
dotVectors tempmv1977[0] = <ve1978,ve1979>;
resetMv tempmv1980[1];
setMv tempmv1980[0] = nen[4];
resetMv tempmv1981[1];
setMv tempmv1981[0] = tempmv1977[0];
calculateMvCoeff tempmv1976[0] = DIVISION(tempmv1980,tempmv1981);
resetMv tempmv1982[1];
resetMv tempmv1983[1];
setVector ve1984 = {nen[1,2,3]};
setVector ve1985 = {nen[1,2,3]};
dotVectors tempmv1983[0] = <ve1984,ve1985>;
resetMv tempmv1986[1];
setMv tempmv1986[0] = nen[1];
resetMv tempmv1987[1];
setMv tempmv1987[0] = tempmv1983[0];
calculateMvCoeff tempmv1982[0] = DIVISION(tempmv1986,tempmv1987);
resetMv tempmv1988[1];
resetMv tempmv1989[1];
setVector ve1990 = {nen[1,2,3]};
setVector ve1991 = {nen[1,2,3]};
dotVectors tempmv1989[0] = <ve1990,ve1991>;
resetMv tempmv1992[1];
setMv tempmv1992[0] = nen[2];
resetMv tempmv1993[1];
setMv tempmv1993[0] = tempmv1989[0];
calculateMvCoeff tempmv1988[0] = DIVISION(tempmv1992,tempmv1993);
resetMv tempmv1994[1];
resetMv tempmv1995[1];
setVector ve1996 = {nen[1,2,3]};
setVector ve1997 = {nen[1,2,3]};
dotVectors tempmv1995[0] = <ve1996,ve1997>;
resetMv tempmv1998[1];
setMv tempmv1998[0] = nen[3];
resetMv tempmv1999[1];
setMv tempmv1999[0] = tempmv1995[0];
calculateMvCoeff tempmv1994[0] = DIVISION(tempmv1998,tempmv1999);
setVector ve2000 = {len[5,-21,-24,-25]};
setVector ve2001 = {tempmv1976[0],tempmv1982[0],tempmv1988[0],tempmv1994[0]};
dotVectors rc2[15] = <ve2000,ve2001>;

//rc2[16] = ((((rcPpDual[6] - len[6]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((rcPpDual[7] - len[7]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + ((rcPpDual[10] - len[10]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[27])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv tempmv2002[1];
setVector ve2003 = {rcPpDual[6],len[-6]};
dotVectors tempmv2002[0] = <ve2003>;
resetMv tempmv2004[1];
resetMv tempmv2005[1];
setVector ve2006 = {nen[1,2,3]};
setVector ve2007 = {nen[1,2,3]};
dotVectors tempmv2005[0] = <ve2006,ve2007>;
resetMv tempmv2008[1];
setMv tempmv2008[0] = nen[3];
resetMv tempmv2009[1];
setMv tempmv2009[0] = tempmv2005[0];
calculateMvCoeff tempmv2004[0] = DIVISION(tempmv2008,tempmv2009);
resetMv tempmv2010[1];
resetMv tempmv2011[1];
setVector ve2012 = {rcPpDual[7],len[-7]};
dotVectors tempmv2011[0] = <ve2012>;
setMv tempmv2010[0] = tempmv2011[-0];
resetMv tempmv2013[1];
resetMv tempmv2014[1];
setVector ve2015 = {nen[1,2,3]};
setVector ve2016 = {nen[1,2,3]};
dotVectors tempmv2014[0] = <ve2015,ve2016>;
resetMv tempmv2017[1];
setMv tempmv2017[0] = nen[2];
resetMv tempmv2018[1];
setMv tempmv2018[0] = tempmv2014[0];
calculateMvCoeff tempmv2013[0] = DIVISION(tempmv2017,tempmv2018);
resetMv tempmv2019[1];
setVector ve2020 = {rcPpDual[10],len[-10]};
dotVectors tempmv2019[0] = <ve2020>;
resetMv tempmv2021[1];
resetMv tempmv2022[1];
setVector ve2023 = {nen[1,2,3]};
setVector ve2024 = {nen[1,2,3]};
dotVectors tempmv2022[0] = <ve2023,ve2024>;
resetMv tempmv2025[1];
setMv tempmv2025[0] = nen[1];
resetMv tempmv2026[1];
setMv tempmv2026[0] = tempmv2022[0];
calculateMvCoeff tempmv2021[0] = DIVISION(tempmv2025,tempmv2026);
resetMv tempmv2027[1];
resetMv tempmv2028[1];
setVector ve2029 = {nen[1,2,3]};
setVector ve2030 = {nen[1,2,3]};
dotVectors tempmv2028[0] = <ve2029,ve2030>;
resetMv tempmv2031[1];
setMv tempmv2031[0] = nen[4];
resetMv tempmv2032[1];
setMv tempmv2032[0] = tempmv2028[0];
calculateMvCoeff tempmv2027[0] = DIVISION(tempmv2031,tempmv2032);
setVector ve2033 = {tempmv2002[0],tempmv2010[0],tempmv2019[0],len[27]};
setVector ve2034 = {tempmv2004[0],tempmv2013[0],tempmv2021[0],tempmv2027[0]};
dotVectors rc2[16] = <ve2033,ve2034>;

//rc2[17] = (((((rcPpDual[6] - len[6]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((rcPpDual[8] - len[8]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + ((rcPpDual[11] - len[11]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[26])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((-(len[28])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv tempmv2035[1];
setVector ve2036 = {rcPpDual[6],len[-6]};
dotVectors tempmv2035[0] = <ve2036>;
resetMv tempmv2037[1];
resetMv tempmv2038[1];
setVector ve2039 = {nen[1,2,3]};
setVector ve2040 = {nen[1,2,3]};
dotVectors tempmv2038[0] = <ve2039,ve2040>;
resetMv tempmv2041[1];
setMv tempmv2041[0] = nen[4];
resetMv tempmv2042[1];
setMv tempmv2042[0] = tempmv2038[0];
calculateMvCoeff tempmv2037[0] = DIVISION(tempmv2041,tempmv2042);
resetMv tempmv2043[1];
resetMv tempmv2044[1];
setVector ve2045 = {rcPpDual[8],len[-8]};
dotVectors tempmv2044[0] = <ve2045>;
setMv tempmv2043[0] = tempmv2044[-0];
resetMv tempmv2046[1];
resetMv tempmv2047[1];
setVector ve2048 = {nen[1,2,3]};
setVector ve2049 = {nen[1,2,3]};
dotVectors tempmv2047[0] = <ve2048,ve2049>;
resetMv tempmv2050[1];
setMv tempmv2050[0] = nen[2];
resetMv tempmv2051[1];
setMv tempmv2051[0] = tempmv2047[0];
calculateMvCoeff tempmv2046[0] = DIVISION(tempmv2050,tempmv2051);
resetMv tempmv2052[1];
setVector ve2053 = {rcPpDual[11],len[-11]};
dotVectors tempmv2052[0] = <ve2053>;
resetMv tempmv2054[1];
resetMv tempmv2055[1];
setVector ve2056 = {nen[1,2,3]};
setVector ve2057 = {nen[1,2,3]};
dotVectors tempmv2055[0] = <ve2056,ve2057>;
resetMv tempmv2058[1];
setMv tempmv2058[0] = nen[1];
resetMv tempmv2059[1];
setMv tempmv2059[0] = tempmv2055[0];
calculateMvCoeff tempmv2054[0] = DIVISION(tempmv2058,tempmv2059);
resetMv tempmv2060[1];
resetMv tempmv2061[1];
setVector ve2062 = {nen[1,2,3]};
setVector ve2063 = {nen[1,2,3]};
dotVectors tempmv2061[0] = <ve2062,ve2063>;
resetMv tempmv2064[1];
setMv tempmv2064[0] = nen[3];
resetMv tempmv2065[1];
setMv tempmv2065[0] = tempmv2061[0];
calculateMvCoeff tempmv2060[0] = DIVISION(tempmv2064,tempmv2065);
resetMv tempmv2066[1];
resetMv tempmv2067[1];
setVector ve2068 = {nen[1,2,3]};
setVector ve2069 = {nen[1,2,3]};
dotVectors tempmv2067[0] = <ve2068,ve2069>;
resetMv tempmv2070[1];
setMv tempmv2070[0] = nen[4];
resetMv tempmv2071[1];
setMv tempmv2071[0] = tempmv2067[0];
calculateMvCoeff tempmv2066[0] = DIVISION(tempmv2070,tempmv2071);
setVector ve2072 = {tempmv2035[0],tempmv2043[0],tempmv2052[0],len[26,28]};
setVector ve2073 = {tempmv2037[0],tempmv2046[0],tempmv2054[0],tempmv2060[0],tempmv2066[0]};
dotVectors rc2[17] = <ve2072,ve2073>;

//rc2[18] = ((-((rcPpDual[9] - len[9]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((rcPpDual[12] - len[12]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[27])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv tempmv2074[1];
resetMv tempmv2075[1];
setVector ve2076 = {rcPpDual[9],len[-9]};
dotVectors tempmv2075[0] = <ve2076>;
setMv tempmv2074[0] = tempmv2075[-0];
resetMv tempmv2077[1];
resetMv tempmv2078[1];
setVector ve2079 = {nen[1,2,3]};
setVector ve2080 = {nen[1,2,3]};
dotVectors tempmv2078[0] = <ve2079,ve2080>;
resetMv tempmv2081[1];
setMv tempmv2081[0] = nen[2];
resetMv tempmv2082[1];
setMv tempmv2082[0] = tempmv2078[0];
calculateMvCoeff tempmv2077[0] = DIVISION(tempmv2081,tempmv2082);
resetMv tempmv2083[1];
setVector ve2084 = {rcPpDual[12],len[-12]};
dotVectors tempmv2083[0] = <ve2084>;
resetMv tempmv2085[1];
resetMv tempmv2086[1];
setVector ve2087 = {nen[1,2,3]};
setVector ve2088 = {nen[1,2,3]};
dotVectors tempmv2086[0] = <ve2087,ve2088>;
resetMv tempmv2089[1];
setMv tempmv2089[0] = nen[1];
resetMv tempmv2090[1];
setMv tempmv2090[0] = tempmv2086[0];
calculateMvCoeff tempmv2085[0] = DIVISION(tempmv2089,tempmv2090);
resetMv tempmv2091[1];
resetMv tempmv2092[1];
setVector ve2093 = {nen[1,2,3]};
setVector ve2094 = {nen[1,2,3]};
dotVectors tempmv2092[0] = <ve2093,ve2094>;
resetMv tempmv2095[1];
setMv tempmv2095[0] = nen[3];
resetMv tempmv2096[1];
setMv tempmv2096[0] = tempmv2092[0];
calculateMvCoeff tempmv2091[0] = DIVISION(tempmv2095,tempmv2096);
setVector ve2097 = {tempmv2074[0],tempmv2083[0],len[27]};
setVector ve2098 = {tempmv2077[0],tempmv2085[0],tempmv2091[0]};
dotVectors rc2[18] = <ve2097,ve2098>;

//rc2[19] = (((((rcPpDual[7] - len[7]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((rcPpDual[8] - len[8]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + ((rcPpDual[13] - len[13]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((-(len[26])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[29])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv tempmv2099[1];
setVector ve2100 = {rcPpDual[7],len[-7]};
dotVectors tempmv2099[0] = <ve2100>;
resetMv tempmv2101[1];
resetMv tempmv2102[1];
setVector ve2103 = {nen[1,2,3]};
setVector ve2104 = {nen[1,2,3]};
dotVectors tempmv2102[0] = <ve2103,ve2104>;
resetMv tempmv2105[1];
setMv tempmv2105[0] = nen[4];
resetMv tempmv2106[1];
setMv tempmv2106[0] = tempmv2102[0];
calculateMvCoeff tempmv2101[0] = DIVISION(tempmv2105,tempmv2106);
resetMv tempmv2107[1];
resetMv tempmv2108[1];
setVector ve2109 = {rcPpDual[8],len[-8]};
dotVectors tempmv2108[0] = <ve2109>;
setMv tempmv2107[0] = tempmv2108[-0];
resetMv tempmv2110[1];
resetMv tempmv2111[1];
setVector ve2112 = {nen[1,2,3]};
setVector ve2113 = {nen[1,2,3]};
dotVectors tempmv2111[0] = <ve2112,ve2113>;
resetMv tempmv2114[1];
setMv tempmv2114[0] = nen[3];
resetMv tempmv2115[1];
setMv tempmv2115[0] = tempmv2111[0];
calculateMvCoeff tempmv2110[0] = DIVISION(tempmv2114,tempmv2115);
resetMv tempmv2116[1];
setVector ve2117 = {rcPpDual[13],len[-13]};
dotVectors tempmv2116[0] = <ve2117>;
resetMv tempmv2118[1];
resetMv tempmv2119[1];
setVector ve2120 = {nen[1,2,3]};
setVector ve2121 = {nen[1,2,3]};
dotVectors tempmv2119[0] = <ve2120,ve2121>;
resetMv tempmv2122[1];
setMv tempmv2122[0] = nen[1];
resetMv tempmv2123[1];
setMv tempmv2123[0] = tempmv2119[0];
calculateMvCoeff tempmv2118[0] = DIVISION(tempmv2122,tempmv2123);
resetMv tempmv2124[1];
resetMv tempmv2125[1];
setVector ve2126 = {nen[1,2,3]};
setVector ve2127 = {nen[1,2,3]};
dotVectors tempmv2125[0] = <ve2126,ve2127>;
resetMv tempmv2128[1];
setMv tempmv2128[0] = nen[2];
resetMv tempmv2129[1];
setMv tempmv2129[0] = tempmv2125[0];
calculateMvCoeff tempmv2124[0] = DIVISION(tempmv2128,tempmv2129);
resetMv tempmv2130[1];
resetMv tempmv2131[1];
setVector ve2132 = {nen[1,2,3]};
setVector ve2133 = {nen[1,2,3]};
dotVectors tempmv2131[0] = <ve2132,ve2133>;
resetMv tempmv2134[1];
setMv tempmv2134[0] = nen[4];
resetMv tempmv2135[1];
setMv tempmv2135[0] = tempmv2131[0];
calculateMvCoeff tempmv2130[0] = DIVISION(tempmv2134,tempmv2135);
setVector ve2136 = {tempmv2099[0],tempmv2107[0],tempmv2116[0],len[-26,29]};
setVector ve2137 = {tempmv2101[0],tempmv2110[0],tempmv2118[0],tempmv2124[0],tempmv2130[0]};
dotVectors rc2[19] = <ve2136,ve2137>;

//rc2[20] = ((-((rcPpDual[9] - len[9]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((rcPpDual[14] - len[14]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((-(len[27])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv tempmv2138[1];
resetMv tempmv2139[1];
setVector ve2140 = {rcPpDual[9],len[-9]};
dotVectors tempmv2139[0] = <ve2140>;
setMv tempmv2138[0] = tempmv2139[-0];
resetMv tempmv2141[1];
resetMv tempmv2142[1];
setVector ve2143 = {nen[1,2,3]};
setVector ve2144 = {nen[1,2,3]};
dotVectors tempmv2142[0] = <ve2143,ve2144>;
resetMv tempmv2145[1];
setMv tempmv2145[0] = nen[3];
resetMv tempmv2146[1];
setMv tempmv2146[0] = tempmv2142[0];
calculateMvCoeff tempmv2141[0] = DIVISION(tempmv2145,tempmv2146);
resetMv tempmv2147[1];
setVector ve2148 = {rcPpDual[14],len[-14]};
dotVectors tempmv2147[0] = <ve2148>;
resetMv tempmv2149[1];
resetMv tempmv2150[1];
setVector ve2151 = {nen[1,2,3]};
setVector ve2152 = {nen[1,2,3]};
dotVectors tempmv2150[0] = <ve2151,ve2152>;
resetMv tempmv2153[1];
setMv tempmv2153[0] = nen[1];
resetMv tempmv2154[1];
setMv tempmv2154[0] = tempmv2150[0];
calculateMvCoeff tempmv2149[0] = DIVISION(tempmv2153,tempmv2154);
resetMv tempmv2155[1];
resetMv tempmv2156[1];
setVector ve2157 = {nen[1,2,3]};
setVector ve2158 = {nen[1,2,3]};
dotVectors tempmv2156[0] = <ve2157,ve2158>;
resetMv tempmv2159[1];
setMv tempmv2159[0] = nen[2];
resetMv tempmv2160[1];
setMv tempmv2160[0] = tempmv2156[0];
calculateMvCoeff tempmv2155[0] = DIVISION(tempmv2159,tempmv2160);
setVector ve2161 = {tempmv2138[0],tempmv2147[0],len[-27]};
setVector ve2162 = {tempmv2141[0],tempmv2149[0],tempmv2155[0]};
dotVectors rc2[20] = <ve2161,ve2162>;

//rc2[21] = (((-((rcPpDual[9] - len[9]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((rcPpDual[15] - len[15]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((-(len[28])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((-(len[29])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv tempmv2163[1];
resetMv tempmv2164[1];
setVector ve2165 = {rcPpDual[9],len[-9]};
dotVectors tempmv2164[0] = <ve2165>;
setMv tempmv2163[0] = tempmv2164[-0];
resetMv tempmv2166[1];
resetMv tempmv2167[1];
setVector ve2168 = {nen[1,2,3]};
setVector ve2169 = {nen[1,2,3]};
dotVectors tempmv2167[0] = <ve2168,ve2169>;
resetMv tempmv2170[1];
setMv tempmv2170[0] = nen[4];
resetMv tempmv2171[1];
setMv tempmv2171[0] = tempmv2167[0];
calculateMvCoeff tempmv2166[0] = DIVISION(tempmv2170,tempmv2171);
resetMv tempmv2172[1];
setVector ve2173 = {rcPpDual[15],len[-15]};
dotVectors tempmv2172[0] = <ve2173>;
resetMv tempmv2174[1];
resetMv tempmv2175[1];
setVector ve2176 = {nen[1,2,3]};
setVector ve2177 = {nen[1,2,3]};
dotVectors tempmv2175[0] = <ve2176,ve2177>;
resetMv tempmv2178[1];
setMv tempmv2178[0] = nen[1];
resetMv tempmv2179[1];
setMv tempmv2179[0] = tempmv2175[0];
calculateMvCoeff tempmv2174[0] = DIVISION(tempmv2178,tempmv2179);
resetMv tempmv2180[1];
resetMv tempmv2181[1];
setVector ve2182 = {nen[1,2,3]};
setVector ve2183 = {nen[1,2,3]};
dotVectors tempmv2181[0] = <ve2182,ve2183>;
resetMv tempmv2184[1];
setMv tempmv2184[0] = nen[2];
resetMv tempmv2185[1];
setMv tempmv2185[0] = tempmv2181[0];
calculateMvCoeff tempmv2180[0] = DIVISION(tempmv2184,tempmv2185);
resetMv tempmv2186[1];
resetMv tempmv2187[1];
setVector ve2188 = {nen[1,2,3]};
setVector ve2189 = {nen[1,2,3]};
dotVectors tempmv2187[0] = <ve2188,ve2189>;
resetMv tempmv2190[1];
setMv tempmv2190[0] = nen[3];
resetMv tempmv2191[1];
setMv tempmv2191[0] = tempmv2187[0];
calculateMvCoeff tempmv2186[0] = DIVISION(tempmv2190,tempmv2191);
setVector ve2192 = {tempmv2163[0],tempmv2172[0],len[-28,-29]};
setVector ve2193 = {tempmv2166[0],tempmv2174[0],tempmv2180[0],tempmv2186[0]};
dotVectors rc2[21] = <ve2192,ve2193>;

//rc2[22] = (((((rcPpDual[10] - len[10]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((rcPpDual[11] - len[11]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + ((rcPpDual[13] - len[13]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[26])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((-(len[30])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv tempmv2194[1];
setVector ve2195 = {rcPpDual[10],len[-10]};
dotVectors tempmv2194[0] = <ve2195>;
resetMv tempmv2196[1];
resetMv tempmv2197[1];
setVector ve2198 = {nen[1,2,3]};
setVector ve2199 = {nen[1,2,3]};
dotVectors tempmv2197[0] = <ve2198,ve2199>;
resetMv tempmv2200[1];
setMv tempmv2200[0] = nen[4];
resetMv tempmv2201[1];
setMv tempmv2201[0] = tempmv2197[0];
calculateMvCoeff tempmv2196[0] = DIVISION(tempmv2200,tempmv2201);
resetMv tempmv2202[1];
resetMv tempmv2203[1];
setVector ve2204 = {rcPpDual[11],len[-11]};
dotVectors tempmv2203[0] = <ve2204>;
setMv tempmv2202[0] = tempmv2203[-0];
resetMv tempmv2205[1];
resetMv tempmv2206[1];
setVector ve2207 = {nen[1,2,3]};
setVector ve2208 = {nen[1,2,3]};
dotVectors tempmv2206[0] = <ve2207,ve2208>;
resetMv tempmv2209[1];
setMv tempmv2209[0] = nen[3];
resetMv tempmv2210[1];
setMv tempmv2210[0] = tempmv2206[0];
calculateMvCoeff tempmv2205[0] = DIVISION(tempmv2209,tempmv2210);
resetMv tempmv2211[1];
setVector ve2212 = {rcPpDual[13],len[-13]};
dotVectors tempmv2211[0] = <ve2212>;
resetMv tempmv2213[1];
resetMv tempmv2214[1];
setVector ve2215 = {nen[1,2,3]};
setVector ve2216 = {nen[1,2,3]};
dotVectors tempmv2214[0] = <ve2215,ve2216>;
resetMv tempmv2217[1];
setMv tempmv2217[0] = nen[2];
resetMv tempmv2218[1];
setMv tempmv2218[0] = tempmv2214[0];
calculateMvCoeff tempmv2213[0] = DIVISION(tempmv2217,tempmv2218);
resetMv tempmv2219[1];
resetMv tempmv2220[1];
setVector ve2221 = {nen[1,2,3]};
setVector ve2222 = {nen[1,2,3]};
dotVectors tempmv2220[0] = <ve2221,ve2222>;
resetMv tempmv2223[1];
setMv tempmv2223[0] = nen[1];
resetMv tempmv2224[1];
setMv tempmv2224[0] = tempmv2220[0];
calculateMvCoeff tempmv2219[0] = DIVISION(tempmv2223,tempmv2224);
resetMv tempmv2225[1];
resetMv tempmv2226[1];
setVector ve2227 = {nen[1,2,3]};
setVector ve2228 = {nen[1,2,3]};
dotVectors tempmv2226[0] = <ve2227,ve2228>;
resetMv tempmv2229[1];
setMv tempmv2229[0] = nen[4];
resetMv tempmv2230[1];
setMv tempmv2230[0] = tempmv2226[0];
calculateMvCoeff tempmv2225[0] = DIVISION(tempmv2229,tempmv2230);
setVector ve2231 = {tempmv2194[0],tempmv2202[0],tempmv2211[0],len[26,30]};
setVector ve2232 = {tempmv2196[0],tempmv2205[0],tempmv2213[0],tempmv2219[0],tempmv2225[0]};
dotVectors rc2[22] = <ve2231,ve2232>;

//rc2[23] = ((-((rcPpDual[12] - len[12]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((rcPpDual[14] - len[14]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[27])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv tempmv2233[1];
resetMv tempmv2234[1];
setVector ve2235 = {rcPpDual[12],len[-12]};
dotVectors tempmv2234[0] = <ve2235>;
setMv tempmv2233[0] = tempmv2234[-0];
resetMv tempmv2236[1];
resetMv tempmv2237[1];
setVector ve2238 = {nen[1,2,3]};
setVector ve2239 = {nen[1,2,3]};
dotVectors tempmv2237[0] = <ve2238,ve2239>;
resetMv tempmv2240[1];
setMv tempmv2240[0] = nen[3];
resetMv tempmv2241[1];
setMv tempmv2241[0] = tempmv2237[0];
calculateMvCoeff tempmv2236[0] = DIVISION(tempmv2240,tempmv2241);
resetMv tempmv2242[1];
setVector ve2243 = {rcPpDual[14],len[-14]};
dotVectors tempmv2242[0] = <ve2243>;
resetMv tempmv2244[1];
resetMv tempmv2245[1];
setVector ve2246 = {nen[1,2,3]};
setVector ve2247 = {nen[1,2,3]};
dotVectors tempmv2245[0] = <ve2246,ve2247>;
resetMv tempmv2248[1];
setMv tempmv2248[0] = nen[2];
resetMv tempmv2249[1];
setMv tempmv2249[0] = tempmv2245[0];
calculateMvCoeff tempmv2244[0] = DIVISION(tempmv2248,tempmv2249);
resetMv tempmv2250[1];
resetMv tempmv2251[1];
setVector ve2252 = {nen[1,2,3]};
setVector ve2253 = {nen[1,2,3]};
dotVectors tempmv2251[0] = <ve2252,ve2253>;
resetMv tempmv2254[1];
setMv tempmv2254[0] = nen[1];
resetMv tempmv2255[1];
setMv tempmv2255[0] = tempmv2251[0];
calculateMvCoeff tempmv2250[0] = DIVISION(tempmv2254,tempmv2255);
setVector ve2256 = {tempmv2233[0],tempmv2242[0],len[27]};
setVector ve2257 = {tempmv2236[0],tempmv2244[0],tempmv2250[0]};
dotVectors rc2[23] = <ve2256,ve2257>;

//rc2[24] = (((-((rcPpDual[12] - len[12]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((rcPpDual[15] - len[15]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[28])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + ((-(len[30])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv tempmv2258[1];
resetMv tempmv2259[1];
setVector ve2260 = {rcPpDual[12],len[-12]};
dotVectors tempmv2259[0] = <ve2260>;
setMv tempmv2258[0] = tempmv2259[-0];
resetMv tempmv2261[1];
resetMv tempmv2262[1];
setVector ve2263 = {nen[1,2,3]};
setVector ve2264 = {nen[1,2,3]};
dotVectors tempmv2262[0] = <ve2263,ve2264>;
resetMv tempmv2265[1];
setMv tempmv2265[0] = nen[4];
resetMv tempmv2266[1];
setMv tempmv2266[0] = tempmv2262[0];
calculateMvCoeff tempmv2261[0] = DIVISION(tempmv2265,tempmv2266);
resetMv tempmv2267[1];
setVector ve2268 = {rcPpDual[15],len[-15]};
dotVectors tempmv2267[0] = <ve2268>;
resetMv tempmv2269[1];
resetMv tempmv2270[1];
setVector ve2271 = {nen[1,2,3]};
setVector ve2272 = {nen[1,2,3]};
dotVectors tempmv2270[0] = <ve2271,ve2272>;
resetMv tempmv2273[1];
setMv tempmv2273[0] = nen[2];
resetMv tempmv2274[1];
setMv tempmv2274[0] = tempmv2270[0];
calculateMvCoeff tempmv2269[0] = DIVISION(tempmv2273,tempmv2274);
resetMv tempmv2275[1];
resetMv tempmv2276[1];
setVector ve2277 = {nen[1,2,3]};
setVector ve2278 = {nen[1,2,3]};
dotVectors tempmv2276[0] = <ve2277,ve2278>;
resetMv tempmv2279[1];
setMv tempmv2279[0] = nen[1];
resetMv tempmv2280[1];
setMv tempmv2280[0] = tempmv2276[0];
calculateMvCoeff tempmv2275[0] = DIVISION(tempmv2279,tempmv2280);
resetMv tempmv2281[1];
resetMv tempmv2282[1];
setVector ve2283 = {nen[1,2,3]};
setVector ve2284 = {nen[1,2,3]};
dotVectors tempmv2282[0] = <ve2283,ve2284>;
resetMv tempmv2285[1];
setMv tempmv2285[0] = nen[3];
resetMv tempmv2286[1];
setMv tempmv2286[0] = tempmv2282[0];
calculateMvCoeff tempmv2281[0] = DIVISION(tempmv2285,tempmv2286);
setVector ve2287 = {tempmv2258[0],tempmv2267[0],len[28,-30]};
setVector ve2288 = {tempmv2261[0],tempmv2269[0],tempmv2275[0],tempmv2281[0]};
dotVectors rc2[24] = <ve2287,ve2288>;

//rc2[25] = (((-((rcPpDual[14] - len[14]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((rcPpDual[15] - len[15]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[29])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((-(len[30])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv tempmv2289[1];
resetMv tempmv2290[1];
setVector ve2291 = {rcPpDual[14],len[-14]};
dotVectors tempmv2290[0] = <ve2291>;
setMv tempmv2289[0] = tempmv2290[-0];
resetMv tempmv2292[1];
resetMv tempmv2293[1];
setVector ve2294 = {nen[1,2,3]};
setVector ve2295 = {nen[1,2,3]};
dotVectors tempmv2293[0] = <ve2294,ve2295>;
resetMv tempmv2296[1];
setMv tempmv2296[0] = nen[4];
resetMv tempmv2297[1];
setMv tempmv2297[0] = tempmv2293[0];
calculateMvCoeff tempmv2292[0] = DIVISION(tempmv2296,tempmv2297);
resetMv tempmv2298[1];
setVector ve2299 = {rcPpDual[15],len[-15]};
dotVectors tempmv2298[0] = <ve2299>;
resetMv tempmv2300[1];
resetMv tempmv2301[1];
setVector ve2302 = {nen[1,2,3]};
setVector ve2303 = {nen[1,2,3]};
dotVectors tempmv2301[0] = <ve2302,ve2303>;
resetMv tempmv2304[1];
setMv tempmv2304[0] = nen[3];
resetMv tempmv2305[1];
setMv tempmv2305[0] = tempmv2301[0];
calculateMvCoeff tempmv2300[0] = DIVISION(tempmv2304,tempmv2305);
resetMv tempmv2306[1];
resetMv tempmv2307[1];
setVector ve2308 = {nen[1,2,3]};
setVector ve2309 = {nen[1,2,3]};
dotVectors tempmv2307[0] = <ve2308,ve2309>;
resetMv tempmv2310[1];
setMv tempmv2310[0] = nen[1];
resetMv tempmv2311[1];
setMv tempmv2311[0] = tempmv2307[0];
calculateMvCoeff tempmv2306[0] = DIVISION(tempmv2310,tempmv2311);
resetMv tempmv2312[1];
resetMv tempmv2313[1];
setVector ve2314 = {nen[1,2,3]};
setVector ve2315 = {nen[1,2,3]};
dotVectors tempmv2313[0] = <ve2314,ve2315>;
resetMv tempmv2316[1];
setMv tempmv2316[0] = nen[2];
resetMv tempmv2317[1];
setMv tempmv2317[0] = tempmv2313[0];
calculateMvCoeff tempmv2312[0] = DIVISION(tempmv2316,tempmv2317);
setVector ve2318 = {tempmv2289[0],tempmv2298[0],len[29,30]};
setVector ve2319 = {tempmv2292[0],tempmv2300[0],tempmv2306[0],tempmv2312[0]};
dotVectors rc2[25] = <ve2318,ve2319>;

//rc2[26] = (((((-(len[16])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((-(len[17])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + ((-(len[19])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[22])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((-(len[31])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv tempmv2320[1];
resetMv tempmv2321[1];
setVector ve2322 = {nen[1,2,3]};
setVector ve2323 = {nen[1,2,3]};
dotVectors tempmv2321[0] = <ve2322,ve2323>;
resetMv tempmv2324[1];
setMv tempmv2324[0] = nen[4];
resetMv tempmv2325[1];
setMv tempmv2325[0] = tempmv2321[0];
calculateMvCoeff tempmv2320[0] = DIVISION(tempmv2324,tempmv2325);
resetMv tempmv2326[1];
resetMv tempmv2327[1];
setVector ve2328 = {nen[1,2,3]};
setVector ve2329 = {nen[1,2,3]};
dotVectors tempmv2327[0] = <ve2328,ve2329>;
resetMv tempmv2330[1];
setMv tempmv2330[0] = nen[3];
resetMv tempmv2331[1];
setMv tempmv2331[0] = tempmv2327[0];
calculateMvCoeff tempmv2326[0] = DIVISION(tempmv2330,tempmv2331);
resetMv tempmv2332[1];
resetMv tempmv2333[1];
setVector ve2334 = {nen[1,2,3]};
setVector ve2335 = {nen[1,2,3]};
dotVectors tempmv2333[0] = <ve2334,ve2335>;
resetMv tempmv2336[1];
setMv tempmv2336[0] = nen[2];
resetMv tempmv2337[1];
setMv tempmv2337[0] = tempmv2333[0];
calculateMvCoeff tempmv2332[0] = DIVISION(tempmv2336,tempmv2337);
resetMv tempmv2338[1];
resetMv tempmv2339[1];
setVector ve2340 = {nen[1,2,3]};
setVector ve2341 = {nen[1,2,3]};
dotVectors tempmv2339[0] = <ve2340,ve2341>;
resetMv tempmv2342[1];
setMv tempmv2342[0] = nen[1];
resetMv tempmv2343[1];
setMv tempmv2343[0] = tempmv2339[0];
calculateMvCoeff tempmv2338[0] = DIVISION(tempmv2342,tempmv2343);
resetMv tempmv2344[1];
resetMv tempmv2345[1];
setVector ve2346 = {nen[1,2,3]};
setVector ve2347 = {nen[1,2,3]};
dotVectors tempmv2345[0] = <ve2346,ve2347>;
resetMv tempmv2348[1];
setMv tempmv2348[0] = nen[4];
resetMv tempmv2349[1];
setMv tempmv2349[0] = tempmv2345[0];
calculateMvCoeff tempmv2344[0] = DIVISION(tempmv2348,tempmv2349);
setVector ve2350 = {len[-16,17,-19,22,31]};
setVector ve2351 = {tempmv2320[0],tempmv2326[0],tempmv2332[0],tempmv2338[0],tempmv2344[0]};
dotVectors rc2[26] = <ve2350,ve2351>;

//rc2[27] = ((-((-(len[18])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((-(len[20])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[23])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv tempmv2352[1];
resetMv tempmv2353[1];
setVector ve2354 = {nen[1,2,3]};
setVector ve2355 = {nen[1,2,3]};
dotVectors tempmv2353[0] = <ve2354,ve2355>;
resetMv tempmv2356[1];
setMv tempmv2356[0] = nen[3];
resetMv tempmv2357[1];
setMv tempmv2357[0] = tempmv2353[0];
calculateMvCoeff tempmv2352[0] = DIVISION(tempmv2356,tempmv2357);
resetMv tempmv2358[1];
resetMv tempmv2359[1];
setVector ve2360 = {nen[1,2,3]};
setVector ve2361 = {nen[1,2,3]};
dotVectors tempmv2359[0] = <ve2360,ve2361>;
resetMv tempmv2362[1];
setMv tempmv2362[0] = nen[2];
resetMv tempmv2363[1];
setMv tempmv2363[0] = tempmv2359[0];
calculateMvCoeff tempmv2358[0] = DIVISION(tempmv2362,tempmv2363);
resetMv tempmv2364[1];
resetMv tempmv2365[1];
setVector ve2366 = {nen[1,2,3]};
setVector ve2367 = {nen[1,2,3]};
dotVectors tempmv2365[0] = <ve2366,ve2367>;
resetMv tempmv2368[1];
setMv tempmv2368[0] = nen[1];
resetMv tempmv2369[1];
setMv tempmv2369[0] = tempmv2365[0];
calculateMvCoeff tempmv2364[0] = DIVISION(tempmv2368,tempmv2369);
setVector ve2370 = {len[18,-20,23]};
setVector ve2371 = {tempmv2352[0],tempmv2358[0],tempmv2364[0]};
dotVectors rc2[27] = <ve2370,ve2371>;

//rc2[28] = (((-((-(len[18])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((-(len[21])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[24])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + ((-(len[31])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv tempmv2372[1];
resetMv tempmv2373[1];
setVector ve2374 = {nen[1,2,3]};
setVector ve2375 = {nen[1,2,3]};
dotVectors tempmv2373[0] = <ve2374,ve2375>;
resetMv tempmv2376[1];
setMv tempmv2376[0] = nen[4];
resetMv tempmv2377[1];
setMv tempmv2377[0] = tempmv2373[0];
calculateMvCoeff tempmv2372[0] = DIVISION(tempmv2376,tempmv2377);
resetMv tempmv2378[1];
resetMv tempmv2379[1];
setVector ve2380 = {nen[1,2,3]};
setVector ve2381 = {nen[1,2,3]};
dotVectors tempmv2379[0] = <ve2380,ve2381>;
resetMv tempmv2382[1];
setMv tempmv2382[0] = nen[2];
resetMv tempmv2383[1];
setMv tempmv2383[0] = tempmv2379[0];
calculateMvCoeff tempmv2378[0] = DIVISION(tempmv2382,tempmv2383);
resetMv tempmv2384[1];
resetMv tempmv2385[1];
setVector ve2386 = {nen[1,2,3]};
setVector ve2387 = {nen[1,2,3]};
dotVectors tempmv2385[0] = <ve2386,ve2387>;
resetMv tempmv2388[1];
setMv tempmv2388[0] = nen[1];
resetMv tempmv2389[1];
setMv tempmv2389[0] = tempmv2385[0];
calculateMvCoeff tempmv2384[0] = DIVISION(tempmv2388,tempmv2389);
resetMv tempmv2390[1];
resetMv tempmv2391[1];
setVector ve2392 = {nen[1,2,3]};
setVector ve2393 = {nen[1,2,3]};
dotVectors tempmv2391[0] = <ve2392,ve2393>;
resetMv tempmv2394[1];
setMv tempmv2394[0] = nen[3];
resetMv tempmv2395[1];
setMv tempmv2395[0] = tempmv2391[0];
calculateMvCoeff tempmv2390[0] = DIVISION(tempmv2394,tempmv2395);
setVector ve2396 = {len[18,-21,24,-31]};
setVector ve2397 = {tempmv2372[0],tempmv2378[0],tempmv2384[0],tempmv2390[0]};
dotVectors rc2[28] = <ve2396,ve2397>;

//rc2[29] = (((-((-(len[20])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((-(len[21])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[25])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((-(len[31])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv tempmv2398[1];
resetMv tempmv2399[1];
setVector ve2400 = {nen[1,2,3]};
setVector ve2401 = {nen[1,2,3]};
dotVectors tempmv2399[0] = <ve2400,ve2401>;
resetMv tempmv2402[1];
setMv tempmv2402[0] = nen[4];
resetMv tempmv2403[1];
setMv tempmv2403[0] = tempmv2399[0];
calculateMvCoeff tempmv2398[0] = DIVISION(tempmv2402,tempmv2403);
resetMv tempmv2404[1];
resetMv tempmv2405[1];
setVector ve2406 = {nen[1,2,3]};
setVector ve2407 = {nen[1,2,3]};
dotVectors tempmv2405[0] = <ve2406,ve2407>;
resetMv tempmv2408[1];
setMv tempmv2408[0] = nen[3];
resetMv tempmv2409[1];
setMv tempmv2409[0] = tempmv2405[0];
calculateMvCoeff tempmv2404[0] = DIVISION(tempmv2408,tempmv2409);
resetMv tempmv2410[1];
resetMv tempmv2411[1];
setVector ve2412 = {nen[1,2,3]};
setVector ve2413 = {nen[1,2,3]};
dotVectors tempmv2411[0] = <ve2412,ve2413>;
resetMv tempmv2414[1];
setMv tempmv2414[0] = nen[1];
resetMv tempmv2415[1];
setMv tempmv2415[0] = tempmv2411[0];
calculateMvCoeff tempmv2410[0] = DIVISION(tempmv2414,tempmv2415);
resetMv tempmv2416[1];
resetMv tempmv2417[1];
setVector ve2418 = {nen[1,2,3]};
setVector ve2419 = {nen[1,2,3]};
dotVectors tempmv2417[0] = <ve2418,ve2419>;
resetMv tempmv2420[1];
setMv tempmv2420[0] = nen[2];
resetMv tempmv2421[1];
setMv tempmv2421[0] = tempmv2417[0];
calculateMvCoeff tempmv2416[0] = DIVISION(tempmv2420,tempmv2421);
setVector ve2422 = {len[20,-21,25,31]};
setVector ve2423 = {tempmv2398[0],tempmv2404[0],tempmv2410[0],tempmv2416[0]};
dotVectors rc2[29] = <ve2422,ve2423>;

//rc2[30] = (((-((-(len[23])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((-(len[24])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[25])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + ((-(len[31])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv tempmv2424[1];
resetMv tempmv2425[1];
setVector ve2426 = {nen[1,2,3]};
setVector ve2427 = {nen[1,2,3]};
dotVectors tempmv2425[0] = <ve2426,ve2427>;
resetMv tempmv2428[1];
setMv tempmv2428[0] = nen[4];
resetMv tempmv2429[1];
setMv tempmv2429[0] = tempmv2425[0];
calculateMvCoeff tempmv2424[0] = DIVISION(tempmv2428,tempmv2429);
resetMv tempmv2430[1];
resetMv tempmv2431[1];
setVector ve2432 = {nen[1,2,3]};
setVector ve2433 = {nen[1,2,3]};
dotVectors tempmv2431[0] = <ve2432,ve2433>;
resetMv tempmv2434[1];
setMv tempmv2434[0] = nen[3];
resetMv tempmv2435[1];
setMv tempmv2435[0] = tempmv2431[0];
calculateMvCoeff tempmv2430[0] = DIVISION(tempmv2434,tempmv2435);
resetMv tempmv2436[1];
resetMv tempmv2437[1];
setVector ve2438 = {nen[1,2,3]};
setVector ve2439 = {nen[1,2,3]};
dotVectors tempmv2437[0] = <ve2438,ve2439>;
resetMv tempmv2440[1];
setMv tempmv2440[0] = nen[2];
resetMv tempmv2441[1];
setMv tempmv2441[0] = tempmv2437[0];
calculateMvCoeff tempmv2436[0] = DIVISION(tempmv2440,tempmv2441);
resetMv tempmv2442[1];
resetMv tempmv2443[1];
setVector ve2444 = {nen[1,2,3]};
setVector ve2445 = {nen[1,2,3]};
dotVectors tempmv2443[0] = <ve2444,ve2445>;
resetMv tempmv2446[1];
setMv tempmv2446[0] = nen[1];
resetMv tempmv2447[1];
setMv tempmv2447[0] = tempmv2443[0];
calculateMvCoeff tempmv2442[0] = DIVISION(tempmv2446,tempmv2447);
setVector ve2448 = {len[23,-24,25,-31]};
setVector ve2449 = {tempmv2424[0],tempmv2430[0],tempmv2436[0],tempmv2442[0]};
dotVectors rc2[30] = <ve2448,ve2449>;

//rc2[31] = (((-((-(len[27])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((-(len[28])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[29])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + ((-(len[30])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv tempmv2450[1];
resetMv tempmv2451[1];
setVector ve2452 = {nen[1,2,3]};
setVector ve2453 = {nen[1,2,3]};
dotVectors tempmv2451[0] = <ve2452,ve2453>;
resetMv tempmv2454[1];
setMv tempmv2454[0] = nen[4];
resetMv tempmv2455[1];
setMv tempmv2455[0] = tempmv2451[0];
calculateMvCoeff tempmv2450[0] = DIVISION(tempmv2454,tempmv2455);
resetMv tempmv2456[1];
resetMv tempmv2457[1];
setVector ve2458 = {nen[1,2,3]};
setVector ve2459 = {nen[1,2,3]};
dotVectors tempmv2457[0] = <ve2458,ve2459>;
resetMv tempmv2460[1];
setMv tempmv2460[0] = nen[3];
resetMv tempmv2461[1];
setMv tempmv2461[0] = tempmv2457[0];
calculateMvCoeff tempmv2456[0] = DIVISION(tempmv2460,tempmv2461);
resetMv tempmv2462[1];
resetMv tempmv2463[1];
setVector ve2464 = {nen[1,2,3]};
setVector ve2465 = {nen[1,2,3]};
dotVectors tempmv2463[0] = <ve2464,ve2465>;
resetMv tempmv2466[1];
setMv tempmv2466[0] = nen[2];
resetMv tempmv2467[1];
setMv tempmv2467[0] = tempmv2463[0];
calculateMvCoeff tempmv2462[0] = DIVISION(tempmv2466,tempmv2467);
resetMv tempmv2468[1];
resetMv tempmv2469[1];
setVector ve2470 = {nen[1,2,3]};
setVector ve2471 = {nen[1,2,3]};
dotVectors tempmv2469[0] = <ve2470,ve2471>;
resetMv tempmv2472[1];
setMv tempmv2472[0] = nen[1];
resetMv tempmv2473[1];
setMv tempmv2473[0] = tempmv2469[0];
calculateMvCoeff tempmv2468[0] = DIVISION(tempmv2472,tempmv2473);
setVector ve2474 = {len[27,-28,29,-30]};
setVector ve2475 = {tempmv2450[0],tempmv2456[0],tempmv2462[0],tempmv2468[0]};
dotVectors rc2[31] = <ve2474,ve2475>;

//rc2N[1] = ((((((((((((((((-(rc2[0])) * ((-(rc2[9])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))) + ((-(rc2[1])) * ((-(rc2[5])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + (-((-(rc2[2])) * (rc2[18] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[3])) * (rc2[20] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + ((-(rc2[5])) * (rc2[21] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[6])) * ((-(rc2[12])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[7])) * ((-(rc2[14])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + (-((-(rc2[9])) * ((-(rc2[15])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[10])) * (rc2[27] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + ((-(rc2[12])) * (rc2[28] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[14])) * (rc2[29] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + (-((-(rc2[16])) * (rc2[23] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + ((-(rc2[18])) * (rc2[24] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[20])) * (rc2[25] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + (-((-(rc2[23])) * ((-(rc2[31])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + ((-(rc2[27])) * (rc2[30] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))
resetMv rc2N[32];
resetMv tempmv2476[1];
resetMv tempmv2477[1];
setVector ve2478 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2479 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2477[0] = <ve2478,ve2479>;
resetMv tempmv2480[1];
setMv tempmv2480[0] = rc2[-9];
resetMv tempmv2481[1];
setMv tempmv2481[0] = tempmv2477[0];
calculateMvCoeff tempmv2476[0] = DIVISION(tempmv2480,tempmv2481);
resetMv tempmv2482[1];
resetMv tempmv2483[1];
setVector ve2484 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2485 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2483[0] = <ve2484,ve2485>;
resetMv tempmv2486[1];
setMv tempmv2486[0] = rc2[-5];
resetMv tempmv2487[1];
setMv tempmv2487[0] = tempmv2483[0];
calculateMvCoeff tempmv2482[0] = DIVISION(tempmv2486,tempmv2487);
resetMv tempmv2488[1];
resetMv tempmv2489[1];
setVector ve2490 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2491 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2489[0] = <ve2490,ve2491>;
resetMv tempmv2492[1];
setMv tempmv2492[0] = rc2[18];
resetMv tempmv2493[1];
setMv tempmv2493[0] = tempmv2489[0];
calculateMvCoeff tempmv2488[0] = DIVISION(tempmv2492,tempmv2493);
resetMv tempmv2494[1];
resetMv tempmv2495[1];
setVector ve2496 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2497 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2495[0] = <ve2496,ve2497>;
resetMv tempmv2498[1];
setMv tempmv2498[0] = rc2[20];
resetMv tempmv2499[1];
setMv tempmv2499[0] = tempmv2495[0];
calculateMvCoeff tempmv2494[0] = DIVISION(tempmv2498,tempmv2499);
resetMv tempmv2500[1];
resetMv tempmv2501[1];
setVector ve2502 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2503 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2501[0] = <ve2502,ve2503>;
resetMv tempmv2504[1];
setMv tempmv2504[0] = rc2[21];
resetMv tempmv2505[1];
setMv tempmv2505[0] = tempmv2501[0];
calculateMvCoeff tempmv2500[0] = DIVISION(tempmv2504,tempmv2505);
resetMv tempmv2506[1];
resetMv tempmv2507[1];
setVector ve2508 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2509 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2507[0] = <ve2508,ve2509>;
resetMv tempmv2510[1];
setMv tempmv2510[0] = rc2[-12];
resetMv tempmv2511[1];
setMv tempmv2511[0] = tempmv2507[0];
calculateMvCoeff tempmv2506[0] = DIVISION(tempmv2510,tempmv2511);
resetMv tempmv2512[1];
resetMv tempmv2513[1];
setVector ve2514 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2515 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2513[0] = <ve2514,ve2515>;
resetMv tempmv2516[1];
setMv tempmv2516[0] = rc2[-14];
resetMv tempmv2517[1];
setMv tempmv2517[0] = tempmv2513[0];
calculateMvCoeff tempmv2512[0] = DIVISION(tempmv2516,tempmv2517);
resetMv tempmv2518[1];
resetMv tempmv2519[1];
setVector ve2520 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2521 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2519[0] = <ve2520,ve2521>;
resetMv tempmv2522[1];
setMv tempmv2522[0] = rc2[-15];
resetMv tempmv2523[1];
setMv tempmv2523[0] = tempmv2519[0];
calculateMvCoeff tempmv2518[0] = DIVISION(tempmv2522,tempmv2523);
resetMv tempmv2524[1];
resetMv tempmv2525[1];
setVector ve2526 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2527 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2525[0] = <ve2526,ve2527>;
resetMv tempmv2528[1];
setMv tempmv2528[0] = rc2[27];
resetMv tempmv2529[1];
setMv tempmv2529[0] = tempmv2525[0];
calculateMvCoeff tempmv2524[0] = DIVISION(tempmv2528,tempmv2529);
resetMv tempmv2530[1];
resetMv tempmv2531[1];
setVector ve2532 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2533 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2531[0] = <ve2532,ve2533>;
resetMv tempmv2534[1];
setMv tempmv2534[0] = rc2[28];
resetMv tempmv2535[1];
setMv tempmv2535[0] = tempmv2531[0];
calculateMvCoeff tempmv2530[0] = DIVISION(tempmv2534,tempmv2535);
resetMv tempmv2536[1];
resetMv tempmv2537[1];
setVector ve2538 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2539 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2537[0] = <ve2538,ve2539>;
resetMv tempmv2540[1];
setMv tempmv2540[0] = rc2[29];
resetMv tempmv2541[1];
setMv tempmv2541[0] = tempmv2537[0];
calculateMvCoeff tempmv2536[0] = DIVISION(tempmv2540,tempmv2541);
resetMv tempmv2542[1];
resetMv tempmv2543[1];
setVector ve2544 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2545 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2543[0] = <ve2544,ve2545>;
resetMv tempmv2546[1];
setMv tempmv2546[0] = rc2[23];
resetMv tempmv2547[1];
setMv tempmv2547[0] = tempmv2543[0];
calculateMvCoeff tempmv2542[0] = DIVISION(tempmv2546,tempmv2547);
resetMv tempmv2548[1];
resetMv tempmv2549[1];
setVector ve2550 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2551 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2549[0] = <ve2550,ve2551>;
resetMv tempmv2552[1];
setMv tempmv2552[0] = rc2[24];
resetMv tempmv2553[1];
setMv tempmv2553[0] = tempmv2549[0];
calculateMvCoeff tempmv2548[0] = DIVISION(tempmv2552,tempmv2553);
resetMv tempmv2554[1];
resetMv tempmv2555[1];
setVector ve2556 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2557 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2555[0] = <ve2556,ve2557>;
resetMv tempmv2558[1];
setMv tempmv2558[0] = rc2[25];
resetMv tempmv2559[1];
setMv tempmv2559[0] = tempmv2555[0];
calculateMvCoeff tempmv2554[0] = DIVISION(tempmv2558,tempmv2559);
resetMv tempmv2560[1];
resetMv tempmv2561[1];
setVector ve2562 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2563 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2561[0] = <ve2562,ve2563>;
resetMv tempmv2564[1];
setMv tempmv2564[0] = rc2[-31];
resetMv tempmv2565[1];
setMv tempmv2565[0] = tempmv2561[0];
calculateMvCoeff tempmv2560[0] = DIVISION(tempmv2564,tempmv2565);
resetMv tempmv2566[1];
resetMv tempmv2567[1];
setVector ve2568 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2569 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2567[0] = <ve2568,ve2569>;
resetMv tempmv2570[1];
setMv tempmv2570[0] = rc2[30];
resetMv tempmv2571[1];
setMv tempmv2571[0] = tempmv2567[0];
calculateMvCoeff tempmv2566[0] = DIVISION(tempmv2570,tempmv2571);
setVector ve2572 = {rc2[-0,-1,2,3,-5,-6,-7,9,10,-12,-14,16,-18,-20,23,-27]};
setVector ve2573 = {tempmv2476[0],tempmv2482[0],tempmv2488[0],tempmv2494[0],tempmv2500[0],tempmv2506[0],tempmv2512[0],tempmv2518[0],tempmv2524[0],tempmv2530[0],tempmv2536[0],tempmv2542[0],tempmv2548[0],tempmv2554[0],tempmv2560[0],tempmv2566[0]};
dotVectors rc2N[1] = <ve2572,ve2573>;

//rc2N[2] = ((((((((((((((((-(rc2[0])) * ((-(rc2[12])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))) + ((-(rc2[1])) * (rc2[18] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[2])) * ((-(rc2[5])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + (-((-(rc2[3])) * (rc2[23] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + ((-(rc2[5])) * (rc2[24] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + (-((-(rc2[6])) * ((-(rc2[9])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + ((-(rc2[7])) * (rc2[27] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + (-((-(rc2[9])) * (rc2[28] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + ((-(rc2[10])) * ((-(rc2[14])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + (-((-(rc2[12])) * ((-(rc2[15])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + ((-(rc2[14])) * (rc2[30] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[16])) * (rc2[20] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + (-((-(rc2[18])) * (rc2[21] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + ((-(rc2[20])) * ((-(rc2[31])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[23])) * (rc2[25] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + (-((-(rc2[27])) * (rc2[29] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))
resetMv tempmv2574[1];
resetMv tempmv2575[1];
setVector ve2576 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2577 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2575[0] = <ve2576,ve2577>;
resetMv tempmv2578[1];
setMv tempmv2578[0] = rc2[-12];
resetMv tempmv2579[1];
setMv tempmv2579[0] = tempmv2575[0];
calculateMvCoeff tempmv2574[0] = DIVISION(tempmv2578,tempmv2579);
resetMv tempmv2580[1];
resetMv tempmv2581[1];
setVector ve2582 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2583 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2581[0] = <ve2582,ve2583>;
resetMv tempmv2584[1];
setMv tempmv2584[0] = rc2[18];
resetMv tempmv2585[1];
setMv tempmv2585[0] = tempmv2581[0];
calculateMvCoeff tempmv2580[0] = DIVISION(tempmv2584,tempmv2585);
resetMv tempmv2586[1];
resetMv tempmv2587[1];
setVector ve2588 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2589 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2587[0] = <ve2588,ve2589>;
resetMv tempmv2590[1];
setMv tempmv2590[0] = rc2[-5];
resetMv tempmv2591[1];
setMv tempmv2591[0] = tempmv2587[0];
calculateMvCoeff tempmv2586[0] = DIVISION(tempmv2590,tempmv2591);
resetMv tempmv2592[1];
resetMv tempmv2593[1];
setVector ve2594 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2595 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2593[0] = <ve2594,ve2595>;
resetMv tempmv2596[1];
setMv tempmv2596[0] = rc2[23];
resetMv tempmv2597[1];
setMv tempmv2597[0] = tempmv2593[0];
calculateMvCoeff tempmv2592[0] = DIVISION(tempmv2596,tempmv2597);
resetMv tempmv2598[1];
resetMv tempmv2599[1];
setVector ve2600 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2601 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2599[0] = <ve2600,ve2601>;
resetMv tempmv2602[1];
setMv tempmv2602[0] = rc2[24];
resetMv tempmv2603[1];
setMv tempmv2603[0] = tempmv2599[0];
calculateMvCoeff tempmv2598[0] = DIVISION(tempmv2602,tempmv2603);
resetMv tempmv2604[1];
resetMv tempmv2605[1];
setVector ve2606 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2607 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2605[0] = <ve2606,ve2607>;
resetMv tempmv2608[1];
setMv tempmv2608[0] = rc2[-9];
resetMv tempmv2609[1];
setMv tempmv2609[0] = tempmv2605[0];
calculateMvCoeff tempmv2604[0] = DIVISION(tempmv2608,tempmv2609);
resetMv tempmv2610[1];
resetMv tempmv2611[1];
setVector ve2612 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2613 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2611[0] = <ve2612,ve2613>;
resetMv tempmv2614[1];
setMv tempmv2614[0] = rc2[27];
resetMv tempmv2615[1];
setMv tempmv2615[0] = tempmv2611[0];
calculateMvCoeff tempmv2610[0] = DIVISION(tempmv2614,tempmv2615);
resetMv tempmv2616[1];
resetMv tempmv2617[1];
setVector ve2618 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2619 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2617[0] = <ve2618,ve2619>;
resetMv tempmv2620[1];
setMv tempmv2620[0] = rc2[28];
resetMv tempmv2621[1];
setMv tempmv2621[0] = tempmv2617[0];
calculateMvCoeff tempmv2616[0] = DIVISION(tempmv2620,tempmv2621);
resetMv tempmv2622[1];
resetMv tempmv2623[1];
setVector ve2624 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2625 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2623[0] = <ve2624,ve2625>;
resetMv tempmv2626[1];
setMv tempmv2626[0] = rc2[-14];
resetMv tempmv2627[1];
setMv tempmv2627[0] = tempmv2623[0];
calculateMvCoeff tempmv2622[0] = DIVISION(tempmv2626,tempmv2627);
resetMv tempmv2628[1];
resetMv tempmv2629[1];
setVector ve2630 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2631 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2629[0] = <ve2630,ve2631>;
resetMv tempmv2632[1];
setMv tempmv2632[0] = rc2[-15];
resetMv tempmv2633[1];
setMv tempmv2633[0] = tempmv2629[0];
calculateMvCoeff tempmv2628[0] = DIVISION(tempmv2632,tempmv2633);
resetMv tempmv2634[1];
resetMv tempmv2635[1];
setVector ve2636 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2637 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2635[0] = <ve2636,ve2637>;
resetMv tempmv2638[1];
setMv tempmv2638[0] = rc2[30];
resetMv tempmv2639[1];
setMv tempmv2639[0] = tempmv2635[0];
calculateMvCoeff tempmv2634[0] = DIVISION(tempmv2638,tempmv2639);
resetMv tempmv2640[1];
resetMv tempmv2641[1];
setVector ve2642 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2643 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2641[0] = <ve2642,ve2643>;
resetMv tempmv2644[1];
setMv tempmv2644[0] = rc2[20];
resetMv tempmv2645[1];
setMv tempmv2645[0] = tempmv2641[0];
calculateMvCoeff tempmv2640[0] = DIVISION(tempmv2644,tempmv2645);
resetMv tempmv2646[1];
resetMv tempmv2647[1];
setVector ve2648 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2649 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2647[0] = <ve2648,ve2649>;
resetMv tempmv2650[1];
setMv tempmv2650[0] = rc2[21];
resetMv tempmv2651[1];
setMv tempmv2651[0] = tempmv2647[0];
calculateMvCoeff tempmv2646[0] = DIVISION(tempmv2650,tempmv2651);
resetMv tempmv2652[1];
resetMv tempmv2653[1];
setVector ve2654 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2655 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2653[0] = <ve2654,ve2655>;
resetMv tempmv2656[1];
setMv tempmv2656[0] = rc2[-31];
resetMv tempmv2657[1];
setMv tempmv2657[0] = tempmv2653[0];
calculateMvCoeff tempmv2652[0] = DIVISION(tempmv2656,tempmv2657);
resetMv tempmv2658[1];
resetMv tempmv2659[1];
setVector ve2660 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2661 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2659[0] = <ve2660,ve2661>;
resetMv tempmv2662[1];
setMv tempmv2662[0] = rc2[25];
resetMv tempmv2663[1];
setMv tempmv2663[0] = tempmv2659[0];
calculateMvCoeff tempmv2658[0] = DIVISION(tempmv2662,tempmv2663);
resetMv tempmv2664[1];
resetMv tempmv2665[1];
setVector ve2666 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2667 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2665[0] = <ve2666,ve2667>;
resetMv tempmv2668[1];
setMv tempmv2668[0] = rc2[29];
resetMv tempmv2669[1];
setMv tempmv2669[0] = tempmv2665[0];
calculateMvCoeff tempmv2664[0] = DIVISION(tempmv2668,tempmv2669);
setVector ve2670 = {rc2[-0,-1,-2,3,-5,6,-7,9,-10,12,-14,-16,18,-20,-23,27]};
setVector ve2671 = {tempmv2574[0],tempmv2580[0],tempmv2586[0],tempmv2592[0],tempmv2598[0],tempmv2604[0],tempmv2610[0],tempmv2616[0],tempmv2622[0],tempmv2628[0],tempmv2634[0],tempmv2640[0],tempmv2646[0],tempmv2652[0],tempmv2658[0],tempmv2664[0]};
dotVectors rc2N[2] = <ve2670,ve2671>;

//rc2N[3] = ((((((((((((((((-(rc2[0])) * ((-(rc2[14])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))) + ((-(rc2[1])) * (rc2[20] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[2])) * (rc2[23] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[3])) * ((-(rc2[5])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[5])) * (rc2[25] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + (-((-(rc2[6])) * (rc2[27] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[7])) * ((-(rc2[9])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[9])) * (rc2[29] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[10])) * ((-(rc2[12])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[12])) * (rc2[30] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[14])) * ((-(rc2[15])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[16])) * (rc2[18] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[18])) * ((-(rc2[31])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[20])) * (rc2[21] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[23])) * (rc2[24] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + ((-(rc2[27])) * (rc2[28] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))
resetMv tempmv2672[1];
resetMv tempmv2673[1];
setVector ve2674 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2675 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2673[0] = <ve2674,ve2675>;
resetMv tempmv2676[1];
setMv tempmv2676[0] = rc2[-14];
resetMv tempmv2677[1];
setMv tempmv2677[0] = tempmv2673[0];
calculateMvCoeff tempmv2672[0] = DIVISION(tempmv2676,tempmv2677);
resetMv tempmv2678[1];
resetMv tempmv2679[1];
setVector ve2680 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2681 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2679[0] = <ve2680,ve2681>;
resetMv tempmv2682[1];
setMv tempmv2682[0] = rc2[20];
resetMv tempmv2683[1];
setMv tempmv2683[0] = tempmv2679[0];
calculateMvCoeff tempmv2678[0] = DIVISION(tempmv2682,tempmv2683);
resetMv tempmv2684[1];
resetMv tempmv2685[1];
setVector ve2686 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2687 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2685[0] = <ve2686,ve2687>;
resetMv tempmv2688[1];
setMv tempmv2688[0] = rc2[23];
resetMv tempmv2689[1];
setMv tempmv2689[0] = tempmv2685[0];
calculateMvCoeff tempmv2684[0] = DIVISION(tempmv2688,tempmv2689);
resetMv tempmv2690[1];
resetMv tempmv2691[1];
setVector ve2692 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2693 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2691[0] = <ve2692,ve2693>;
resetMv tempmv2694[1];
setMv tempmv2694[0] = rc2[-5];
resetMv tempmv2695[1];
setMv tempmv2695[0] = tempmv2691[0];
calculateMvCoeff tempmv2690[0] = DIVISION(tempmv2694,tempmv2695);
resetMv tempmv2696[1];
resetMv tempmv2697[1];
setVector ve2698 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2699 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2697[0] = <ve2698,ve2699>;
resetMv tempmv2700[1];
setMv tempmv2700[0] = rc2[25];
resetMv tempmv2701[1];
setMv tempmv2701[0] = tempmv2697[0];
calculateMvCoeff tempmv2696[0] = DIVISION(tempmv2700,tempmv2701);
resetMv tempmv2702[1];
resetMv tempmv2703[1];
setVector ve2704 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2705 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2703[0] = <ve2704,ve2705>;
resetMv tempmv2706[1];
setMv tempmv2706[0] = rc2[27];
resetMv tempmv2707[1];
setMv tempmv2707[0] = tempmv2703[0];
calculateMvCoeff tempmv2702[0] = DIVISION(tempmv2706,tempmv2707);
resetMv tempmv2708[1];
resetMv tempmv2709[1];
setVector ve2710 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2711 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2709[0] = <ve2710,ve2711>;
resetMv tempmv2712[1];
setMv tempmv2712[0] = rc2[-9];
resetMv tempmv2713[1];
setMv tempmv2713[0] = tempmv2709[0];
calculateMvCoeff tempmv2708[0] = DIVISION(tempmv2712,tempmv2713);
resetMv tempmv2714[1];
resetMv tempmv2715[1];
setVector ve2716 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2717 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2715[0] = <ve2716,ve2717>;
resetMv tempmv2718[1];
setMv tempmv2718[0] = rc2[29];
resetMv tempmv2719[1];
setMv tempmv2719[0] = tempmv2715[0];
calculateMvCoeff tempmv2714[0] = DIVISION(tempmv2718,tempmv2719);
resetMv tempmv2720[1];
resetMv tempmv2721[1];
setVector ve2722 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2723 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2721[0] = <ve2722,ve2723>;
resetMv tempmv2724[1];
setMv tempmv2724[0] = rc2[-12];
resetMv tempmv2725[1];
setMv tempmv2725[0] = tempmv2721[0];
calculateMvCoeff tempmv2720[0] = DIVISION(tempmv2724,tempmv2725);
resetMv tempmv2726[1];
resetMv tempmv2727[1];
setVector ve2728 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2729 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2727[0] = <ve2728,ve2729>;
resetMv tempmv2730[1];
setMv tempmv2730[0] = rc2[30];
resetMv tempmv2731[1];
setMv tempmv2731[0] = tempmv2727[0];
calculateMvCoeff tempmv2726[0] = DIVISION(tempmv2730,tempmv2731);
resetMv tempmv2732[1];
resetMv tempmv2733[1];
setVector ve2734 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2735 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2733[0] = <ve2734,ve2735>;
resetMv tempmv2736[1];
setMv tempmv2736[0] = rc2[-15];
resetMv tempmv2737[1];
setMv tempmv2737[0] = tempmv2733[0];
calculateMvCoeff tempmv2732[0] = DIVISION(tempmv2736,tempmv2737);
resetMv tempmv2738[1];
resetMv tempmv2739[1];
setVector ve2740 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2741 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2739[0] = <ve2740,ve2741>;
resetMv tempmv2742[1];
setMv tempmv2742[0] = rc2[18];
resetMv tempmv2743[1];
setMv tempmv2743[0] = tempmv2739[0];
calculateMvCoeff tempmv2738[0] = DIVISION(tempmv2742,tempmv2743);
resetMv tempmv2744[1];
resetMv tempmv2745[1];
setVector ve2746 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2747 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2745[0] = <ve2746,ve2747>;
resetMv tempmv2748[1];
setMv tempmv2748[0] = rc2[-31];
resetMv tempmv2749[1];
setMv tempmv2749[0] = tempmv2745[0];
calculateMvCoeff tempmv2744[0] = DIVISION(tempmv2748,tempmv2749);
resetMv tempmv2750[1];
resetMv tempmv2751[1];
setVector ve2752 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2753 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2751[0] = <ve2752,ve2753>;
resetMv tempmv2754[1];
setMv tempmv2754[0] = rc2[21];
resetMv tempmv2755[1];
setMv tempmv2755[0] = tempmv2751[0];
calculateMvCoeff tempmv2750[0] = DIVISION(tempmv2754,tempmv2755);
resetMv tempmv2756[1];
resetMv tempmv2757[1];
setVector ve2758 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2759 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2757[0] = <ve2758,ve2759>;
resetMv tempmv2760[1];
setMv tempmv2760[0] = rc2[24];
resetMv tempmv2761[1];
setMv tempmv2761[0] = tempmv2757[0];
calculateMvCoeff tempmv2756[0] = DIVISION(tempmv2760,tempmv2761);
resetMv tempmv2762[1];
resetMv tempmv2763[1];
setVector ve2764 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2765 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2763[0] = <ve2764,ve2765>;
resetMv tempmv2766[1];
setMv tempmv2766[0] = rc2[28];
resetMv tempmv2767[1];
setMv tempmv2767[0] = tempmv2763[0];
calculateMvCoeff tempmv2762[0] = DIVISION(tempmv2766,tempmv2767);
setVector ve2768 = {rc2[-0,-1,-2,-3,-5,6,7,9,10,12,14,16,18,20,23,-27]};
setVector ve2769 = {tempmv2672[0],tempmv2678[0],tempmv2684[0],tempmv2690[0],tempmv2696[0],tempmv2702[0],tempmv2708[0],tempmv2714[0],tempmv2720[0],tempmv2726[0],tempmv2732[0],tempmv2738[0],tempmv2744[0],tempmv2750[0],tempmv2756[0],tempmv2762[0]};
dotVectors rc2N[3] = <ve2768,ve2769>;

//rc2N[4] = ((((((((((((((((((((((((-(rc2[0])) * ((-(rc2[15])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))) + ((-(rc2[1])) * (rc2[21] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[2])) * (rc2[24] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[3])) * (rc2[25] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[4])) * ((-(rc2[5])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + (-((-(rc2[6])) * (rc2[28] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[7])) * (rc2[29] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[8])) * ((-(rc2[9])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[10])) * (rc2[30] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[11])) * ((-(rc2[12])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[13])) * ((-(rc2[14])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[15])) * ((-(rc2[15])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[16])) * ((-(rc2[31])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[17])) * (rc2[18] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[19])) * (rc2[20] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[21])) * (rc2[21] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[22])) * (rc2[23] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[24])) * (rc2[24] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[25])) * (rc2[25] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + ((-(rc2[26])) * (rc2[27] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[28])) * (rc2[28] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[29])) * (rc2[29] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[30])) * (rc2[30] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[31])) * ((-(rc2[31])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))
resetMv tempmv2770[1];
resetMv tempmv2771[1];
setVector ve2772 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2773 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2771[0] = <ve2772,ve2773>;
resetMv tempmv2774[1];
setMv tempmv2774[0] = rc2[-15];
resetMv tempmv2775[1];
setMv tempmv2775[0] = tempmv2771[0];
calculateMvCoeff tempmv2770[0] = DIVISION(tempmv2774,tempmv2775);
resetMv tempmv2776[1];
resetMv tempmv2777[1];
setVector ve2778 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2779 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2777[0] = <ve2778,ve2779>;
resetMv tempmv2780[1];
setMv tempmv2780[0] = rc2[21];
resetMv tempmv2781[1];
setMv tempmv2781[0] = tempmv2777[0];
calculateMvCoeff tempmv2776[0] = DIVISION(tempmv2780,tempmv2781);
resetMv tempmv2782[1];
resetMv tempmv2783[1];
setVector ve2784 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2785 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2783[0] = <ve2784,ve2785>;
resetMv tempmv2786[1];
setMv tempmv2786[0] = rc2[24];
resetMv tempmv2787[1];
setMv tempmv2787[0] = tempmv2783[0];
calculateMvCoeff tempmv2782[0] = DIVISION(tempmv2786,tempmv2787);
resetMv tempmv2788[1];
resetMv tempmv2789[1];
setVector ve2790 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2791 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2789[0] = <ve2790,ve2791>;
resetMv tempmv2792[1];
setMv tempmv2792[0] = rc2[25];
resetMv tempmv2793[1];
setMv tempmv2793[0] = tempmv2789[0];
calculateMvCoeff tempmv2788[0] = DIVISION(tempmv2792,tempmv2793);
resetMv tempmv2794[1];
resetMv tempmv2795[1];
setVector ve2796 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2797 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2795[0] = <ve2796,ve2797>;
resetMv tempmv2798[1];
setMv tempmv2798[0] = rc2[-5];
resetMv tempmv2799[1];
setMv tempmv2799[0] = tempmv2795[0];
calculateMvCoeff tempmv2794[0] = DIVISION(tempmv2798,tempmv2799);
resetMv tempmv2800[1];
resetMv tempmv2801[1];
setVector ve2802 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2803 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2801[0] = <ve2802,ve2803>;
resetMv tempmv2804[1];
setMv tempmv2804[0] = rc2[28];
resetMv tempmv2805[1];
setMv tempmv2805[0] = tempmv2801[0];
calculateMvCoeff tempmv2800[0] = DIVISION(tempmv2804,tempmv2805);
resetMv tempmv2806[1];
resetMv tempmv2807[1];
setVector ve2808 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2809 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2807[0] = <ve2808,ve2809>;
resetMv tempmv2810[1];
setMv tempmv2810[0] = rc2[29];
resetMv tempmv2811[1];
setMv tempmv2811[0] = tempmv2807[0];
calculateMvCoeff tempmv2806[0] = DIVISION(tempmv2810,tempmv2811);
resetMv tempmv2812[1];
resetMv tempmv2813[1];
setVector ve2814 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2815 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2813[0] = <ve2814,ve2815>;
resetMv tempmv2816[1];
setMv tempmv2816[0] = rc2[-9];
resetMv tempmv2817[1];
setMv tempmv2817[0] = tempmv2813[0];
calculateMvCoeff tempmv2812[0] = DIVISION(tempmv2816,tempmv2817);
resetMv tempmv2818[1];
resetMv tempmv2819[1];
setVector ve2820 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2821 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2819[0] = <ve2820,ve2821>;
resetMv tempmv2822[1];
setMv tempmv2822[0] = rc2[30];
resetMv tempmv2823[1];
setMv tempmv2823[0] = tempmv2819[0];
calculateMvCoeff tempmv2818[0] = DIVISION(tempmv2822,tempmv2823);
resetMv tempmv2824[1];
resetMv tempmv2825[1];
setVector ve2826 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2827 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2825[0] = <ve2826,ve2827>;
resetMv tempmv2828[1];
setMv tempmv2828[0] = rc2[-12];
resetMv tempmv2829[1];
setMv tempmv2829[0] = tempmv2825[0];
calculateMvCoeff tempmv2824[0] = DIVISION(tempmv2828,tempmv2829);
resetMv tempmv2830[1];
resetMv tempmv2831[1];
setVector ve2832 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2833 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2831[0] = <ve2832,ve2833>;
resetMv tempmv2834[1];
setMv tempmv2834[0] = rc2[-14];
resetMv tempmv2835[1];
setMv tempmv2835[0] = tempmv2831[0];
calculateMvCoeff tempmv2830[0] = DIVISION(tempmv2834,tempmv2835);
resetMv tempmv2836[1];
resetMv tempmv2837[1];
setVector ve2838 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2839 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2837[0] = <ve2838,ve2839>;
resetMv tempmv2840[1];
setMv tempmv2840[0] = rc2[-15];
resetMv tempmv2841[1];
setMv tempmv2841[0] = tempmv2837[0];
calculateMvCoeff tempmv2836[0] = DIVISION(tempmv2840,tempmv2841);
resetMv tempmv2842[1];
resetMv tempmv2843[1];
setVector ve2844 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2845 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2843[0] = <ve2844,ve2845>;
resetMv tempmv2846[1];
setMv tempmv2846[0] = rc2[-31];
resetMv tempmv2847[1];
setMv tempmv2847[0] = tempmv2843[0];
calculateMvCoeff tempmv2842[0] = DIVISION(tempmv2846,tempmv2847);
resetMv tempmv2848[1];
resetMv tempmv2849[1];
setVector ve2850 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2851 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2849[0] = <ve2850,ve2851>;
resetMv tempmv2852[1];
setMv tempmv2852[0] = rc2[18];
resetMv tempmv2853[1];
setMv tempmv2853[0] = tempmv2849[0];
calculateMvCoeff tempmv2848[0] = DIVISION(tempmv2852,tempmv2853);
resetMv tempmv2854[1];
resetMv tempmv2855[1];
setVector ve2856 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2857 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2855[0] = <ve2856,ve2857>;
resetMv tempmv2858[1];
setMv tempmv2858[0] = rc2[20];
resetMv tempmv2859[1];
setMv tempmv2859[0] = tempmv2855[0];
calculateMvCoeff tempmv2854[0] = DIVISION(tempmv2858,tempmv2859);
resetMv tempmv2860[1];
resetMv tempmv2861[1];
setVector ve2862 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2863 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2861[0] = <ve2862,ve2863>;
resetMv tempmv2864[1];
setMv tempmv2864[0] = rc2[21];
resetMv tempmv2865[1];
setMv tempmv2865[0] = tempmv2861[0];
calculateMvCoeff tempmv2860[0] = DIVISION(tempmv2864,tempmv2865);
resetMv tempmv2866[1];
resetMv tempmv2867[1];
setVector ve2868 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2869 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2867[0] = <ve2868,ve2869>;
resetMv tempmv2870[1];
setMv tempmv2870[0] = rc2[23];
resetMv tempmv2871[1];
setMv tempmv2871[0] = tempmv2867[0];
calculateMvCoeff tempmv2866[0] = DIVISION(tempmv2870,tempmv2871);
resetMv tempmv2872[1];
resetMv tempmv2873[1];
setVector ve2874 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2875 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2873[0] = <ve2874,ve2875>;
resetMv tempmv2876[1];
setMv tempmv2876[0] = rc2[24];
resetMv tempmv2877[1];
setMv tempmv2877[0] = tempmv2873[0];
calculateMvCoeff tempmv2872[0] = DIVISION(tempmv2876,tempmv2877);
resetMv tempmv2878[1];
resetMv tempmv2879[1];
setVector ve2880 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2881 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2879[0] = <ve2880,ve2881>;
resetMv tempmv2882[1];
setMv tempmv2882[0] = rc2[25];
resetMv tempmv2883[1];
setMv tempmv2883[0] = tempmv2879[0];
calculateMvCoeff tempmv2878[0] = DIVISION(tempmv2882,tempmv2883);
resetMv tempmv2884[1];
resetMv tempmv2885[1];
setVector ve2886 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2887 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2885[0] = <ve2886,ve2887>;
resetMv tempmv2888[1];
setMv tempmv2888[0] = rc2[27];
resetMv tempmv2889[1];
setMv tempmv2889[0] = tempmv2885[0];
calculateMvCoeff tempmv2884[0] = DIVISION(tempmv2888,tempmv2889);
resetMv tempmv2890[1];
resetMv tempmv2891[1];
setVector ve2892 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2893 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2891[0] = <ve2892,ve2893>;
resetMv tempmv2894[1];
setMv tempmv2894[0] = rc2[28];
resetMv tempmv2895[1];
setMv tempmv2895[0] = tempmv2891[0];
calculateMvCoeff tempmv2890[0] = DIVISION(tempmv2894,tempmv2895);
resetMv tempmv2896[1];
resetMv tempmv2897[1];
setVector ve2898 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2899 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2897[0] = <ve2898,ve2899>;
resetMv tempmv2900[1];
setMv tempmv2900[0] = rc2[29];
resetMv tempmv2901[1];
setMv tempmv2901[0] = tempmv2897[0];
calculateMvCoeff tempmv2896[0] = DIVISION(tempmv2900,tempmv2901);
resetMv tempmv2902[1];
resetMv tempmv2903[1];
setVector ve2904 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2905 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2903[0] = <ve2904,ve2905>;
resetMv tempmv2906[1];
setMv tempmv2906[0] = rc2[30];
resetMv tempmv2907[1];
setMv tempmv2907[0] = tempmv2903[0];
calculateMvCoeff tempmv2902[0] = DIVISION(tempmv2906,tempmv2907);
resetMv tempmv2908[1];
resetMv tempmv2909[1];
setVector ve2910 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2911 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2909[0] = <ve2910,ve2911>;
resetMv tempmv2912[1];
setMv tempmv2912[0] = rc2[-31];
resetMv tempmv2913[1];
setMv tempmv2913[0] = tempmv2909[0];
calculateMvCoeff tempmv2908[0] = DIVISION(tempmv2912,tempmv2913);
setVector ve2914 = {rc2[-0,-1,-2,-3,-4,6,7,8,10,11,13,15,16,17,19,21,22,24,25,-26,-28,-29,-30,-31]};
setVector ve2915 = {tempmv2770[0],tempmv2776[0],tempmv2782[0],tempmv2788[0],tempmv2794[0],tempmv2800[0],tempmv2806[0],tempmv2812[0],tempmv2818[0],tempmv2824[0],tempmv2830[0],tempmv2836[0],tempmv2842[0],tempmv2848[0],tempmv2854[0],tempmv2860[0],tempmv2866[0],tempmv2872[0],tempmv2878[0],tempmv2884[0],tempmv2890[0],tempmv2896[0],tempmv2902[0],tempmv2908[0]};
dotVectors rc2N[4] = <ve2914,ve2915>;

//rc2N[5] = ((((((((-(rc2[5])) * ((-(rc2[5])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))) + (-((-(rc2[9])) * ((-(rc2[9])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[12])) * ((-(rc2[12])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[14])) * ((-(rc2[14])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[18])) * (rc2[18] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[20])) * (rc2[20] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[23])) * (rc2[23] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + ((-(rc2[27])) * (rc2[27] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))
resetMv tempmv2916[1];
resetMv tempmv2917[1];
setVector ve2918 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2919 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2917[0] = <ve2918,ve2919>;
resetMv tempmv2920[1];
setMv tempmv2920[0] = rc2[-5];
resetMv tempmv2921[1];
setMv tempmv2921[0] = tempmv2917[0];
calculateMvCoeff tempmv2916[0] = DIVISION(tempmv2920,tempmv2921);
resetMv tempmv2922[1];
resetMv tempmv2923[1];
setVector ve2924 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2925 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2923[0] = <ve2924,ve2925>;
resetMv tempmv2926[1];
setMv tempmv2926[0] = rc2[-9];
resetMv tempmv2927[1];
setMv tempmv2927[0] = tempmv2923[0];
calculateMvCoeff tempmv2922[0] = DIVISION(tempmv2926,tempmv2927);
resetMv tempmv2928[1];
resetMv tempmv2929[1];
setVector ve2930 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2931 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2929[0] = <ve2930,ve2931>;
resetMv tempmv2932[1];
setMv tempmv2932[0] = rc2[-12];
resetMv tempmv2933[1];
setMv tempmv2933[0] = tempmv2929[0];
calculateMvCoeff tempmv2928[0] = DIVISION(tempmv2932,tempmv2933);
resetMv tempmv2934[1];
resetMv tempmv2935[1];
setVector ve2936 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2937 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2935[0] = <ve2936,ve2937>;
resetMv tempmv2938[1];
setMv tempmv2938[0] = rc2[-14];
resetMv tempmv2939[1];
setMv tempmv2939[0] = tempmv2935[0];
calculateMvCoeff tempmv2934[0] = DIVISION(tempmv2938,tempmv2939);
resetMv tempmv2940[1];
resetMv tempmv2941[1];
setVector ve2942 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2943 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2941[0] = <ve2942,ve2943>;
resetMv tempmv2944[1];
setMv tempmv2944[0] = rc2[18];
resetMv tempmv2945[1];
setMv tempmv2945[0] = tempmv2941[0];
calculateMvCoeff tempmv2940[0] = DIVISION(tempmv2944,tempmv2945);
resetMv tempmv2946[1];
resetMv tempmv2947[1];
setVector ve2948 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2949 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2947[0] = <ve2948,ve2949>;
resetMv tempmv2950[1];
setMv tempmv2950[0] = rc2[20];
resetMv tempmv2951[1];
setMv tempmv2951[0] = tempmv2947[0];
calculateMvCoeff tempmv2946[0] = DIVISION(tempmv2950,tempmv2951);
resetMv tempmv2952[1];
resetMv tempmv2953[1];
setVector ve2954 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2955 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2953[0] = <ve2954,ve2955>;
resetMv tempmv2956[1];
setMv tempmv2956[0] = rc2[23];
resetMv tempmv2957[1];
setMv tempmv2957[0] = tempmv2953[0];
calculateMvCoeff tempmv2952[0] = DIVISION(tempmv2956,tempmv2957);
resetMv tempmv2958[1];
resetMv tempmv2959[1];
setVector ve2960 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2961 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors tempmv2959[0] = <ve2960,ve2961>;
resetMv tempmv2962[1];
setMv tempmv2962[0] = rc2[27];
resetMv tempmv2963[1];
setMv tempmv2963[0] = tempmv2959[0];
calculateMvCoeff tempmv2958[0] = DIVISION(tempmv2962,tempmv2963);
setVector ve2964 = {rc2[-5,9,12,14,18,20,23,-27]};
setVector ve2965 = {tempmv2916[0],tempmv2922[0],tempmv2928[0],tempmv2934[0],tempmv2940[0],tempmv2946[0],tempmv2952[0],tempmv2958[0]};
dotVectors rc2N[5] = <ve2964,ve2965>;

//temp3[0] = -2.0 * (((((rc1N[1] * sat1[1]) + (rc1N[2] * sat1[2])) + (rc1N[3] * sat1[3])) + (-(rc1N[4]))) + (-(rc1N[5] * sat1[4])))
resetMv temp3[32];
resetMv tempmv2966[1];
setVector ve2967 = {rc1N[1,2,3,-4,-5]};
setVector ve2968 = {sat1[1,2,3],1.0,sat1[4]};
dotVectors tempmv2966[0] = <ve2967,ve2968>;
setVector ve2969 = {-2.0};
setVector ve2970 = {tempmv2966[0]};
dotVectors temp3[0] = <ve2969,ve2970>;

//temp4 = sqrt(temp3)
resetMv temp4[32];
calculateMv temp4 = SQRT(temp3);

//z11[0] = temp4[0] - inputsVector[0]
resetMv z11[32];
setVector ve2971 = {temp4[0],inputsVector[-0]};
dotVectors z11[0] = <ve2971>;

//temp5[0] = -2.0 * (((((rc2N[1] * sat1[1]) + (rc2N[2] * sat1[2])) + (rc2N[3] * sat1[3])) + (-(rc2N[4]))) + (-(rc2N[5] * sat1[4])))
resetMv temp5[32];
resetMv tempmv2972[1];
setVector ve2973 = {rc2N[1,2,3,-4,-5]};
setVector ve2974 = {sat1[1,2,3],1.0,sat1[4]};
dotVectors tempmv2972[0] = <ve2973,ve2974>;
setVector ve2975 = {-2.0};
setVector ve2976 = {tempmv2972[0]};
dotVectors temp5[0] = <ve2975,ve2976>;

//temp6 = sqrt(temp5)
resetMv temp6[32];
calculateMv temp6 = SQRT(temp5);

//z12[0] = temp6[0] - inputsVector[0]
resetMv z12[32];
setVector ve2977 = {temp6[0],inputsVector[-0]};
dotVectors z12[0] = <ve2977>;

//temp7[0] = -2.0 * (((((rc1N[1] * sat2[1]) + (rc1N[2] * sat2[2])) + (rc1N[3] * sat2[3])) + (-(rc1N[4]))) + (-(rc1N[5] * sat2[4])))
resetMv temp7[32];
resetMv tempmv2978[1];
setVector ve2979 = {rc1N[1,2,3,-4,-5]};
setVector ve2980 = {sat2[1,2,3],1.0,sat2[4]};
dotVectors tempmv2978[0] = <ve2979,ve2980>;
setVector ve2981 = {-2.0};
setVector ve2982 = {tempmv2978[0]};
dotVectors temp7[0] = <ve2981,ve2982>;

//temp8 = sqrt(temp7)
resetMv temp8[32];
calculateMv temp8 = SQRT(temp7);

//z21[0] = temp8[0] - inputsVector[1]
resetMv z21[32];
setVector ve2983 = {temp8[0],inputsVector[-1]};
dotVectors z21[0] = <ve2983>;

//temp9[0] = -2.0 * (((((rc2N[1] * sat2[1]) + (rc2N[2] * sat2[2])) + (rc2N[3] * sat2[3])) + (-(rc2N[4]))) + (-(rc2N[5] * sat2[4])))
resetMv temp9[32];
resetMv tempmv2984[1];
setVector ve2985 = {rc2N[1,2,3,-4,-5]};
setVector ve2986 = {sat2[1,2,3],1.0,sat2[4]};
dotVectors tempmv2984[0] = <ve2985,ve2986>;
setVector ve2987 = {-2.0};
setVector ve2988 = {tempmv2984[0]};
dotVectors temp9[0] = <ve2987,ve2988>;

//temp10 = sqrt(temp9)
resetMv temp10[32];
calculateMv temp10 = SQRT(temp9);

//z22[0] = temp10[0] - inputsVector[1]
resetMv z22[32];
setVector ve2989 = {temp10[0],inputsVector[-1]};
dotVectors z22[0] = <ve2989>;

//temp11[0] = -2.0 * (((((rc1N[1] * sat3[1]) + (rc1N[2] * sat3[2])) + (rc1N[3] * sat3[3])) + (-(rc1N[4]))) + (-(rc1N[5] * sat3[4])))
resetMv temp11[32];
resetMv tempmv2990[1];
setVector ve2991 = {rc1N[1,2,3,-4,-5]};
setVector ve2992 = {sat3[1,2,3],1.0,sat3[4]};
dotVectors tempmv2990[0] = <ve2991,ve2992>;
setVector ve2993 = {-2.0};
setVector ve2994 = {tempmv2990[0]};
dotVectors temp11[0] = <ve2993,ve2994>;

//temp12 = sqrt(temp11)
resetMv temp12[32];
calculateMv temp12 = SQRT(temp11);

//z31[0] = temp12[0] - inputsVector[2]
resetMv z31[32];
setVector ve2995 = {temp12[0],inputsVector[-2]};
dotVectors z31[0] = <ve2995>;

//temp13[0] = -2.0 * (((((rc2N[1] * sat3[1]) + (rc2N[2] * sat3[2])) + (rc2N[3] * sat3[3])) + (-(rc2N[4]))) + (-(rc2N[5] * sat3[4])))
resetMv temp13[32];
resetMv tempmv2996[1];
setVector ve2997 = {rc2N[1,2,3,-4,-5]};
setVector ve2998 = {sat3[1,2,3],1.0,sat3[4]};
dotVectors tempmv2996[0] = <ve2997,ve2998>;
setVector ve2999 = {-2.0};
setVector ve3000 = {tempmv2996[0]};
dotVectors temp13[0] = <ve2999,ve3000>;

//temp14 = sqrt(temp13)
resetMv temp14[32];
calculateMv temp14 = SQRT(temp13);

//z32[0] = temp14[0] - inputsVector[2]
resetMv z32[32];
setVector ve3001 = {temp14[0],inputsVector[-2]};
dotVectors z32[0] = <ve3001>;

