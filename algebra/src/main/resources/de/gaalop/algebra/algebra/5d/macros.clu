//Creates a vector in N3 of three coordinates x,y,z
//args:
//x 
//y 
//z 
VecN3 = {
    _P(1)*e1+_P(2)*e2+_P(3)*e3+0.5*(_P(1)*_P(1)+_P(2)*_P(2)+_P(3)*_P(3))*einf+e0
}

//Creates a point in N3 of three coordinates x,y,z
//args:
//x
//y
//z
createPoint = {
    _P(1)*e1+_P(2)*e2+_P(3)*e3+0.5*(_P(1)*_P(1)+_P(2)*_P(2)+_P(3)*_P(3))*einf+e0
}

//The dualization operator
//args:
//m 
Dual = {
    _P(1)*(-e1^e2^e3^einf^e0)
}

// Creates a rotor, that rotates along an axis (defined by x,y,z) with an angle
//args:
//x
//y
//z
//angle
RotorN3 = {
    cos(_P(4)/2)+sin(_P(4)/2)*(-_P(1)*(e2^e3)+_P(2)*(e1^e3)-_P(3)*(e1^e2))/sqrt(_P(1)*_P(1)+_P(2)*_P(2)+_P(3)*_P(3))
}

// Creates a sphere, defined by a centre and a radius
//args:
//centre
//r
SphereN3 = {
    *(_P(1)-0.5*_P(2)*_P(2)*einf)
}

// Creates a sphere, defined by the centre coordinates and a radius
//args:
//centre_x
//centre_y
//centre_z
//r
SphereN3 = {
    SphereN3(VecN3(_P(1),_P(2),_P(3)),_P(4))
}

// Creates a translator
//args:
//x
//y
//z
TranslatorN3 = {
    1-0.5*((_P(1)*e1+_P(2)*e2+_P(3)*e3)*einf)
}

// Extracts the first point from a given point pair
// and returns it
//args:
//pp: The Point Pair
ExtractFirstPoint = {
    dPP = *(_P(1));
    (dPP+sqrt(abs(_P(1)._P(1))))/(einf.dPP)
}

// Extracts the second point from a given point pair
// and returns it
//args:
//pp: The Point Pair
ExtractSecondPoint = {
    dPP = *(_P(1));
    (dPP-sqrt(abs(_P(1)._P(1))))/(einf.dPP)
}

// Normalizes a given multivector
//args:
//mv: The multivector
Normalize = {
    -_P(1)/(_P(1).einf)
}
